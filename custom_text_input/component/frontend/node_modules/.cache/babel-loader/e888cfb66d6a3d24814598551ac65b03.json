{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.waitUntilIndexIsReady = exports.createIndex = void 0;\nconst db_control_1 = require(\"../pinecone-generated-ts-fetch/db_control\");\nconst utils_1 = require(\"../utils\");\nconst types_1 = require(\"./types\");\nconst errors_1 = require(\"../errors\");\nconst validateObjectProperties_1 = require(\"../utils/validateObjectProperties\");\nconst CreateIndexOptionsProperties = ['spec', 'name', 'dimension', 'metric', 'deletionProtection', 'waitUntilReady', 'suppressConflicts', 'tags', 'vectorType'];\nconst CreateIndexSpecProperties = ['serverless', 'pod'];\nconst CreateIndexServerlessSpecProperties = ['cloud', 'region', 'sourceCollection'];\nconst CreateIndexPodSpecProperties = ['environment', 'replicas', 'shards', 'podType', 'pods', 'metadataConfig', 'sourceCollection'];\nconst createIndex = api => {\n  return async options => {\n    if (!options) {\n      throw new errors_1.PineconeArgumentError('You must pass an object with required properties (`name`, `dimension`, `spec`) to create an index.');\n    }\n    // If metric is not specified for a sparse index, default to dotproduct\n    if (options.vectorType && options.vectorType.toLowerCase() === 'sparse') {\n      if (!options.metric) {\n        options.metric = db_control_1.IndexModelMetricEnum.Dotproduct;\n      }\n    } else {\n      // If metric is not specified for a dense index, default to cosine\n      if (!options.metric) {\n        options.metric = db_control_1.IndexModelMetricEnum.Cosine;\n      }\n    }\n    validateCreateIndexRequest(options);\n    try {\n      const createResponse = await api.createIndex({\n        createIndexRequest: options\n      });\n      if (options.waitUntilReady) {\n        return await (0, exports.waitUntilIndexIsReady)(api, options.name);\n      }\n      return createResponse;\n    } catch (e) {\n      if (!(options.suppressConflicts && e instanceof Error && e.name === 'PineconeConflictError')) {\n        throw e;\n      }\n    }\n  };\n};\nexports.createIndex = createIndex;\nconst waitUntilIndexIsReady = async function (api, indexName) {\n  let seconds = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  try {\n    var _indexDescription$sta;\n    const indexDescription = await api.describeIndex({\n      indexName\n    });\n    if (!((_indexDescription$sta = indexDescription.status) === null || _indexDescription$sta === void 0 ? void 0 : _indexDescription$sta.ready)) {\n      await new Promise(r => setTimeout(r, 1000));\n      return await (0, exports.waitUntilIndexIsReady)(api, indexName, seconds + 1);\n    } else {\n      (0, utils_1.debugLog)(\"Index \".concat(indexName, \" is ready after \").concat(seconds));\n      return indexDescription;\n    }\n  } catch (e) {\n    const err = await (0, errors_1.handleApiError)(e, async (_, rawMessageText) => \"Error creating index \".concat(indexName, \": \").concat(rawMessageText));\n    throw err;\n  }\n};\nexports.waitUntilIndexIsReady = waitUntilIndexIsReady;\nconst validateCreateIndexRequest = options => {\n  // validate options properties\n  if (options) {\n    (0, validateObjectProperties_1.ValidateObjectProperties)(options, CreateIndexOptionsProperties);\n  }\n  if (!options.name) {\n    throw new errors_1.PineconeArgumentError('You must pass a non-empty string for `name` in order to create an index.');\n  }\n  if (options.dimension && options.dimension <= 0) {\n    throw new errors_1.PineconeArgumentError('You must pass a positive integer for `dimension` in order to create an index.');\n  }\n  // validate options.spec properties\n  if (!options.spec) {\n    throw new errors_1.PineconeArgumentError('You must pass a `pods` or `serverless` `spec` object in order to create an index.');\n  }\n  if (options.spec) {\n    (0, validateObjectProperties_1.ValidateObjectProperties)(options.spec, CreateIndexSpecProperties);\n  }\n  // validate options.metric\n  if (options.metric && !Object.values(db_control_1.IndexModelMetricEnum).includes(options.metric)) {\n    {\n      throw new errors_1.PineconeArgumentError(\"Invalid metric value: \".concat(options.metric, \". Valid values are: 'cosine', 'euclidean', or 'dotproduct.'\"));\n    }\n  }\n  // validate options.spec.serverless properties if serverless spec is passed\n  if (options.spec.serverless) {\n    (0, validateObjectProperties_1.ValidateObjectProperties)(options.spec.serverless, CreateIndexServerlessSpecProperties);\n    // extract and default vectorType to 'dense' if not specified\n    const vectorType = options.vectorType ? options.vectorType.toLowerCase() : 'dense';\n    if (vectorType !== 'dense' && vectorType !== 'sparse') {\n      throw new errors_1.PineconeArgumentError('Invalid `vectorType` value. Valid values are `dense` or `sparse`.');\n    }\n    // sparse indexes must have a metric of 'dotproduct' and no dimension\n    if (vectorType == 'sparse') {\n      if (options.dimension && options.dimension > 0) {\n        throw new errors_1.PineconeArgumentError('Sparse indexes cannot have a `dimension`.');\n      }\n      if (options.metric && options.metric !== 'dotproduct') {\n        throw new errors_1.PineconeArgumentError('Sparse indexes must have a `metric` of `dotproduct`.');\n      }\n    } else if (vectorType == 'dense') {\n      // dense indexes must have a dimension\n      if (!options.dimension || options.dimension <= 0) {\n        throw new errors_1.PineconeArgumentError('You must pass a positive `dimension` when creating a dense index.');\n      }\n    }\n    // validate serverless cloud & region\n    if (!options.spec.serverless.cloud) {\n      throw new errors_1.PineconeArgumentError('You must pass a `cloud` for the serverless `spec` object in order to create an index.');\n    }\n    if (options.spec.serverless.cloud && !Object.values(db_control_1.ServerlessSpecCloudEnum).includes(options.spec.serverless.cloud)) {\n      throw new errors_1.PineconeArgumentError(\"Invalid cloud value: \".concat(options.spec.serverless.cloud, \". Valid values are: \").concat(Object.values(db_control_1.ServerlessSpecCloudEnum).join(', '), \".\"));\n    }\n    if (!options.spec.serverless.region) {\n      throw new errors_1.PineconeArgumentError('You must pass a `region` for the serverless `spec` object in order to create an index.');\n    }\n  } else if (options.spec.pod) {\n    // validate options.spec.pod properties if pod spec is passed\n    (0, validateObjectProperties_1.ValidateObjectProperties)(options.spec.pod, CreateIndexPodSpecProperties);\n    if (!options.spec.pod.environment) {\n      throw new errors_1.PineconeArgumentError('You must pass an `environment` for the pod `spec` object in order to create an index.');\n    }\n    // pod indexes must have a dimension\n    if (!options.dimension || options.dimension <= 0) {\n      throw new errors_1.PineconeArgumentError('You must pass a positive `dimension` when creating a dense index.');\n    }\n    // pod indexes must be dense\n    const vectorType = 'dense';\n    if (options.vectorType && options.vectorType.toLowerCase() !== vectorType) {\n      throw new errors_1.PineconeArgumentError('Pod indexes must have a `vectorType` of `dense`.');\n    }\n    if (!options.spec.pod.podType) {\n      throw new errors_1.PineconeArgumentError('You must pass a `podType` for the pod `spec` object in order to create an index.');\n    }\n    if (options.spec.pod.replicas && options.spec.pod.replicas <= 0) {\n      throw new errors_1.PineconeArgumentError('You must pass a positive integer for `replicas` in order to create an index.');\n    }\n    if (options.spec.pod.pods && options.spec.pod.pods <= 0) {\n      throw new errors_1.PineconeArgumentError('You must pass a positive integer for `pods` in order to create an index.');\n    }\n    if (!types_1.ValidPodTypes.includes(options.spec.pod.podType)) {\n      throw new errors_1.PineconeArgumentError(\"Invalid pod type: \".concat(options.spec.pod.podType, \". Valid values are: \").concat(types_1.ValidPodTypes.join(', '), \".\"));\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["CreateIndexOptionsProperties","CreateIndexSpecProperties","CreateIndexServerlessSpecProperties","CreateIndexPodSpecProperties","createIndex","api","options","errors_1","vectorType","toLowerCase","metric","db_control_1","Dotproduct","Cosine","validateCreateIndexRequest","createResponse","createIndexRequest","waitUntilReady","name","e","suppressConflicts","Error","exports","waitUntilIndexIsReady","indexName","seconds","indexDescription","describeIndex","status","ready","Promise","r","setTimeout","err","_","rawMessageText","dimension","spec","Object","values","includes","serverless","cloud","join","region","pod","environment","podType","replicas","pods","types_1"],"sourceRoot":"","sources":["../../src/control/createIndex.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}