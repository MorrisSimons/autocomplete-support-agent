{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.modelValidation = exports.messagesValidation = exports.validateChatOptions = exports.chat = void 0;\nconst assistant_data_1 = require(\"../../pinecone-generated-ts-fetch/assistant_data\");\nconst utils_1 = require(\"../../utils\");\nconst types_1 = require(\"./types\");\nconst validateObjectProperties_1 = require(\"../../utils/validateObjectProperties\");\nconst errors_1 = require(\"../../errors\");\nconst chat = (assistantName, apiProvider) => {\n  return async options => {\n    var _options$contextOptio, _options$contextOptio2;\n    (0, exports.validateChatOptions)(options);\n    const api = await apiProvider.provideData();\n    const messages = (0, exports.messagesValidation)(options);\n    const model = (0, exports.modelValidation)(options);\n    const request = {\n      assistantName: assistantName,\n      chat: {\n        messages: messages,\n        stream: false,\n        model: model,\n        filter: options.filter,\n        jsonResponse: options.jsonResponse,\n        includeHighlights: options.includeHighlights,\n        contextOptions: {\n          // use topK from contextOptions if provided, otherwise use topK from options\n          topK: ((_options$contextOptio = options.contextOptions) === null || _options$contextOptio === void 0 ? void 0 : _options$contextOptio.topK) || options.topK,\n          snippetSize: (_options$contextOptio2 = options.contextOptions) === null || _options$contextOptio2 === void 0 ? void 0 : _options$contextOptio2.snippetSize\n        }\n      }\n    };\n    const retryWrapper = new utils_1.RetryOnServerFailure(() => api.chatAssistant(request));\n    return await retryWrapper.execute();\n  };\n};\nexports.chat = chat;\nconst validateChatOptions = options => {\n  if (!options || !options.messages) {\n    throw new errors_1.PineconeArgumentError('You must pass an object with required properties (`messages`) to chat with an assistant.');\n  }\n  (0, validateObjectProperties_1.ValidateObjectProperties)(options, types_1.ChatOptionsType);\n  if (options.model) {\n    if (!Object.values(assistant_data_1.ChatModelEnum).includes(options.model)) {\n      throw new errors_1.PineconeArgumentError(\"Invalid model: \\\"\".concat(options.model, \"\\\". Must be one of: \").concat(Object.values(assistant_data_1.ChatModelEnum).map(model => \"\\\"\".concat(model, \"\\\"\")).join(', '), \".\"));\n    }\n  }\n};\nexports.validateChatOptions = validateChatOptions;\n/**\n * Validates the messages passed to the Assistant.\n *\n * @param options - A {@link ChatRequest} object containing the messages to send to the Assistant.\n * @throws An Error `role` key is not one of `user` or `assistant`.\n * @throws An Error if the message object does not have exactly two keys: `role` and `content`.\n * @returns An array of {@link MessageModel} objects containing the messages to send to the Assistant.\n */\nconst messagesValidation = options => {\n  let messages = [];\n  // If messages are passed as a list of strings:\n  if (options.messages && typeof options.messages[0] == 'string') {\n    // role defaults to user if not specified\n    messages = options.messages.map(message => {\n      return {\n        role: 'user',\n        content: message\n      };\n    });\n  }\n  // If messages are passed as a list of objects:\n  if (Array.isArray(options.messages) && typeof options.messages[0] === 'object') {\n    if (options.messages[0]['role']) {\n      if (options.messages[0]['role'].toLowerCase() !== 'user' && options.messages[0]['role'].toLowerCase() !== 'assistant') {\n        throw new Error('No role specified in message object. Must be one of \"user\" or \"assistant\"');\n      }\n    }\n    // Extract unique keys from all messages\n    const keys = Array.from(new Set(options.messages.flatMap(message => Object.keys(message))));\n    if (keys.length !== 2) {\n      throw new Error('Message object must have exactly two keys: \"role\" and \"content\"');\n    }\n    // Cast messages after validating keys\n    return messages = options.messages;\n  }\n  return messages;\n};\nexports.messagesValidation = messagesValidation;\n/**\n * Validates the model passed to the Assistant.\n *\n * @param options - A {@link ChatRequest} object containing the model to use for the Assistant.\n * @throws An Error if the model is not one of the available models as outlined in {@link ChatModelEnum}.\n */\nconst modelValidation = options => {\n  const allowedModels = Object.values(assistant_data_1.ChatModelEnum);\n  // Make sure passed string for 'model' matches one of the Enum values; default to Gpt4o\n  let model = assistant_data_1.ChatModelEnum.Gpt4o;\n  if (options.model) {\n    if (!allowedModels.includes(options.model)) {\n      throw new Error(\"Invalid model specified. Must be one of \".concat(allowedModels.map(m => \"\\\"\".concat(m, \"\\\"\")).join(', '), \":\"));\n    } else {\n      model = options.model;\n    }\n  }\n  return model;\n};\nexports.modelValidation = modelValidation;","map":{"version":3,"mappings":"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","names":["chat","assistantName","apiProvider","options","api","provideData","messages","model","request","stream","filter","jsonResponse","includeHighlights","contextOptions","topK","snippetSize","retryWrapper","utils_1","chatAssistant","execute","exports","validateChatOptions","errors_1","types_1","Object","values","assistant_data_1","includes","map","join","messagesValidation","message","role","content","Array","isArray","toLowerCase","Error","keys","from","Set","flatMap","length","modelValidation","allowedModels","Gpt4o","m"],"sourceRoot":"","sources":["../../../src/assistant/data/chat.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}