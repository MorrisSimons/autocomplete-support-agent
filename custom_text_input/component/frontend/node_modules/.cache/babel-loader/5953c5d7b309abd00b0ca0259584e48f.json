{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UpsertRecordsCommand = void 0;\nconst errors_1 = require(\"../../errors\");\nconst utils_1 = require(\"../../utils\");\nconst db_data_1 = require(\"../../pinecone-generated-ts-fetch/db_data\");\nclass UpsertRecordsCommand {\n  constructor(apiProvider, namespace, config) {\n    this.validator = records => {\n      for (const record of records) {\n        if (!record.id && !record._id) {\n          throw new errors_1.PineconeArgumentError('Every record must include an `id` or `_id` property in order to upsert.');\n        }\n      }\n    };\n    this.apiProvider = apiProvider;\n    this.namespace = namespace;\n    this.config = config;\n  }\n  async run(records, maxRetries) {\n    const fetch = (0, utils_1.getFetch)(this.config);\n    this.validator(records);\n    const hostUrl = await this.apiProvider.provideHostUrl();\n    const upsertRecordsUrl = \"\".concat(hostUrl, \"/records/namespaces/\").concat(this.namespace, \"/upsert\");\n    const requestHeaders = {\n      'Api-Key': this.config.apiKey,\n      'User-Agent': (0, utils_1.buildUserAgent)(this.config),\n      'X-Pinecone-Api-Version': db_data_1.X_PINECONE_API_VERSION\n    };\n    const retryWrapper = new utils_1.RetryOnServerFailure(() => fetch(upsertRecordsUrl, {\n      method: 'POST',\n      headers: requestHeaders,\n      body: toNdJson(records)\n    }), maxRetries);\n    const response = await retryWrapper.execute();\n    if (response.ok) {\n      return;\n    } else {\n      const err = await (0, errors_1.handleApiError)(new db_data_1.ResponseError(response, 'Response returned an error'), undefined, upsertRecordsUrl);\n      throw err;\n    }\n  }\n}\nexports.UpsertRecordsCommand = UpsertRecordsCommand;\nfunction toNdJson(data) {\n  return data.map(record => JSON.stringify(record)).join('\\n');\n}","map":{"version":3,"mappings":";;;;;;AAMA;AACA;AACA;AAKA,MAAaA,oBAAoB;EAK/BC,YACEC,WAAqC,EACrCC,SAAiB,EACjBC,MAA6B;IAO/B,cAAS,GAAIC,OAAmC,IAAI;MAClD,KAAK,MAAMC,MAAM,IAAID,OAAO,EAAE;QAC5B,IAAI,CAACC,MAAM,CAACC,EAAE,IAAI,CAACD,MAAM,CAACE,GAAG,EAAE;UAC7B,MAAM,IAAIC,8BAAqB,CAC7B,yEAAyE,CAC1E;;;IAGP,CAAC;IAbC,IAAI,CAACP,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,MAAM,GAAGA,MAAM;EACtB;EAYA,MAAMM,GAAG,CACPL,OAAmC,EACnCM,UAAmB;IAEnB,MAAMC,KAAK,GAAG,oBAAQ,EAAC,IAAI,CAACR,MAAM,CAAC;IACnC,IAAI,CAACS,SAAS,CAACR,OAAO,CAAC;IAEvB,MAAMS,OAAO,GAAG,MAAM,IAAI,CAACZ,WAAW,CAACa,cAAc,EAAE;IACvD,MAAMC,gBAAgB,aAAMF,OAAO,iCAAuB,IAAI,CAACX,SAAS,YAAS;IAEjF,MAAMc,cAAc,GAAG;MACrB,SAAS,EAAE,IAAI,CAACb,MAAM,CAACc,MAAM;MAC7B,YAAY,EAAE,0BAAc,EAAC,IAAI,CAACd,MAAM,CAAC;MACzC,wBAAwB,EAAEe;KAC3B;IAED,MAAMC,YAAY,GAAG,IAAIC,4BAAoB,CAC3C,MACET,KAAK,CAACI,gBAAgB,EAAE;MACtBM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAEN,cAAc;MACvBO,IAAI,EAAEC,QAAQ,CAACpB,OAAO;KACvB,CAAC,EACJM,UAAU,CACX;IACD,MAAMe,QAAQ,GAAG,MAAMN,YAAY,CAACO,OAAO,EAAE;IAE7C,IAAID,QAAQ,CAACE,EAAE,EAAE;MACf;KACD,MAAM;MACL,MAAMC,GAAG,GAAG,MAAM,2BAAc,EAC9B,IAAIV,uBAAa,CAACO,QAAQ,EAAE,4BAA4B,CAAC,EACzDI,SAAS,EACTd,gBAAgB,CACjB;MACD,MAAMa,GAAG;;EAEb;;AA9DFE;AAiEA,SAASN,QAAQ,CAACO,IAA6B;EAC7C,OAAOA,IAAI,CAACC,GAAG,CAAE3B,MAAM,IAAK4B,IAAI,CAACC,SAAS,CAAC7B,MAAM,CAAC,CAAC,CAAC8B,IAAI,CAAC,IAAI,CAAC;AAChE","names":["UpsertRecordsCommand","constructor","apiProvider","namespace","config","records","record","id","_id","errors_1","run","maxRetries","fetch","validator","hostUrl","provideHostUrl","upsertRecordsUrl","requestHeaders","apiKey","db_data_1","retryWrapper","utils_1","method","headers","body","toNdJson","response","execute","ok","err","undefined","exports","data","map","JSON","stringify","join"],"sourceRoot":"","sources":["../../../src/data/vectors/upsertRecords.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}