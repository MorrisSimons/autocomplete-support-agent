{"ast":null,"code":"\"use strict\";\n\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nvar _taggedTemplateLiteral = require(\"/home/morrissimons/Desktop/lysa-support-agent/custom_text_input/component/frontend/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\nvar _objectSpread = require(\"/home/morrissimons/Desktop/lysa-support-agent/custom_text_input/component/frontend/node_modules/@babel/runtime/helpers/objectSpread2\");\nvar _templateObject, _templateObject2, _templateObject3;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChatCompletionRunner = exports.ChatCompletionStream = exports.ParsingToolFunction = exports.ChatCompletionStreamingRunner = exports.Completions = void 0;\nconst tslib_1 = require(\"../../../internal/tslib.js\");\nconst resource_1 = require(\"../../../core/resource.js\");\nconst MessagesAPI = tslib_1.__importStar(require(\"./messages.js\"));\nconst messages_1 = require(\"./messages.js\");\nconst pagination_1 = require(\"../../../core/pagination.js\");\nconst path_1 = require(\"../../../internal/utils/path.js\");\nconst ChatCompletionRunner_1 = require(\"../../../lib/ChatCompletionRunner.js\");\nconst ChatCompletionStreamingRunner_1 = require(\"../../../lib/ChatCompletionStreamingRunner.js\");\nconst ChatCompletionStream_1 = require(\"../../../lib/ChatCompletionStream.js\");\nconst parser_1 = require(\"../../../lib/parser.js\");\nclass Completions extends resource_1.APIResource {\n  constructor() {\n    super(...arguments);\n    this.messages = new MessagesAPI.Messages(this._client);\n  }\n  create(body, options) {\n    var _body$stream;\n    return this._client.post('/chat/completions', _objectSpread(_objectSpread({\n      body\n    }, options), {}, {\n      stream: (_body$stream = body.stream) !== null && _body$stream !== void 0 ? _body$stream : false\n    }));\n  }\n  /**\n   * Get a stored chat completion. Only Chat Completions that have been created with\n   * the `store` parameter set to `true` will be returned.\n   *\n   * @example\n   * ```ts\n   * const chatCompletion =\n   *   await client.chat.completions.retrieve('completion_id');\n   * ```\n   */\n  retrieve(completionID, options) {\n    return this._client.get((0, path_1.path)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"/chat/completions/\", \"\"])), completionID), options);\n  }\n  /**\n   * Modify a stored chat completion. Only Chat Completions that have been created\n   * with the `store` parameter set to `true` can be modified. Currently, the only\n   * supported modification is to update the `metadata` field.\n   *\n   * @example\n   * ```ts\n   * const chatCompletion = await client.chat.completions.update(\n   *   'completion_id',\n   *   { metadata: { foo: 'string' } },\n   * );\n   * ```\n   */\n  update(completionID, body, options) {\n    return this._client.post((0, path_1.path)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"/chat/completions/\", \"\"])), completionID), _objectSpread({\n      body\n    }, options));\n  }\n  /**\n   * List stored Chat Completions. Only Chat Completions that have been stored with\n   * the `store` parameter set to `true` will be returned.\n   *\n   * @example\n   * ```ts\n   * // Automatically fetches more pages as needed.\n   * for await (const chatCompletion of client.chat.completions.list()) {\n   *   // ...\n   * }\n   * ```\n   */\n  list() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let options = arguments.length > 1 ? arguments[1] : undefined;\n    return this._client.getAPIList('/chat/completions', pagination_1.CursorPage, _objectSpread({\n      query\n    }, options));\n  }\n  /**\n   * Delete a stored chat completion. Only Chat Completions that have been created\n   * with the `store` parameter set to `true` can be deleted.\n   *\n   * @example\n   * ```ts\n   * const chatCompletionDeleted =\n   *   await client.chat.completions.delete('completion_id');\n   * ```\n   */\n  delete(completionID, options) {\n    return this._client.delete((0, path_1.path)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"/chat/completions/\", \"\"])), completionID), options);\n  }\n  parse(body, options) {\n    (0, parser_1.validateInputTools)(body.tools);\n    return this._client.chat.completions.create(body, _objectSpread(_objectSpread({}, options), {}, {\n      headers: _objectSpread(_objectSpread({}, options === null || options === void 0 ? void 0 : options.headers), {}, {\n        'X-Stainless-Helper-Method': 'chat.completions.parse'\n      })\n    }))._thenUnwrap(completion => (0, parser_1.parseChatCompletion)(completion, body));\n  }\n  runTools(body, options) {\n    if (body.stream) {\n      return ChatCompletionStreamingRunner_1.ChatCompletionStreamingRunner.runTools(this._client, body, options);\n    }\n    return ChatCompletionRunner_1.ChatCompletionRunner.runTools(this._client, body, options);\n  }\n  /**\n   * Creates a chat completion stream\n   */\n  stream(body, options) {\n    return ChatCompletionStream_1.ChatCompletionStream.createChatCompletion(this._client, body, options);\n  }\n}\nexports.Completions = Completions;\nvar ChatCompletionStreamingRunner_2 = require(\"../../../lib/ChatCompletionStreamingRunner.js\");\nObject.defineProperty(exports, \"ChatCompletionStreamingRunner\", {\n  enumerable: true,\n  get: function () {\n    return ChatCompletionStreamingRunner_2.ChatCompletionStreamingRunner;\n  }\n});\nvar RunnableFunction_1 = require(\"../../../lib/RunnableFunction.js\");\nObject.defineProperty(exports, \"ParsingToolFunction\", {\n  enumerable: true,\n  get: function () {\n    return RunnableFunction_1.ParsingToolFunction;\n  }\n});\nvar ChatCompletionStream_2 = require(\"../../../lib/ChatCompletionStream.js\");\nObject.defineProperty(exports, \"ChatCompletionStream\", {\n  enumerable: true,\n  get: function () {\n    return ChatCompletionStream_2.ChatCompletionStream;\n  }\n});\nvar ChatCompletionRunner_2 = require(\"../../../lib/ChatCompletionRunner.js\");\nObject.defineProperty(exports, \"ChatCompletionRunner\", {\n  enumerable: true,\n  get: function () {\n    return ChatCompletionRunner_2.ChatCompletionRunner;\n  }\n});\nCompletions.Messages = messages_1.Messages;","map":{"version":3,"mappings":";;AAAA;AAAA;AAAA;AAAA;;;;;;AAEA;AAIA;AACA;AAEA;AAGA;AAEA;AACA;AAIA;AACA;AAEA,MAAaA,WAAY,SAAQC,sBAAW;EAA5CC;;IACE,aAAQ,GAAyB,IAAIC,WAAW,CAACC,QAAQ,CAAC,IAAI,CAACC,OAAO,CAAC;EAoLzE;EA5IEC,MAAM,CACJC,IAAgC,EAChCC,OAAwB;IAAA;IAExB,OAAO,IAAI,CAACH,OAAO,CAACI,IAAI,CAAC,mBAAmB;MAAIF;IAAI,GAAKC,OAAO;MAAEE,MAAM,kBAAEH,IAAI,CAACG,MAAM,uDAAI;IAAK,GAEnD;EAC7C;EAEA;;;;;;;;;;EAUAC,QAAQ,CAACC,YAAoB,EAAEJ,OAAwB;IACrD,OAAO,IAAI,CAACH,OAAO,CAACQ,GAAG,EAAC,cAAI,6FAAqBD,YAAY,GAAIJ,OAAO,CAAC;EAC3E;EAEA;;;;;;;;;;;;;EAaAM,MAAM,CACJF,YAAoB,EACpBL,IAAgC,EAChCC,OAAwB;IAExB,OAAO,IAAI,CAACH,OAAO,CAACI,IAAI,EAAC,cAAI,+FAAqBG,YAAY;MAAML;IAAI,GAAKC,OAAO,EAAG;EACzF;EAEA;;;;;;;;;;;;EAYAO,IAAI,GAEsB;IAAA,IADxBC,4EAAqD,EAAE;IAAA,IACvDR,OAAwB;IAExB,OAAO,IAAI,CAACH,OAAO,CAACY,UAAU,CAAC,mBAAmB,EAAEC,uBAA0B;MAAIF;IAAK,GAAKR,OAAO,EAAG;EACxG;EAEA;;;;;;;;;;EAUAW,MAAM,CAACP,YAAoB,EAAEJ,OAAwB;IACnD,OAAO,IAAI,CAACH,OAAO,CAACc,MAAM,EAAC,cAAI,+FAAqBP,YAAY,GAAIJ,OAAO,CAAC;EAC9E;EAEAY,KAAK,CACHb,IAAY,EACZC,OAAwB;IAExB,+BAAkB,EAACD,IAAI,CAACc,KAAK,CAAC;IAE9B,OAAO,IAAI,CAAChB,OAAO,CAACiB,IAAI,CAACC,WAAW,CACjCjB,MAAM,CAACC,IAAI,kCACPC,OAAO;MACVgB,OAAO,kCACFhB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEgB,OAAO;QACnB,2BAA2B,EAAE;MAAwB;IACtD,GACD,CACDC,WAAW,CAAEC,UAAU,IAAK,gCAAmB,EAACA,UAAU,EAAEnB,IAAI,CAAC,CAAC;EACvE;EAqBAoB,QAAQ,CAINpB,IAAY,EACZC,OAAuB;IAEvB,IAAID,IAAI,CAACG,MAAM,EAAE;MACf,OAAOkB,6DAA6B,CAACD,QAAQ,CAC3C,IAAI,CAACtB,OAAO,EACZE,IAAoD,EACpDC,OAAO,CACR;IACH;IAEA,OAAOqB,2CAAoB,CAACF,QAAQ,CAAC,IAAI,CAACtB,OAAO,EAAEE,IAA2C,EAAEC,OAAO,CAAC;EAC1G;EAEA;;;EAGAE,MAAM,CACJH,IAAY,EACZC,OAAwB;IAExB,OAAOsB,2CAAoB,CAACC,oBAAoB,CAAC,IAAI,CAAC1B,OAAO,EAAEE,IAAI,EAAEC,OAAO,CAAC;EAC/E;;AApLFwB;AA8MA;AAASC;EAAAC;EAAArB;IAAA,oEAA6B;EAAA;AAAA;AACtC;AAGEoB;EAAAC;EAAArB;IAAA,6CAAmB;EAAA;AAAA;AAIrB;AAASoB;EAAAC;EAAArB;IAAA,kDAAoB;EAAA;AAAA;AAC7B;AAASoB;EAAAC;EAAArB;IAAA,kDAAoB;EAAA;AAAA;AAsrD7Bb,WAAW,CAACI,QAAQ,GAAG+B,mBAAQ","names":["Completions","resource_1","constructor","MessagesAPI","Messages","_client","create","body","options","post","stream","retrieve","completionID","get","update","list","query","getAPIList","pagination_1","delete","parse","tools","chat","completions","headers","_thenUnwrap","completion","runTools","ChatCompletionStreamingRunner_1","ChatCompletionRunner_1","ChatCompletionStream_1","createChatCompletion","exports","Object","enumerable","messages_1"],"sourceRoot":"","sources":["../../../src/resources/chat/completions/completions.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}