{"ast":null,"code":"\"use strict\";\n\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nvar _objectSpread = require(\"/home/morrissimons/Desktop/lysa-support-agent/custom_text_input/component/frontend/node_modules/@babel/runtime/helpers/objectSpread2\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatRequestDetails = exports.parseLogLevel = void 0;\nexports.loggerFor = loggerFor;\nconst values_1 = require(\"./values.js\");\nconst levelNumbers = {\n  off: 0,\n  error: 200,\n  warn: 300,\n  info: 400,\n  debug: 500\n};\nconst parseLogLevel = (maybeLevel, sourceName, client) => {\n  if (!maybeLevel) {\n    return undefined;\n  }\n  if ((0, values_1.hasOwn)(levelNumbers, maybeLevel)) {\n    return maybeLevel;\n  }\n  loggerFor(client).warn(\"\".concat(sourceName, \" was set to \").concat(JSON.stringify(maybeLevel), \", expected one of \").concat(JSON.stringify(Object.keys(levelNumbers))));\n  return undefined;\n};\nexports.parseLogLevel = parseLogLevel;\nfunction noop() {}\nfunction makeLogFn(fnLevel, logger, logLevel) {\n  if (!logger || levelNumbers[fnLevel] > levelNumbers[logLevel]) {\n    return noop;\n  } else {\n    // Don't wrap logger functions, we want the stacktrace intact!\n    return logger[fnLevel].bind(logger);\n  }\n}\nconst noopLogger = {\n  error: noop,\n  warn: noop,\n  info: noop,\n  debug: noop\n};\nlet cachedLoggers = /* @__PURE__ */new WeakMap();\nfunction loggerFor(client) {\n  var _client$logLevel;\n  const logger = client.logger;\n  const logLevel = (_client$logLevel = client.logLevel) !== null && _client$logLevel !== void 0 ? _client$logLevel : 'off';\n  if (!logger) {\n    return noopLogger;\n  }\n  const cachedLogger = cachedLoggers.get(logger);\n  if (cachedLogger && cachedLogger[0] === logLevel) {\n    return cachedLogger[1];\n  }\n  const levelLogger = {\n    error: makeLogFn('error', logger, logLevel),\n    warn: makeLogFn('warn', logger, logLevel),\n    info: makeLogFn('info', logger, logLevel),\n    debug: makeLogFn('debug', logger, logLevel)\n  };\n  cachedLoggers.set(logger, [logLevel, levelLogger]);\n  return levelLogger;\n}\nconst formatRequestDetails = details => {\n  if (details.options) {\n    details.options = _objectSpread({}, details.options);\n    delete details.options['headers']; // redundant + leaks internals\n  }\n\n  if (details.headers) {\n    details.headers = Object.fromEntries((details.headers instanceof Headers ? [...details.headers] : Object.entries(details.headers)).map(_ref => {\n      let [name, value] = _ref;\n      return [name, name.toLowerCase() === 'authorization' || name.toLowerCase() === 'cookie' || name.toLowerCase() === 'set-cookie' ? '***' : value];\n    }));\n  }\n  if ('retryOfRequestLogID' in details) {\n    if (details.retryOfRequestLogID) {\n      details.retryOf = details.retryOfRequestLogID;\n    }\n    delete details.retryOfRequestLogID;\n  }\n  return details;\n};\nexports.formatRequestDetails = formatRequestDetails;","map":{"version":3,"mappings":"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","names":["exports","levelNumbers","off","error","warn","info","debug","parseLogLevel","maybeLevel","sourceName","client","undefined","loggerFor","JSON","stringify","Object","keys","noop","makeLogFn","fnLevel","logger","logLevel","bind","noopLogger","cachedLoggers","WeakMap","cachedLogger","get","levelLogger","set","formatRequestDetails","details","options","headers","fromEntries","Headers","entries","map","name","value","toLowerCase","retryOfRequestLogID","retryOf"],"sourceRoot":"","sources":["../../src/internal/utils/log.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}