{"ast":null,"code":"\"use strict\";\n\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nvar _objectWithoutProperties = require(\"/home/morrissimons/Desktop/lysa-support-agent/custom_text_input/component/frontend/node_modules/@babel/runtime/helpers/objectWithoutProperties\");\nvar _objectSpread = require(\"/home/morrissimons/Desktop/lysa-support-agent/custom_text_input/component/frontend/node_modules/@babel/runtime/helpers/objectSpread2\");\nvar _taggedTemplateLiteral = require(\"/home/morrissimons/Desktop/lysa-support-agent/custom_text_input/component/frontend/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\nconst _excluded = [\"vector_store_id\"];\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Files = void 0;\nconst resource_1 = require(\"../../core/resource.js\");\nconst pagination_1 = require(\"../../core/pagination.js\");\nconst headers_1 = require(\"../../internal/headers.js\");\nconst utils_1 = require(\"../../internal/utils.js\");\nconst path_1 = require(\"../../internal/utils/path.js\");\nclass Files extends resource_1.APIResource {\n  /**\n   * Create a vector store file by attaching a\n   * [File](https://platform.openai.com/docs/api-reference/files) to a\n   * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object).\n   */\n  create(vectorStoreID, body, options) {\n    return this._client.post((0, path_1.path)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"/vector_stores/\", \"/files\"])), vectorStoreID), _objectSpread(_objectSpread({\n      body\n    }, options), {}, {\n      headers: (0, headers_1.buildHeaders)([{\n        'OpenAI-Beta': 'assistants=v2'\n      }, options === null || options === void 0 ? void 0 : options.headers])\n    }));\n  }\n  /**\n   * Retrieves a vector store file.\n   */\n  retrieve(fileID, params, options) {\n    const {\n      vector_store_id\n    } = params;\n    return this._client.get((0, path_1.path)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"/vector_stores/\", \"/files/\", \"\"])), vector_store_id, fileID), _objectSpread(_objectSpread({}, options), {}, {\n      headers: (0, headers_1.buildHeaders)([{\n        'OpenAI-Beta': 'assistants=v2'\n      }, options === null || options === void 0 ? void 0 : options.headers])\n    }));\n  }\n  /**\n   * Update attributes on a vector store file.\n   */\n  update(fileID, params, options) {\n    const {\n        vector_store_id\n      } = params,\n      body = _objectWithoutProperties(params, _excluded);\n    return this._client.post((0, path_1.path)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"/vector_stores/\", \"/files/\", \"\"])), vector_store_id, fileID), _objectSpread(_objectSpread({\n      body\n    }, options), {}, {\n      headers: (0, headers_1.buildHeaders)([{\n        'OpenAI-Beta': 'assistants=v2'\n      }, options === null || options === void 0 ? void 0 : options.headers])\n    }));\n  }\n  /**\n   * Returns a list of vector store files.\n   */\n  list(vectorStoreID) {\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let options = arguments.length > 2 ? arguments[2] : undefined;\n    return this._client.getAPIList((0, path_1.path)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"/vector_stores/\", \"/files\"])), vectorStoreID), pagination_1.CursorPage, _objectSpread(_objectSpread({\n      query\n    }, options), {}, {\n      headers: (0, headers_1.buildHeaders)([{\n        'OpenAI-Beta': 'assistants=v2'\n      }, options === null || options === void 0 ? void 0 : options.headers])\n    }));\n  }\n  /**\n   * Delete a vector store file. This will remove the file from the vector store but\n   * the file itself will not be deleted. To delete the file, use the\n   * [delete file](https://platform.openai.com/docs/api-reference/files/delete)\n   * endpoint.\n   */\n  delete(fileID, params, options) {\n    const {\n      vector_store_id\n    } = params;\n    return this._client.delete((0, path_1.path)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"/vector_stores/\", \"/files/\", \"\"])), vector_store_id, fileID), _objectSpread(_objectSpread({}, options), {}, {\n      headers: (0, headers_1.buildHeaders)([{\n        'OpenAI-Beta': 'assistants=v2'\n      }, options === null || options === void 0 ? void 0 : options.headers])\n    }));\n  }\n  /**\n   * Attach a file to the given vector store and wait for it to be processed.\n   */\n  async createAndPoll(vectorStoreId, body, options) {\n    const file = await this.create(vectorStoreId, body, options);\n    return await this.poll(vectorStoreId, file.id, options);\n  }\n  /**\n   * Wait for the vector store file to finish processing.\n   *\n   * Note: this will return even if the file failed to process, you need to check\n   * file.last_error and file.status to handle these cases\n   */\n  async poll(vectorStoreID, fileID, options) {\n    var _options$pollInterval, _options$pollInterval2;\n    const headers = (0, headers_1.buildHeaders)([options === null || options === void 0 ? void 0 : options.headers, {\n      'X-Stainless-Poll-Helper': 'true',\n      'X-Stainless-Custom-Poll-Interval': (_options$pollInterval = options === null || options === void 0 ? void 0 : (_options$pollInterval2 = options.pollIntervalMs) === null || _options$pollInterval2 === void 0 ? void 0 : _options$pollInterval2.toString()) !== null && _options$pollInterval !== void 0 ? _options$pollInterval : undefined\n    }]);\n    while (true) {\n      const fileResponse = await this.retrieve(fileID, {\n        vector_store_id: vectorStoreID\n      }, _objectSpread(_objectSpread({}, options), {}, {\n        headers\n      })).withResponse();\n      const file = fileResponse.data;\n      switch (file.status) {\n        case 'in_progress':\n          let sleepInterval = 5000;\n          if (options === null || options === void 0 ? void 0 : options.pollIntervalMs) {\n            sleepInterval = options.pollIntervalMs;\n          } else {\n            const headerInterval = fileResponse.response.headers.get('openai-poll-after-ms');\n            if (headerInterval) {\n              const headerIntervalMs = parseInt(headerInterval);\n              if (!isNaN(headerIntervalMs)) {\n                sleepInterval = headerIntervalMs;\n              }\n            }\n          }\n          await (0, utils_1.sleep)(sleepInterval);\n          break;\n        case 'failed':\n        case 'completed':\n          return file;\n      }\n    }\n  }\n  /**\n   * Upload a file to the `files` API and then attach it to the given vector store.\n   *\n   * Note the file will be asynchronously processed (you can use the alternative\n   * polling helper method to wait for processing to complete).\n   */\n  async upload(vectorStoreId, file, options) {\n    const fileInfo = await this._client.files.create({\n      file: file,\n      purpose: 'assistants'\n    }, options);\n    return this.create(vectorStoreId, {\n      file_id: fileInfo.id\n    }, options);\n  }\n  /**\n   * Add a file to a vector store and poll until processing is complete.\n   */\n  async uploadAndPoll(vectorStoreId, file, options) {\n    const fileInfo = await this.upload(vectorStoreId, file, options);\n    return await this.poll(vectorStoreId, fileInfo.id, options);\n  }\n  /**\n   * Retrieve the parsed contents of a vector store file.\n   */\n  content(fileID, params, options) {\n    const {\n      vector_store_id\n    } = params;\n    return this._client.getAPIList((0, path_1.path)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([\"/vector_stores/\", \"/files/\", \"/content\"])), vector_store_id, fileID), pagination_1.Page, _objectSpread(_objectSpread({}, options), {}, {\n      headers: (0, headers_1.buildHeaders)([{\n        'OpenAI-Beta': 'assistants=v2'\n      }, options === null || options === void 0 ? void 0 : options.headers])\n    }));\n  }\n}\nexports.Files = Files;","map":{"version":3,"mappings":"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","names":["Files","resource_1","create","vectorStoreID","body","options","_client","post","headers","retrieve","fileID","params","vector_store_id","get","update","list","query","getAPIList","pagination_1","delete","createAndPoll","vectorStoreId","file","poll","id","pollIntervalMs","toString","undefined","fileResponse","withResponse","data","status","sleepInterval","headerInterval","response","headerIntervalMs","parseInt","isNaN","upload","fileInfo","files","purpose","file_id","uploadAndPoll","content","exports"],"sourceRoot":"","sources":["../../src/resources/vector-stores/files.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}