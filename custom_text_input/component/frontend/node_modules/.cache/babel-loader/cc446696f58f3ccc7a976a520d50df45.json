{"ast":null,"code":"\"use strict\";\n\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDefaultFetch = getDefaultFetch;\nexports.makeReadableStream = makeReadableStream;\nexports.ReadableStreamFrom = ReadableStreamFrom;\nexports.ReadableStreamToAsyncIterable = ReadableStreamToAsyncIterable;\nexports.CancelReadableStream = CancelReadableStream;\nfunction getDefaultFetch() {\n  if (typeof fetch !== 'undefined') {\n    return fetch;\n  }\n  throw new Error('`fetch` is not defined as a global; Either pass `fetch` to the client, `new OpenAI({ fetch })` or polyfill the global, `globalThis.fetch = fetch`');\n}\nfunction makeReadableStream() {\n  const ReadableStream = globalThis.ReadableStream;\n  if (typeof ReadableStream === 'undefined') {\n    // Note: All of the platforms / runtimes we officially support already define\n    // `ReadableStream` as a global, so this should only ever be hit on unsupported runtimes.\n    throw new Error('`ReadableStream` is not defined as a global; You will need to polyfill it, `globalThis.ReadableStream = ReadableStream`');\n  }\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return new ReadableStream(...args);\n}\nfunction ReadableStreamFrom(iterable) {\n  let iter = Symbol.asyncIterator in iterable ? iterable[Symbol.asyncIterator]() : iterable[Symbol.iterator]();\n  return makeReadableStream({\n    start() {},\n    async pull(controller) {\n      const {\n        done,\n        value\n      } = await iter.next();\n      if (done) {\n        controller.close();\n      } else {\n        controller.enqueue(value);\n      }\n    },\n    async cancel() {\n      var _iter$return;\n      await ((_iter$return = iter.return) === null || _iter$return === void 0 ? void 0 : _iter$return.call(iter));\n    }\n  });\n}\n/**\n * Most browsers don't yet have async iterable support for ReadableStream,\n * and Node has a very different way of reading bytes from its \"ReadableStream\".\n *\n * This polyfill was pulled from https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490\n */\nfunction ReadableStreamToAsyncIterable(stream) {\n  if (stream[Symbol.asyncIterator]) return stream;\n  const reader = stream.getReader();\n  return {\n    async next() {\n      try {\n        const result = await reader.read();\n        if (result === null || result === void 0 ? void 0 : result.done) reader.releaseLock(); // release lock when stream becomes closed\n        return result;\n      } catch (e) {\n        reader.releaseLock(); // release lock when stream becomes errored\n        throw e;\n      }\n    },\n    async return() {\n      const cancelPromise = reader.cancel();\n      reader.releaseLock();\n      await cancelPromise;\n      return {\n        done: true,\n        value: undefined\n      };\n    },\n    [Symbol.asyncIterator]() {\n      return this;\n    }\n  };\n}\n/**\n * Cancels a ReadableStream we don't need to consume.\n * See https://undici.nodejs.org/#/?id=garbage-collection\n */\nasync function CancelReadableStream(stream) {\n  if (stream === null || typeof stream !== 'object') return;\n  if (stream[Symbol.asyncIterator]) {\n    var _stream$Symbol$asyncI, _stream$Symbol$asyncI2;\n    await ((_stream$Symbol$asyncI = (_stream$Symbol$asyncI2 = stream[Symbol.asyncIterator]()).return) === null || _stream$Symbol$asyncI === void 0 ? void 0 : _stream$Symbol$asyncI.call(_stream$Symbol$asyncI2));\n    return;\n  }\n  const reader = stream.getReader();\n  const cancelPromise = reader.cancel();\n  reader.releaseLock();\n  await cancelPromise;\n}","map":{"version":3,"mappings":";;AAAA;;;;AAYAA;AAYAA;AAaAA;AA0BAA;AA+BAA;AAlFA,SAAgBC,eAAe;EAC7B,IAAI,OAAOC,KAAK,KAAK,WAAW,EAAE;IAChC,OAAOA,KAAY;EACrB;EAEA,MAAM,IAAIC,KAAK,CACb,mJAAmJ,CACpJ;AACH;AAIA,SAAgBC,kBAAkB,GAA4B;EAC5D,MAAMC,cAAc,GAAIC,UAAkB,CAACD,cAAc;EACzD,IAAI,OAAOA,cAAc,KAAK,WAAW,EAAE;IACzC;IACA;IACA,MAAM,IAAIF,KAAK,CACb,yHAAyH,CAC1H;EACH;EAAC,kCARmCI,IAAwB;IAAxBA,IAAwB;EAAA;EAU5D,OAAO,IAAIF,cAAc,CAAC,GAAGE,IAAI,CAAC;AACpC;AAEA,SAAgBC,kBAAkB,CAAIC,QAAwC;EAC5E,IAAIC,IAAI,GACNC,MAAM,CAACC,aAAa,IAAIH,QAAQ,GAAGA,QAAQ,CAACE,MAAM,CAACC,aAAa,CAAC,EAAE,GAAGH,QAAQ,CAACE,MAAM,CAACE,QAAQ,CAAC,EAAE;EAEnG,OAAOT,kBAAkB,CAAC;IACxBU,KAAK,IAAI,CAAC;IACV,MAAMC,IAAI,CAACC,UAAe;MACxB,MAAM;QAAEC,IAAI;QAAEC;MAAK,CAAE,GAAG,MAAMR,IAAI,CAACS,IAAI,EAAE;MACzC,IAAIF,IAAI,EAAE;QACRD,UAAU,CAACI,KAAK,EAAE;MACpB,CAAC,MAAM;QACLJ,UAAU,CAACK,OAAO,CAACH,KAAK,CAAC;MAC3B;IACF,CAAC;IACD,MAAMI,MAAM;MAAA;MACV,uBAAMZ,IAAI,CAACa,MAAM,iDAAX,sBAAI,CAAW;IACvB;GACD,CAAC;AACJ;AAEA;;;;;;AAMA,SAAgBC,6BAA6B,CAAIC,MAAW;EAC1D,IAAIA,MAAM,CAACd,MAAM,CAACC,aAAa,CAAC,EAAE,OAAOa,MAAM;EAE/C,MAAMC,MAAM,GAAGD,MAAM,CAACE,SAAS,EAAE;EACjC,OAAO;IACL,MAAMR,IAAI;MACR,IAAI;QACF,MAAMS,MAAM,GAAG,MAAMF,MAAM,CAACG,IAAI,EAAE;QAClC,IAAID,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEX,IAAI,EAAES,MAAM,CAACI,WAAW,EAAE,CAAC,CAAC;QACxC,OAAOF,MAAM;MACf,CAAC,CAAC,OAAOG,CAAC,EAAE;QACVL,MAAM,CAACI,WAAW,EAAE,CAAC,CAAC;QACtB,MAAMC,CAAC;MACT;IACF,CAAC;IACD,MAAMR,MAAM;MACV,MAAMS,aAAa,GAAGN,MAAM,CAACJ,MAAM,EAAE;MACrCI,MAAM,CAACI,WAAW,EAAE;MACpB,MAAME,aAAa;MACnB,OAAO;QAAEf,IAAI,EAAE,IAAI;QAAEC,KAAK,EAAEe;MAAS,CAAE;IACzC,CAAC;IACD,CAACtB,MAAM,CAACC,aAAa,IAAC;MACpB,OAAO,IAAI;IACb;GACD;AACH;AAEA;;;;AAIO,eAAesB,oBAAoB,CAACT,MAAW;EACpD,IAAIA,MAAM,KAAK,IAAI,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;EAEnD,IAAIA,MAAM,CAACd,MAAM,CAACC,aAAa,CAAC,EAAE;IAAA;IAChC,gCAAM,gCAAM,CAACD,MAAM,CAACC,aAAa,CAAC,EAAE,EAACW,MAAM,0DAArC,kDAAyC;IAC/C;EACF;EAEA,MAAMG,MAAM,GAAGD,MAAM,CAACE,SAAS,EAAE;EACjC,MAAMK,aAAa,GAAGN,MAAM,CAACJ,MAAM,EAAE;EACrCI,MAAM,CAACI,WAAW,EAAE;EACpB,MAAME,aAAa;AACrB","names":["exports","getDefaultFetch","fetch","Error","makeReadableStream","ReadableStream","globalThis","args","ReadableStreamFrom","iterable","iter","Symbol","asyncIterator","iterator","start","pull","controller","done","value","next","close","enqueue","cancel","return","ReadableStreamToAsyncIterable","stream","reader","getReader","result","read","releaseLock","e","cancelPromise","undefined","CancelReadableStream"],"sourceRoot":"","sources":["../src/internal/shims.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}