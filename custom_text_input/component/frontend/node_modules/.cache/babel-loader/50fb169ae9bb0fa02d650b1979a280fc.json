{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.handleApiError = void 0;\nconst utils_1 = require(\"./utils\");\nconst http_1 = require(\"./http\");\nconst request_1 = require(\"./request\");\n/** @internal */\nconst handleApiError = async (e, customMessage, url) => {\n  if (e instanceof Error && e.name === 'ResponseError') {\n    const responseError = e;\n    const rawMessage = await (0, utils_1.extractMessage)(responseError);\n    const statusCode = responseError.response.status;\n    const message = customMessage ? await customMessage(statusCode, rawMessage) : rawMessage;\n    return (0, http_1.mapHttpStatusError)({\n      status: responseError.response.status,\n      url: responseError.response.url || url,\n      message: message\n    });\n  } else if (e instanceof request_1.PineconeConnectionError) {\n    // If we've already wrapped this error, just return it\n    return e;\n  } else {\n    // There seem to be some situations where \"e instanceof Error\" is erroneously\n    // false (perhaps the custom errors emitted by cross-fetch do not extend Error?)\n    // but we can still cast it to an Error type because all we're going to do\n    // with it is store off a reference to whatever it is under the \"cause\"\n    const err = e;\n    return new request_1.PineconeConnectionError(err);\n  }\n};\nexports.handleApiError = handleApiError;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AACA;AAGA;AACO,MAAMA,cAAc,GAAG,OAC5BC,CAAU,EACVC,aAGoB,EACpBC,GAAY,KACM;EAClB,IAAIF,CAAC,YAAYG,KAAK,IAAIH,CAAC,CAACI,IAAI,KAAK,eAAe,EAAE;IACpD,MAAMC,aAAa,GAAGL,CAAkB;IACxC,MAAMM,UAAU,GAAG,MAAM,0BAAc,EAACD,aAAa,CAAC;IACtD,MAAME,UAAU,GAAGF,aAAa,CAACG,QAAQ,CAACC,MAAM;IAChD,MAAMC,OAAO,GAAGT,aAAa,GACzB,MAAMA,aAAa,CAACM,UAAU,EAAED,UAAU,CAAC,GAC3CA,UAAU;IAEd,OAAO,6BAAkB,EAAC;MACxBG,MAAM,EAAEJ,aAAa,CAACG,QAAQ,CAACC,MAAM;MACrCP,GAAG,EAAEG,aAAa,CAACG,QAAQ,CAACN,GAAG,IAAIA,GAAG;MACtCQ,OAAO,EAAEA;KACV,CAAC;GACH,MAAM,IAAIV,CAAC,YAAYW,iCAAuB,EAAE;IAC/C;IACA,OAAOX,CAAC;GACT,MAAM;IACL;IACA;IACA;IACA;IACA,MAAMY,GAAG,GAAGZ,CAAU;IACtB,OAAO,IAAIW,iCAAuB,CAACC,GAAG,CAAC;;AAE3C,CAAC;AAhCYC,sBAAc","names":["handleApiError","e","customMessage","url","Error","name","responseError","rawMessage","statusCode","response","status","message","request_1","err","exports"],"sourceRoot":"","sources":["../../src/errors/handling.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}