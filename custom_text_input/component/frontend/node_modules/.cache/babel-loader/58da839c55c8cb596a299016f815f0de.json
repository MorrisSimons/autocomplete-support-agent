{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"/home/morrissimons/Desktop/lysa-support-agent/custom_text_input/component/frontend/node_modules/@babel/runtime/helpers/objectWithoutProperties\");\nvar _objectSpread = require(\"/home/morrissimons/Desktop/lysa-support-agent/custom_text_input/component/frontend/node_modules/@babel/runtime/helpers/objectSpread2\");\nconst _excluded = [\"choices\"],\n  _excluded2 = [\"delta\", \"finish_reason\", \"index\", \"logprobs\"],\n  _excluded3 = [\"content\", \"refusal\"],\n  _excluded4 = [\"content\", \"refusal\", \"function_call\", \"role\", \"tool_calls\"],\n  _excluded5 = [\"index\", \"id\", \"type\", \"function\"],\n  _excluded6 = [\"id\", \"choices\", \"created\", \"model\", \"system_fingerprint\"],\n  _excluded7 = [\"message\", \"finish_reason\", \"index\", \"logprobs\"],\n  _excluded8 = [\"content\", \"function_call\", \"tool_calls\"],\n  _excluded9 = [\"function\", \"type\", \"id\"],\n  _excluded10 = [\"arguments\", \"name\"];\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function (s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function () { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function (value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function (value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\nvar _ChatCompletionStream_instances, _ChatCompletionStream_params, _ChatCompletionStream_choiceEventStates, _ChatCompletionStream_currentChatCompletionSnapshot, _ChatCompletionStream_beginRequest, _ChatCompletionStream_getChoiceEventState, _ChatCompletionStream_addChunk, _ChatCompletionStream_emitToolCallDoneEvent, _ChatCompletionStream_emitContentDoneEvents, _ChatCompletionStream_endRequest, _ChatCompletionStream_getAutoParseableResponseFormat, _ChatCompletionStream_accumulateChatCompletion;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChatCompletionStream = void 0;\nconst tslib_1 = require(\"../internal/tslib.js\");\nconst parser_1 = require(\"../_vendor/partial-json-parser/parser.js\");\nconst error_1 = require(\"../error.js\");\nconst parser_2 = require(\"../lib/parser.js\");\nconst streaming_1 = require(\"../streaming.js\");\nconst AbstractChatCompletionRunner_1 = require(\"./AbstractChatCompletionRunner.js\");\nclass ChatCompletionStream extends AbstractChatCompletionRunner_1.AbstractChatCompletionRunner {\n  constructor(params) {\n    super();\n    _ChatCompletionStream_instances.add(this);\n    _ChatCompletionStream_params.set(this, void 0);\n    _ChatCompletionStream_choiceEventStates.set(this, void 0);\n    _ChatCompletionStream_currentChatCompletionSnapshot.set(this, void 0);\n    tslib_1.__classPrivateFieldSet(this, _ChatCompletionStream_params, params, \"f\");\n    tslib_1.__classPrivateFieldSet(this, _ChatCompletionStream_choiceEventStates, [], \"f\");\n  }\n  get currentChatCompletionSnapshot() {\n    return tslib_1.__classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\n  }\n  /**\n   * Intended for use on the frontend, consuming a stream produced with\n   * `.toReadableStream()` on the backend.\n   *\n   * Note that messages sent to the model do not appear in `.on('message')`\n   * in this context.\n   */\n  static fromReadableStream(stream) {\n    const runner = new ChatCompletionStream(null);\n    runner._run(() => runner._fromReadableStream(stream));\n    return runner;\n  }\n  static createChatCompletion(client, params, options) {\n    const runner = new ChatCompletionStream(params);\n    runner._run(() => runner._runChatCompletion(client, _objectSpread(_objectSpread({}, params), {}, {\n      stream: true\n    }), _objectSpread(_objectSpread({}, options), {}, {\n      headers: _objectSpread(_objectSpread({}, options === null || options === void 0 ? void 0 : options.headers), {}, {\n        'X-Stainless-Helper-Method': 'stream'\n      })\n    })));\n    return runner;\n  }\n  async _createChatCompletion(client, params, options) {\n    var _stream$controller$si;\n    super._createChatCompletion;\n    const signal = options === null || options === void 0 ? void 0 : options.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    tslib_1.__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_beginRequest).call(this);\n    const stream = await client.chat.completions.create(_objectSpread(_objectSpread({}, params), {}, {\n      stream: true\n    }), _objectSpread(_objectSpread({}, options), {}, {\n      signal: this.controller.signal\n    }));\n    this._connected();\n    var _iteratorAbruptCompletion = false;\n    var _didIteratorError = false;\n    var _iteratorError;\n    try {\n      for (var _iterator = _asyncIterator(stream), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n        const chunk = _step.value;\n        tslib_1.__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_addChunk).call(this, chunk);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (_iteratorAbruptCompletion && _iterator.return != null) {\n          await _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n    if ((_stream$controller$si = stream.controller.signal) === null || _stream$controller$si === void 0 ? void 0 : _stream$controller$si.aborted) {\n      throw new error_1.APIUserAbortError();\n    }\n    return this._addChatCompletion(tslib_1.__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\n  }\n  async _fromReadableStream(readableStream, options) {\n    var _stream$controller$si2;\n    const signal = options === null || options === void 0 ? void 0 : options.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    tslib_1.__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_beginRequest).call(this);\n    this._connected();\n    const stream = streaming_1.Stream.fromReadableStream(readableStream, this.controller);\n    let chatId;\n    var _iteratorAbruptCompletion2 = false;\n    var _didIteratorError2 = false;\n    var _iteratorError2;\n    try {\n      for (var _iterator2 = _asyncIterator(stream), _step2; _iteratorAbruptCompletion2 = !(_step2 = await _iterator2.next()).done; _iteratorAbruptCompletion2 = false) {\n        const chunk = _step2.value;\n        if (chatId && chatId !== chunk.id) {\n          // A new request has been made.\n          this._addChatCompletion(tslib_1.__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\n        }\n        tslib_1.__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_addChunk).call(this, chunk);\n        chatId = chunk.id;\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (_iteratorAbruptCompletion2 && _iterator2.return != null) {\n          await _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n    if ((_stream$controller$si2 = stream.controller.signal) === null || _stream$controller$si2 === void 0 ? void 0 : _stream$controller$si2.aborted) {\n      throw new error_1.APIUserAbortError();\n    }\n    return this._addChatCompletion(tslib_1.__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\n  }\n  [(_ChatCompletionStream_params = new WeakMap(), _ChatCompletionStream_choiceEventStates = new WeakMap(), _ChatCompletionStream_currentChatCompletionSnapshot = new WeakMap(), _ChatCompletionStream_instances = new WeakSet(), _ChatCompletionStream_beginRequest = function _ChatCompletionStream_beginRequest() {\n    if (this.ended) return;\n    tslib_1.__classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, undefined, \"f\");\n  }, _ChatCompletionStream_getChoiceEventState = function _ChatCompletionStream_getChoiceEventState(choice) {\n    let state = tslib_1.__classPrivateFieldGet(this, _ChatCompletionStream_choiceEventStates, \"f\")[choice.index];\n    if (state) {\n      return state;\n    }\n    state = {\n      content_done: false,\n      refusal_done: false,\n      logprobs_content_done: false,\n      logprobs_refusal_done: false,\n      done_tool_calls: new Set(),\n      current_tool_call_index: null\n    };\n    tslib_1.__classPrivateFieldGet(this, _ChatCompletionStream_choiceEventStates, \"f\")[choice.index] = state;\n    return state;\n  }, _ChatCompletionStream_addChunk = function _ChatCompletionStream_addChunk(chunk) {\n    if (this.ended) return;\n    const completion = tslib_1.__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_accumulateChatCompletion).call(this, chunk);\n    this._emit('chunk', chunk, completion);\n    for (const choice of chunk.choices) {\n      var _choiceSnapshot$messa, _choiceSnapshot$messa2, _choiceSnapshot$messa3, _choiceSnapshot$messa4, _choice$logprobs, _choiceSnapshot$messa5, _choice$logprobs3, _choiceSnapshot$messa6;\n      const choiceSnapshot = completion.choices[choice.index];\n      if (choice.delta.content != null && ((_choiceSnapshot$messa = choiceSnapshot.message) === null || _choiceSnapshot$messa === void 0 ? void 0 : _choiceSnapshot$messa.role) === 'assistant' && ((_choiceSnapshot$messa2 = choiceSnapshot.message) === null || _choiceSnapshot$messa2 === void 0 ? void 0 : _choiceSnapshot$messa2.content)) {\n        this._emit('content', choice.delta.content, choiceSnapshot.message.content);\n        this._emit('content.delta', {\n          delta: choice.delta.content,\n          snapshot: choiceSnapshot.message.content,\n          parsed: choiceSnapshot.message.parsed\n        });\n      }\n      if (choice.delta.refusal != null && ((_choiceSnapshot$messa3 = choiceSnapshot.message) === null || _choiceSnapshot$messa3 === void 0 ? void 0 : _choiceSnapshot$messa3.role) === 'assistant' && ((_choiceSnapshot$messa4 = choiceSnapshot.message) === null || _choiceSnapshot$messa4 === void 0 ? void 0 : _choiceSnapshot$messa4.refusal)) {\n        this._emit('refusal.delta', {\n          delta: choice.delta.refusal,\n          snapshot: choiceSnapshot.message.refusal\n        });\n      }\n      if (((_choice$logprobs = choice.logprobs) === null || _choice$logprobs === void 0 ? void 0 : _choice$logprobs.content) != null && ((_choiceSnapshot$messa5 = choiceSnapshot.message) === null || _choiceSnapshot$messa5 === void 0 ? void 0 : _choiceSnapshot$messa5.role) === 'assistant') {\n        var _choice$logprobs2, _choiceSnapshot$logpr, _choiceSnapshot$logpr2;\n        this._emit('logprobs.content.delta', {\n          content: (_choice$logprobs2 = choice.logprobs) === null || _choice$logprobs2 === void 0 ? void 0 : _choice$logprobs2.content,\n          snapshot: (_choiceSnapshot$logpr = (_choiceSnapshot$logpr2 = choiceSnapshot.logprobs) === null || _choiceSnapshot$logpr2 === void 0 ? void 0 : _choiceSnapshot$logpr2.content) !== null && _choiceSnapshot$logpr !== void 0 ? _choiceSnapshot$logpr : []\n        });\n      }\n      if (((_choice$logprobs3 = choice.logprobs) === null || _choice$logprobs3 === void 0 ? void 0 : _choice$logprobs3.refusal) != null && ((_choiceSnapshot$messa6 = choiceSnapshot.message) === null || _choiceSnapshot$messa6 === void 0 ? void 0 : _choiceSnapshot$messa6.role) === 'assistant') {\n        var _choice$logprobs4, _choiceSnapshot$logpr3, _choiceSnapshot$logpr4;\n        this._emit('logprobs.refusal.delta', {\n          refusal: (_choice$logprobs4 = choice.logprobs) === null || _choice$logprobs4 === void 0 ? void 0 : _choice$logprobs4.refusal,\n          snapshot: (_choiceSnapshot$logpr3 = (_choiceSnapshot$logpr4 = choiceSnapshot.logprobs) === null || _choiceSnapshot$logpr4 === void 0 ? void 0 : _choiceSnapshot$logpr4.refusal) !== null && _choiceSnapshot$logpr3 !== void 0 ? _choiceSnapshot$logpr3 : []\n        });\n      }\n      const state = tslib_1.__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getChoiceEventState).call(this, choiceSnapshot);\n      if (choiceSnapshot.finish_reason) {\n        tslib_1.__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_emitContentDoneEvents).call(this, choiceSnapshot);\n        if (state.current_tool_call_index != null) {\n          tslib_1.__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_emitToolCallDoneEvent).call(this, choiceSnapshot, state.current_tool_call_index);\n        }\n      }\n      for (const toolCall of (_choice$delta$tool_ca = choice.delta.tool_calls) !== null && _choice$delta$tool_ca !== void 0 ? _choice$delta$tool_ca : []) {\n        var _choice$delta$tool_ca;\n        if (state.current_tool_call_index !== toolCall.index) {\n          tslib_1.__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_emitContentDoneEvents).call(this, choiceSnapshot);\n          // new tool call started, the previous one is done\n          if (state.current_tool_call_index != null) {\n            tslib_1.__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_emitToolCallDoneEvent).call(this, choiceSnapshot, state.current_tool_call_index);\n          }\n        }\n        state.current_tool_call_index = toolCall.index;\n      }\n      for (const toolCallDelta of (_choice$delta$tool_ca2 = choice.delta.tool_calls) !== null && _choice$delta$tool_ca2 !== void 0 ? _choice$delta$tool_ca2 : []) {\n        var _choice$delta$tool_ca2, _choiceSnapshot$messa7;\n        const toolCallSnapshot = (_choiceSnapshot$messa7 = choiceSnapshot.message.tool_calls) === null || _choiceSnapshot$messa7 === void 0 ? void 0 : _choiceSnapshot$messa7[toolCallDelta.index];\n        if (!(toolCallSnapshot === null || toolCallSnapshot === void 0 ? void 0 : toolCallSnapshot.type)) {\n          continue;\n        }\n        if ((toolCallSnapshot === null || toolCallSnapshot === void 0 ? void 0 : toolCallSnapshot.type) === 'function') {\n          var _toolCallSnapshot$fun, _toolCallDelta$functi, _toolCallDelta$functi2;\n          this._emit('tool_calls.function.arguments.delta', {\n            name: (_toolCallSnapshot$fun = toolCallSnapshot.function) === null || _toolCallSnapshot$fun === void 0 ? void 0 : _toolCallSnapshot$fun.name,\n            index: toolCallDelta.index,\n            arguments: toolCallSnapshot.function.arguments,\n            parsed_arguments: toolCallSnapshot.function.parsed_arguments,\n            arguments_delta: (_toolCallDelta$functi = (_toolCallDelta$functi2 = toolCallDelta.function) === null || _toolCallDelta$functi2 === void 0 ? void 0 : _toolCallDelta$functi2.arguments) !== null && _toolCallDelta$functi !== void 0 ? _toolCallDelta$functi : ''\n          });\n        } else {\n          assertNever(toolCallSnapshot === null || toolCallSnapshot === void 0 ? void 0 : toolCallSnapshot.type);\n        }\n      }\n    }\n  }, _ChatCompletionStream_emitToolCallDoneEvent = function _ChatCompletionStream_emitToolCallDoneEvent(choiceSnapshot, toolCallIndex) {\n    var _choiceSnapshot$messa8;\n    const state = tslib_1.__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getChoiceEventState).call(this, choiceSnapshot);\n    if (state.done_tool_calls.has(toolCallIndex)) {\n      // we've already fired the done event\n      return;\n    }\n    const toolCallSnapshot = (_choiceSnapshot$messa8 = choiceSnapshot.message.tool_calls) === null || _choiceSnapshot$messa8 === void 0 ? void 0 : _choiceSnapshot$messa8[toolCallIndex];\n    if (!toolCallSnapshot) {\n      throw new Error('no tool call snapshot');\n    }\n    if (!toolCallSnapshot.type) {\n      throw new Error('tool call snapshot missing `type`');\n    }\n    if (toolCallSnapshot.type === 'function') {\n      var _tslib_1$__classPriva, _tslib_1$__classPriva2;\n      const inputTool = (_tslib_1$__classPriva = tslib_1.__classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\")) === null || _tslib_1$__classPriva === void 0 ? void 0 : (_tslib_1$__classPriva2 = _tslib_1$__classPriva.tools) === null || _tslib_1$__classPriva2 === void 0 ? void 0 : _tslib_1$__classPriva2.find(tool => (0, parser_2.isChatCompletionFunctionTool)(tool) && tool.function.name === toolCallSnapshot.function.name); // TS doesn't narrow based on isChatCompletionTool\n      this._emit('tool_calls.function.arguments.done', {\n        name: toolCallSnapshot.function.name,\n        index: toolCallIndex,\n        arguments: toolCallSnapshot.function.arguments,\n        parsed_arguments: (0, parser_2.isAutoParsableTool)(inputTool) ? inputTool.$parseRaw(toolCallSnapshot.function.arguments) : (inputTool === null || inputTool === void 0 ? void 0 : inputTool.function.strict) ? JSON.parse(toolCallSnapshot.function.arguments) : null\n      });\n    } else {\n      assertNever(toolCallSnapshot.type);\n    }\n  }, _ChatCompletionStream_emitContentDoneEvents = function _ChatCompletionStream_emitContentDoneEvents(choiceSnapshot) {\n    var _choiceSnapshot$logpr5, _choiceSnapshot$logpr6;\n    const state = tslib_1.__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getChoiceEventState).call(this, choiceSnapshot);\n    if (choiceSnapshot.message.content && !state.content_done) {\n      state.content_done = true;\n      const responseFormat = tslib_1.__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getAutoParseableResponseFormat).call(this);\n      this._emit('content.done', {\n        content: choiceSnapshot.message.content,\n        parsed: responseFormat ? responseFormat.$parseRaw(choiceSnapshot.message.content) : null\n      });\n    }\n    if (choiceSnapshot.message.refusal && !state.refusal_done) {\n      state.refusal_done = true;\n      this._emit('refusal.done', {\n        refusal: choiceSnapshot.message.refusal\n      });\n    }\n    if (((_choiceSnapshot$logpr5 = choiceSnapshot.logprobs) === null || _choiceSnapshot$logpr5 === void 0 ? void 0 : _choiceSnapshot$logpr5.content) && !state.logprobs_content_done) {\n      state.logprobs_content_done = true;\n      this._emit('logprobs.content.done', {\n        content: choiceSnapshot.logprobs.content\n      });\n    }\n    if (((_choiceSnapshot$logpr6 = choiceSnapshot.logprobs) === null || _choiceSnapshot$logpr6 === void 0 ? void 0 : _choiceSnapshot$logpr6.refusal) && !state.logprobs_refusal_done) {\n      state.logprobs_refusal_done = true;\n      this._emit('logprobs.refusal.done', {\n        refusal: choiceSnapshot.logprobs.refusal\n      });\n    }\n  }, _ChatCompletionStream_endRequest = function _ChatCompletionStream_endRequest() {\n    if (this.ended) {\n      throw new error_1.OpenAIError(\"stream has ended, this shouldn't happen\");\n    }\n    const snapshot = tslib_1.__classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\n    if (!snapshot) {\n      throw new error_1.OpenAIError(\"request ended without sending any chunks\");\n    }\n    tslib_1.__classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, undefined, \"f\");\n    tslib_1.__classPrivateFieldSet(this, _ChatCompletionStream_choiceEventStates, [], \"f\");\n    return finalizeChatCompletion(snapshot, tslib_1.__classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\"));\n  }, _ChatCompletionStream_getAutoParseableResponseFormat = function _ChatCompletionStream_getAutoParseableResponseFormat() {\n    var _tslib_1$__classPriva3;\n    const responseFormat = (_tslib_1$__classPriva3 = tslib_1.__classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\")) === null || _tslib_1$__classPriva3 === void 0 ? void 0 : _tslib_1$__classPriva3.response_format;\n    if ((0, parser_2.isAutoParsableResponseFormat)(responseFormat)) {\n      return responseFormat;\n    }\n    return null;\n  }, _ChatCompletionStream_accumulateChatCompletion = function _ChatCompletionStream_accumulateChatCompletion(chunk) {\n    var _a, _b, _c, _d;\n    let snapshot = tslib_1.__classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\n    const {\n        choices\n      } = chunk,\n      rest = _objectWithoutProperties(chunk, _excluded);\n    if (!snapshot) {\n      snapshot = tslib_1.__classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, _objectSpread(_objectSpread({}, rest), {}, {\n        choices: []\n      }), \"f\");\n    } else {\n      Object.assign(snapshot, rest);\n    }\n    for (const _ref of chunk.choices) {\n      const {\n          delta,\n          finish_reason,\n          index,\n          logprobs = null\n        } = _ref,\n        other = _objectWithoutProperties(_ref, _excluded2);\n      let choice = snapshot.choices[index];\n      if (!choice) {\n        choice = snapshot.choices[index] = _objectSpread({\n          finish_reason,\n          index,\n          message: {},\n          logprobs\n        }, other);\n      }\n      if (logprobs) {\n        if (!choice.logprobs) {\n          choice.logprobs = Object.assign({}, logprobs);\n        } else {\n          const {\n              content,\n              refusal\n            } = logprobs,\n            rest = _objectWithoutProperties(logprobs, _excluded3);\n          assertIsEmpty(rest);\n          Object.assign(choice.logprobs, rest);\n          if (content) {\n            var _a$content;\n            (_a$content = (_a = choice.logprobs).content) !== null && _a$content !== void 0 ? _a$content : _a.content = [];\n            choice.logprobs.content.push(...content);\n          }\n          if (refusal) {\n            var _b$refusal;\n            (_b$refusal = (_b = choice.logprobs).refusal) !== null && _b$refusal !== void 0 ? _b$refusal : _b.refusal = [];\n            choice.logprobs.refusal.push(...refusal);\n          }\n        }\n      }\n      if (finish_reason) {\n        choice.finish_reason = finish_reason;\n        if (tslib_1.__classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\") && (0, parser_2.hasAutoParseableInput)(tslib_1.__classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\"))) {\n          if (finish_reason === 'length') {\n            throw new error_1.LengthFinishReasonError();\n          }\n          if (finish_reason === 'content_filter') {\n            throw new error_1.ContentFilterFinishReasonError();\n          }\n        }\n      }\n      Object.assign(choice, other);\n      if (!delta) continue; // Shouldn't happen; just in case.\n      const {\n          content,\n          refusal,\n          function_call,\n          role,\n          tool_calls\n        } = delta,\n        rest = _objectWithoutProperties(delta, _excluded4);\n      assertIsEmpty(rest);\n      Object.assign(choice.message, rest);\n      if (refusal) {\n        choice.message.refusal = (choice.message.refusal || '') + refusal;\n      }\n      if (role) choice.message.role = role;\n      if (function_call) {\n        if (!choice.message.function_call) {\n          choice.message.function_call = function_call;\n        } else {\n          if (function_call.name) choice.message.function_call.name = function_call.name;\n          if (function_call.arguments) {\n            var _c$arguments;\n            (_c$arguments = (_c = choice.message.function_call).arguments) !== null && _c$arguments !== void 0 ? _c$arguments : _c.arguments = '';\n            choice.message.function_call.arguments += function_call.arguments;\n          }\n        }\n      }\n      if (content) {\n        choice.message.content = (choice.message.content || '') + content;\n        if (!choice.message.refusal && tslib_1.__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getAutoParseableResponseFormat).call(this)) {\n          choice.message.parsed = (0, parser_1.partialParse)(choice.message.content);\n        }\n      }\n      if (tool_calls) {\n        if (!choice.message.tool_calls) choice.message.tool_calls = [];\n        for (const _ref2 of tool_calls) {\n          var _d$index, _tool_call$function, _fn$name;\n          const {\n              index,\n              id,\n              type,\n              function: fn\n            } = _ref2,\n            rest = _objectWithoutProperties(_ref2, _excluded5);\n          const tool_call = (_d$index = (_d = choice.message.tool_calls)[index]) !== null && _d$index !== void 0 ? _d$index : _d[index] = {};\n          Object.assign(tool_call, rest);\n          if (id) tool_call.id = id;\n          if (type) tool_call.type = type;\n          if (fn) (_tool_call$function = tool_call.function) !== null && _tool_call$function !== void 0 ? _tool_call$function : tool_call.function = {\n            name: (_fn$name = fn.name) !== null && _fn$name !== void 0 ? _fn$name : '',\n            arguments: ''\n          };\n          if (fn === null || fn === void 0 ? void 0 : fn.name) tool_call.function.name = fn.name;\n          if (fn === null || fn === void 0 ? void 0 : fn.arguments) {\n            tool_call.function.arguments += fn.arguments;\n            if ((0, parser_2.shouldParseToolCall)(tslib_1.__classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\"), tool_call)) {\n              tool_call.function.parsed_arguments = (0, parser_1.partialParse)(tool_call.function.arguments);\n            }\n          }\n        }\n      }\n    }\n    return snapshot;\n  }, Symbol.asyncIterator)]() {\n    const pushQueue = [];\n    const readQueue = [];\n    let done = false;\n    this.on('chunk', chunk => {\n      const reader = readQueue.shift();\n      if (reader) {\n        reader.resolve(chunk);\n      } else {\n        pushQueue.push(chunk);\n      }\n    });\n    this.on('end', () => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.resolve(undefined);\n      }\n      readQueue.length = 0;\n    });\n    this.on('abort', err => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.reject(err);\n      }\n      readQueue.length = 0;\n    });\n    this.on('error', err => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.reject(err);\n      }\n      readQueue.length = 0;\n    });\n    return {\n      next: async () => {\n        if (!pushQueue.length) {\n          if (done) {\n            return {\n              value: undefined,\n              done: true\n            };\n          }\n          return new Promise((resolve, reject) => readQueue.push({\n            resolve,\n            reject\n          })).then(chunk => chunk ? {\n            value: chunk,\n            done: false\n          } : {\n            value: undefined,\n            done: true\n          });\n        }\n        const chunk = pushQueue.shift();\n        return {\n          value: chunk,\n          done: false\n        };\n      },\n      return: async () => {\n        this.abort();\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n    };\n  }\n  toReadableStream() {\n    const stream = new streaming_1.Stream(this[Symbol.asyncIterator].bind(this), this.controller);\n    return stream.toReadableStream();\n  }\n}\nexports.ChatCompletionStream = ChatCompletionStream;\nfunction finalizeChatCompletion(snapshot, params) {\n  const {\n      id,\n      choices,\n      created,\n      model,\n      system_fingerprint\n    } = snapshot,\n    rest = _objectWithoutProperties(snapshot, _excluded6);\n  const completion = _objectSpread(_objectSpread({}, rest), {}, {\n    id,\n    choices: choices.map(_ref3 => {\n      var _message$refusal3;\n      let {\n          message,\n          finish_reason,\n          index,\n          logprobs\n        } = _ref3,\n        choiceRest = _objectWithoutProperties(_ref3, _excluded7);\n      if (!finish_reason) {\n        throw new error_1.OpenAIError(\"missing finish_reason for choice \".concat(index));\n      }\n      const {\n          content = null,\n          function_call,\n          tool_calls\n        } = message,\n        messageRest = _objectWithoutProperties(message, _excluded8);\n      const role = message.role; // this is what we expect; in theory it could be different which would make our types a slight lie but would be fine.\n      if (!role) {\n        throw new error_1.OpenAIError(\"missing role for choice \".concat(index));\n      }\n      if (function_call) {\n        var _message$refusal;\n        const {\n          arguments: args,\n          name\n        } = function_call;\n        if (args == null) {\n          throw new error_1.OpenAIError(\"missing function_call.arguments for choice \".concat(index));\n        }\n        if (!name) {\n          throw new error_1.OpenAIError(\"missing function_call.name for choice \".concat(index));\n        }\n        return _objectSpread(_objectSpread({}, choiceRest), {}, {\n          message: {\n            content,\n            function_call: {\n              arguments: args,\n              name\n            },\n            role,\n            refusal: (_message$refusal = message.refusal) !== null && _message$refusal !== void 0 ? _message$refusal : null\n          },\n          finish_reason,\n          index,\n          logprobs\n        });\n      }\n      if (tool_calls) {\n        var _message$refusal2;\n        return _objectSpread(_objectSpread({}, choiceRest), {}, {\n          index,\n          finish_reason,\n          logprobs,\n          message: _objectSpread(_objectSpread({}, messageRest), {}, {\n            role,\n            content,\n            refusal: (_message$refusal2 = message.refusal) !== null && _message$refusal2 !== void 0 ? _message$refusal2 : null,\n            tool_calls: tool_calls.map((tool_call, i) => {\n              const {\n                  function: fn,\n                  type,\n                  id\n                } = tool_call,\n                toolRest = _objectWithoutProperties(tool_call, _excluded9);\n              const _ref4 = fn || {},\n                {\n                  arguments: args,\n                  name\n                } = _ref4,\n                fnRest = _objectWithoutProperties(_ref4, _excluded10);\n              if (id == null) {\n                throw new error_1.OpenAIError(\"missing choices[\".concat(index, \"].tool_calls[\").concat(i, \"].id\\n\").concat(str(snapshot)));\n              }\n              if (type == null) {\n                throw new error_1.OpenAIError(\"missing choices[\".concat(index, \"].tool_calls[\").concat(i, \"].type\\n\").concat(str(snapshot)));\n              }\n              if (name == null) {\n                throw new error_1.OpenAIError(\"missing choices[\".concat(index, \"].tool_calls[\").concat(i, \"].function.name\\n\").concat(str(snapshot)));\n              }\n              if (args == null) {\n                throw new error_1.OpenAIError(\"missing choices[\".concat(index, \"].tool_calls[\").concat(i, \"].function.arguments\\n\").concat(str(snapshot)));\n              }\n              return _objectSpread(_objectSpread({}, toolRest), {}, {\n                id,\n                type,\n                function: _objectSpread(_objectSpread({}, fnRest), {}, {\n                  name,\n                  arguments: args\n                })\n              });\n            })\n          })\n        });\n      }\n      return _objectSpread(_objectSpread({}, choiceRest), {}, {\n        message: _objectSpread(_objectSpread({}, messageRest), {}, {\n          content,\n          role,\n          refusal: (_message$refusal3 = message.refusal) !== null && _message$refusal3 !== void 0 ? _message$refusal3 : null\n        }),\n        finish_reason,\n        index,\n        logprobs\n      });\n    }),\n    created,\n    model,\n    object: 'chat.completion'\n  }, system_fingerprint ? {\n    system_fingerprint\n  } : {});\n  return (0, parser_2.maybeParseChatCompletion)(completion, params);\n}\nfunction str(x) {\n  return JSON.stringify(x);\n}\n/**\n * Ensures the given argument is an empty object, useful for\n * asserting that all known properties on an object have been\n * destructured.\n */\nfunction assertIsEmpty(obj) {\n  return;\n}\nfunction assertNever(_x) {}","map":{"version":3,"mappings":"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","names":["ChatCompletionStream","AbstractChatCompletionRunner_1","constructor","params","_ChatCompletionStream_params","_ChatCompletionStream_choiceEventStates","_ChatCompletionStream_currentChatCompletionSnapshot","tslib_1","currentChatCompletionSnapshot","fromReadableStream","stream","runner","_run","_fromReadableStream","createChatCompletion","client","options","_runChatCompletion","headers","_createChatCompletion","signal","aborted","controller","abort","addEventListener","chat","completions","create","_connected","chunk","error_1","_addChatCompletion","readableStream","streaming_1","chatId","id","ended","undefined","choice","state","index","content_done","refusal_done","logprobs_content_done","logprobs_refusal_done","done_tool_calls","Set","current_tool_call_index","completion","_emit","choices","choiceSnapshot","delta","content","message","role","snapshot","parsed","refusal","logprobs","finish_reason","toolCall","tool_calls","toolCallDelta","toolCallSnapshot","type","name","function","arguments","parsed_arguments","arguments_delta","assertNever","toolCallIndex","has","Error","inputTool","tools","find","tool","$parseRaw","strict","JSON","parse","responseFormat","finalizeChatCompletion","response_format","rest","Object","assign","other","assertIsEmpty","push","function_call","fn","tool_call","Symbol","asyncIterator","pushQueue","readQueue","done","on","reader","shift","resolve","length","err","reject","next","value","Promise","then","return","toReadableStream","bind","exports","created","model","system_fingerprint","map","choiceRest","messageRest","args","i","toolRest","fnRest","str","object","x","stringify","obj","_x"],"sourceRoot":"","sources":["../src/lib/ChatCompletionStream.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}