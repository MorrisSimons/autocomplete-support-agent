{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rerank = void 0;\nconst errors_1 = require(\"../errors\");\nconst rerank = infApi => {\n  return async function (model, query, documents) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    if (documents.length == 0) {\n      throw new errors_1.PineconeArgumentError('You must pass at least one document to rerank');\n    }\n    if (query.length == 0) {\n      throw new errors_1.PineconeArgumentError('You must pass a query to rerank');\n    }\n    if (model.length == 0) {\n      throw new errors_1.PineconeArgumentError('You must pass the name of a supported reranking model in order to rerank' + ' documents. See https://docs.pinecone.io/models for supported models.');\n    }\n    const {\n      topN = documents.length,\n      returnDocuments = true,\n      parameters = {}\n    } = options;\n    let {\n      rankFields = ['text']\n    } = options;\n    // Validate and standardize documents to ensure they are in object format\n    const newDocuments = documents.map(doc => typeof doc === 'string' ? {\n      text: doc\n    } : doc);\n    if (!options.rankFields) {\n      if (!newDocuments.every(doc => typeof doc === 'object' && doc.text)) {\n        throw new errors_1.PineconeArgumentError('Documents must be a list of strings or objects containing the \"text\" field');\n      }\n    }\n    if (options.rankFields) {\n      rankFields = options.rankFields;\n    }\n    const req = {\n      rerankRequest: {\n        model: model,\n        query: query,\n        documents: newDocuments,\n        topN: topN,\n        returnDocuments: returnDocuments,\n        rankFields: rankFields,\n        parameters: parameters\n      }\n    };\n    return await infApi.rerank(req);\n  };\n};\nexports.rerank = rerank;","map":{"version":3,"mappings":";;;;;;AAIA;AAkBO,MAAMA,MAAM,GAAIC,MAAoB,IAAI;EAC7C,OAAO,gBACLC,KAAa,EACbC,KAAa,EACbC,SAAoD,EAE3B;IAAA,IADzBC,8EAAyB,EAAE;IAE3B,IAAID,SAAS,CAACE,MAAM,IAAI,CAAC,EAAE;MACzB,MAAM,IAAIC,8BAAqB,CAC7B,+CAA+C,CAChD;;IAEH,IAAIJ,KAAK,CAACG,MAAM,IAAI,CAAC,EAAE;MACrB,MAAM,IAAIC,8BAAqB,CAAC,iCAAiC,CAAC;;IAEpE,IAAIL,KAAK,CAACI,MAAM,IAAI,CAAC,EAAE;MACrB,MAAM,IAAIC,8BAAqB,CAC7B,0EAA0E,GACxE,uEAAuE,CAC1E;;IAGH,MAAM;MACJC,IAAI,GAAGJ,SAAS,CAACE,MAAM;MACvBG,eAAe,GAAG,IAAI;MACtBC,UAAU,GAAG;IAAE,CAChB,GAAGL,OAAO;IAEX,IAAI;MAAEM,UAAU,GAAG,CAAC,MAAM;IAAC,CAAE,GAAGN,OAAO;IAEvC;IACA,MAAMO,YAAY,GAAGR,SAAS,CAACS,GAAG,CAAEC,GAAG,IACrC,OAAOA,GAAG,KAAK,QAAQ,GAAG;MAAEC,IAAI,EAAED;IAAG,CAAE,GAAGA,GAAG,CAC9C;IAED,IAAI,CAACT,OAAO,CAACM,UAAU,EAAE;MACvB,IAAI,CAACC,YAAY,CAACI,KAAK,CAAEF,GAAG,IAAK,OAAOA,GAAG,KAAK,QAAQ,IAAIA,GAAG,CAACC,IAAI,CAAC,EAAE;QACrE,MAAM,IAAIR,8BAAqB,CAC7B,4EAA4E,CAC7E;;;IAIL,IAAIF,OAAO,CAACM,UAAU,EAAE;MACtBA,UAAU,GAAGN,OAAO,CAACM,UAAU;;IAGjC,MAAMM,GAAG,GAAG;MACVC,aAAa,EAAE;QACbhB,KAAK,EAAEA,KAAK;QACZC,KAAK,EAAEA,KAAK;QACZC,SAAS,EAAEQ,YAAY;QACvBJ,IAAI,EAAEA,IAAI;QACVC,eAAe,EAAEA,eAAe;QAChCE,UAAU,EAAEA,UAAU;QACtBD,UAAU,EAAEA;;KAEf;IAED,OAAO,MAAMT,MAAM,CAACD,MAAM,CAACiB,GAAG,CAAC;EACjC,CAAC;AACH,CAAC;AA7DYE,cAAM","names":["rerank","infApi","model","query","documents","options","length","errors_1","topN","returnDocuments","parameters","rankFields","newDocuments","map","doc","text","every","req","rerankRequest","exports"],"sourceRoot":"","sources":["../../src/inference/rerank.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}