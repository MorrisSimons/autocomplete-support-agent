{"ast":null,"code":"\"use strict\";\n\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nvar _APIPromise_client;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.APIPromise = void 0;\nconst tslib_1 = require(\"../internal/tslib.js\");\nconst parse_1 = require(\"../internal/parse.js\");\n/**\n * A subclass of `Promise` providing additional helper methods\n * for interacting with the SDK.\n */\nclass APIPromise extends Promise {\n  constructor(client, responsePromise) {\n    let parseResponse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : parse_1.defaultParseResponse;\n    super(resolve => {\n      // this is maybe a bit weird but this has to be a no-op to not implicitly\n      // parse the response body; instead .then, .catch, .finally are overridden\n      // to parse the response\n      resolve(null);\n    });\n    this.responsePromise = responsePromise;\n    this.parseResponse = parseResponse;\n    _APIPromise_client.set(this, void 0);\n    tslib_1.__classPrivateFieldSet(this, _APIPromise_client, client, \"f\");\n  }\n  _thenUnwrap(transform) {\n    return new APIPromise(tslib_1.__classPrivateFieldGet(this, _APIPromise_client, \"f\"), this.responsePromise, async (client, props) => (0, parse_1.addRequestID)(transform(await this.parseResponse(client, props), props), props.response));\n  }\n  /**\n   * Gets the raw `Response` instance instead of parsing the response\n   * data.\n   *\n   * If you want to parse the response body but still get the `Response`\n   * instance, you can use {@link withResponse()}.\n   *\n   * ðŸ‘‹ Getting the wrong TypeScript type for `Response`?\n   * Try setting `\"moduleResolution\": \"NodeNext\"` or add `\"lib\": [\"DOM\"]`\n   * to your `tsconfig.json`.\n   */\n  asResponse() {\n    return this.responsePromise.then(p => p.response);\n  }\n  /**\n   * Gets the parsed response data, the raw `Response` instance and the ID of the request,\n   * returned via the X-Request-ID header which is useful for debugging requests and reporting\n   * issues to OpenAI.\n   *\n   * If you just want to get the raw `Response` instance without parsing it,\n   * you can use {@link asResponse()}.\n   *\n   * ðŸ‘‹ Getting the wrong TypeScript type for `Response`?\n   * Try setting `\"moduleResolution\": \"NodeNext\"` or add `\"lib\": [\"DOM\"]`\n   * to your `tsconfig.json`.\n   */\n  async withResponse() {\n    const [data, response] = await Promise.all([this.parse(), this.asResponse()]);\n    return {\n      data,\n      response,\n      request_id: response.headers.get('x-request-id')\n    };\n  }\n  parse() {\n    if (!this.parsedPromise) {\n      this.parsedPromise = this.responsePromise.then(data => this.parseResponse(tslib_1.__classPrivateFieldGet(this, _APIPromise_client, \"f\"), data));\n    }\n    return this.parsedPromise;\n  }\n  then(onfulfilled, onrejected) {\n    return this.parse().then(onfulfilled, onrejected);\n  }\n  catch(onrejected) {\n    return this.parse().catch(onrejected);\n  }\n  finally(onfinally) {\n    return this.parse().finally(onfinally);\n  }\n}\nexports.APIPromise = APIPromise;\n_APIPromise_client = new WeakMap();","map":{"version":3,"mappings":";;AAAA;;;;;;;AAKA;AAOA;;;;AAIA,MAAaA,UAAc,SAAQC,OAAyB;EAI1DC,YACEC,MAAc,EACNC,eAA0C,EAIU;IAAA,IAHpDC,oFAGgCC,4BAAoB;IAE5D,KAAK,CAAEC,OAAO,IAAI;MAChB;MACA;MACA;MACAA,OAAO,CAAC,IAAW,CAAC;IACtB,CAAC,CAAC;IAXM,oBAAe,GAAfH,eAAe;IACf,kBAAa,GAAbC,aAAa;IALvBG;IAgBEC,mCAAI,sBAAWN,MAAM;EACvB;EAEAO,WAAW,CAAIC,SAAkD;IAC/D,OAAO,IAAIX,UAAU,CAACS,mCAAI,0BAAQ,EAAE,IAAI,CAACL,eAAe,EAAE,OAAOD,MAAM,EAAES,KAAK,KAC5E,wBAAY,EAACD,SAAS,CAAC,MAAM,IAAI,CAACN,aAAa,CAACF,MAAM,EAAES,KAAK,CAAC,EAAEA,KAAK,CAAC,EAAEA,KAAK,CAACC,QAAQ,CAAC,CACxF;EACH;EAEA;;;;;;;;;;;EAWAC,UAAU;IACR,OAAO,IAAI,CAACV,eAAe,CAACW,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACH,QAAQ,CAAC;EACrD;EAEA;;;;;;;;;;;;EAYA,MAAMI,YAAY;IAChB,MAAM,CAACC,IAAI,EAAEL,QAAQ,CAAC,GAAG,MAAMZ,OAAO,CAACkB,GAAG,CAAC,CAAC,IAAI,CAACC,KAAK,EAAE,EAAE,IAAI,CAACN,UAAU,EAAE,CAAC,CAAC;IAC7E,OAAO;MAAEI,IAAI;MAAEL,QAAQ;MAAEQ,UAAU,EAAER,QAAQ,CAACS,OAAO,CAACC,GAAG,CAAC,cAAc;IAAC,CAAE;EAC7E;EAEQH,KAAK;IACX,IAAI,CAAC,IAAI,CAACI,aAAa,EAAE;MACvB,IAAI,CAACA,aAAa,GAAG,IAAI,CAACpB,eAAe,CAACW,IAAI,CAAEG,IAAI,IAClD,IAAI,CAACb,aAAa,CAACI,mCAAI,0BAAQ,EAAES,IAAI,CAAC,CACH;IACvC;IACA,OAAO,IAAI,CAACM,aAAa;EAC3B;EAEST,IAAI,CACXU,WAAgG,EAChGC,UAAmF;IAEnF,OAAO,IAAI,CAACN,KAAK,EAAE,CAACL,IAAI,CAACU,WAAW,EAAEC,UAAU,CAAC;EACnD;EAESC,KAAK,CACZD,UAAiF;IAEjF,OAAO,IAAI,CAACN,KAAK,EAAE,CAACO,KAAK,CAACD,UAAU,CAAC;EACvC;EAESE,OAAO,CAACC,SAA2C;IAC1D,OAAO,IAAI,CAACT,KAAK,EAAE,CAACQ,OAAO,CAACC,SAAS,CAAC;EACxC;;AAnFFC","names":["APIPromise","Promise","constructor","client","responsePromise","parseResponse","parse_1","resolve","_APIPromise_client","tslib_1","_thenUnwrap","transform","props","response","asResponse","then","p","withResponse","data","all","parse","request_id","headers","get","parsedPromise","onfulfilled","onrejected","catch","finally","onfinally","exports"],"sourceRoot":"","sources":["../src/core/api-promise.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}