{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.chatStream = void 0;\nconst assistant_data_1 = require(\"../../pinecone-generated-ts-fetch/assistant_data\");\nconst utils_1 = require(\"../../utils\");\nconst errors_1 = require(\"../../errors\");\nconst node_stream_1 = require(\"node:stream\");\nconst chat_1 = require(\"./chat\");\nconst chatStream = (assistantName, apiProvider, config) => {\n  return async options => {\n    var _options$contextOptio, _options$contextOptio2;\n    const fetch = (0, utils_1.getFetch)(config);\n    (0, chat_1.validateChatOptions)(options);\n    const hostUrl = await apiProvider.provideHostUrl();\n    const chatUrl = \"\".concat(hostUrl, \"/chat/\").concat(assistantName);\n    const requestHeaders = {\n      'Api-Key': config.apiKey,\n      'User-Agent': (0, utils_1.buildUserAgent)(config),\n      'X-Pinecone-Api-Version': assistant_data_1.X_PINECONE_API_VERSION\n    };\n    // format context options\n    let contextOptions = undefined;\n    if (((_options$contextOptio = options.contextOptions) === null || _options$contextOptio === void 0 ? void 0 : _options$contextOptio.topK) || ((_options$contextOptio2 = options.contextOptions) === null || _options$contextOptio2 === void 0 ? void 0 : _options$contextOptio2.snippetSize)) {\n      var _options$contextOptio3, _options$contextOptio4;\n      contextOptions = {\n        top_k: ((_options$contextOptio3 = options.contextOptions) === null || _options$contextOptio3 === void 0 ? void 0 : _options$contextOptio3.topK) || options.topK,\n        snippet_size: (_options$contextOptio4 = options.contextOptions) === null || _options$contextOptio4 === void 0 ? void 0 : _options$contextOptio4.snippetSize\n      };\n    } else if (options.topK) {\n      contextOptions = {\n        top_k: options.topK\n      };\n    }\n    // we call the API directly via fetch, so we need to snake_case the keys (normally generated code handles this)\n    const response = await fetch(chatUrl, {\n      method: 'POST',\n      headers: requestHeaders,\n      body: JSON.stringify({\n        messages: (0, chat_1.messagesValidation)(options),\n        stream: true,\n        model: (0, chat_1.modelValidation)(options),\n        filter: options.filter,\n        json_response: options.jsonResponse,\n        include_highlights: options.includeHighlights,\n        context_options: contextOptions\n      })\n    });\n    if (response.ok && response.body) {\n      const nodeReadable = node_stream_1.Readable.fromWeb(response.body);\n      return new utils_1.ChatStream(nodeReadable);\n    } else {\n      const err = await (0, errors_1.handleApiError)(new assistant_data_1.ResponseError(response, 'Response returned an error'), undefined, chatUrl);\n      throw err;\n    }\n  };\n};\nexports.chatStream = chatStream;","map":{"version":3,"mappings":";;;;;;AAAA;AAKA;AAGA;AAEA;AACA;AAMO,MAAMA,UAAU,GAAG,CACxBC,aAAqB,EACrBC,WAAuC,EACvCC,MAA6B,KAC3B;EACF,OAAO,MACLC,OAAoB,IACyB;IAAA;IAC7C,MAAMC,KAAK,GAAG,oBAAQ,EAACF,MAAM,CAAC;IAC9B,8BAAmB,EAACC,OAAO,CAAC;IAE5B,MAAME,OAAO,GAAG,MAAMJ,WAAW,CAACK,cAAc,EAAE;IAClD,MAAMC,OAAO,aAAMF,OAAO,mBAASL,aAAa,CAAE;IAElD,MAAMQ,cAAc,GAAG;MACrB,SAAS,EAAEN,MAAM,CAACO,MAAM;MACxB,YAAY,EAAE,0BAAc,EAACP,MAAM,CAAC;MACpC,wBAAwB,EAAEQ;KAC3B;IAED;IACA,IAAIC,cAAc,GAAkBC,SAAS;IAC7C,IAAI,iCAAO,CAACD,cAAc,0DAAtB,sBAAwBE,IAAI,gCAAIV,OAAO,CAACQ,cAAc,2DAAtB,uBAAwBG,WAAW,GAAE;MAAA;MACvEH,cAAc,GAAG;QACfI,KAAK,EAAE,kCAAO,CAACJ,cAAc,2DAAtB,uBAAwBE,IAAI,KAAIV,OAAO,CAACU,IAAI;QACnDG,YAAY,4BAAEb,OAAO,CAACQ,cAAc,2DAAtB,uBAAwBG;OACvC;KACF,MAAM,IAAIX,OAAO,CAACU,IAAI,EAAE;MACvBF,cAAc,GAAG;QACfI,KAAK,EAAEZ,OAAO,CAACU;OAChB;;IAGH;IACA,MAAMI,QAAQ,GAAG,MAAMb,KAAK,CAACG,OAAO,EAAE;MACpCW,MAAM,EAAE,MAAM;MACdC,OAAO,EAAEX,cAAc;MACvBY,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,QAAQ,EAAE,6BAAkB,EAACpB,OAAO,CAAC;QACrCqB,MAAM,EAAE,IAAI;QACZC,KAAK,EAAE,0BAAe,EAACtB,OAAO,CAAC;QAC/BuB,MAAM,EAAEvB,OAAO,CAACuB,MAAM;QACtBC,aAAa,EAAExB,OAAO,CAACyB,YAAY;QACnCC,kBAAkB,EAAE1B,OAAO,CAAC2B,iBAAiB;QAC7CC,eAAe,EAAEpB;OAClB;KACF,CAAC;IAEF,IAAIM,QAAQ,CAACe,EAAE,IAAIf,QAAQ,CAACG,IAAI,EAAE;MAChC,MAAMa,YAAY,GAAGC,sBAAQ,CAACC,OAAO,CAAClB,QAAQ,CAACG,IAAsB,CAAC;MACtE,OAAO,IAAIgB,kBAAU,CAAuBH,YAAY,CAAC;KAC1D,MAAM;MACL,MAAMI,GAAG,GAAG,MAAM,2BAAc,EAC9B,IAAI3B,8BAAa,CAACO,QAAQ,EAAE,4BAA4B,CAAC,EACzDL,SAAS,EACTL,OAAO,CACR;MACD,MAAM8B,GAAG;;EAEb,CAAC;AACH,CAAC;AA5DYC,kBAAU","names":["chatStream","assistantName","apiProvider","config","options","fetch","hostUrl","provideHostUrl","chatUrl","requestHeaders","apiKey","assistant_data_1","contextOptions","undefined","topK","snippetSize","top_k","snippet_size","response","method","headers","body","JSON","stringify","messages","stream","model","filter","json_response","jsonResponse","include_highlights","includeHighlights","context_options","ok","nodeReadable","node_stream_1","fromWeb","utils_1","err","exports"],"sourceRoot":"","sources":["../../../src/assistant/data/chatStream.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}