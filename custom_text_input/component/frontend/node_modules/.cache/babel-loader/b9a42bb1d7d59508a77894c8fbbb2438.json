{"ast":null,"code":"\"use strict\";\n\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultParseResponse = defaultParseResponse;\nexports.addRequestID = addRequestID;\nconst streaming_1 = require(\"../core/streaming.js\");\nconst log_1 = require(\"./utils/log.js\");\nasync function defaultParseResponse(client, props) {\n  const {\n    response,\n    requestLogID,\n    retryOfRequestLogID,\n    startTime\n  } = props;\n  const body = await (async () => {\n    var _contentType$split$;\n    if (props.options.stream) {\n      (0, log_1.loggerFor)(client).debug('response', response.status, response.url, response.headers, response.body);\n      // Note: there is an invariant here that isn't represented in the type system\n      // that if you set `stream: true` the response type must also be `Stream<T>`\n      if (props.options.__streamClass) {\n        return props.options.__streamClass.fromSSEResponse(response, props.controller, client);\n      }\n      return streaming_1.Stream.fromSSEResponse(response, props.controller, client);\n    }\n    // fetch refuses to read the body when the status code is 204.\n    if (response.status === 204) {\n      return null;\n    }\n    if (props.options.__binaryResponse) {\n      return response;\n    }\n    const contentType = response.headers.get('content-type');\n    const mediaType = contentType === null || contentType === void 0 ? void 0 : (_contentType$split$ = contentType.split(';')[0]) === null || _contentType$split$ === void 0 ? void 0 : _contentType$split$.trim();\n    const isJSON = (mediaType === null || mediaType === void 0 ? void 0 : mediaType.includes('application/json')) || (mediaType === null || mediaType === void 0 ? void 0 : mediaType.endsWith('+json'));\n    if (isJSON) {\n      const json = await response.json();\n      return addRequestID(json, response);\n    }\n    const text = await response.text();\n    return text;\n  })();\n  (0, log_1.loggerFor)(client).debug(\"[\".concat(requestLogID, \"] response parsed\"), (0, log_1.formatRequestDetails)({\n    retryOfRequestLogID,\n    url: response.url,\n    status: response.status,\n    body,\n    durationMs: Date.now() - startTime\n  }));\n  return body;\n}\nfunction addRequestID(value, response) {\n  if (!value || typeof value !== 'object' || Array.isArray(value)) {\n    return value;\n  }\n  return Object.defineProperty(value, '_request_id', {\n    value: response.headers.get('x-request-id'),\n    enumerable: false\n  });\n}","map":{"version":3,"mappings":";;AAAA;;;;AAiBAA;AAyDAA;AAvEA;AAEA;AAYO,eAAeC,oBAAoB,CACxCC,MAAc,EACdC,KAAuB;EAEvB,MAAM;IAAEC,QAAQ;IAAEC,YAAY;IAAEC,mBAAmB;IAAEC;EAAS,CAAE,GAAGJ,KAAK;EACxE,MAAMK,IAAI,GAAG,MAAM,CAAC,YAAW;IAAA;IAC7B,IAAIL,KAAK,CAACM,OAAO,CAACC,MAAM,EAAE;MACxB,mBAAS,EAACR,MAAM,CAAC,CAACS,KAAK,CAAC,UAAU,EAAEP,QAAQ,CAACQ,MAAM,EAAER,QAAQ,CAACS,GAAG,EAAET,QAAQ,CAACU,OAAO,EAAEV,QAAQ,CAACI,IAAI,CAAC;MAEnG;MACA;MAEA,IAAIL,KAAK,CAACM,OAAO,CAACM,aAAa,EAAE;QAC/B,OAAOZ,KAAK,CAACM,OAAO,CAACM,aAAa,CAACC,eAAe,CAACZ,QAAQ,EAAED,KAAK,CAACc,UAAU,EAAEf,MAAM,CAAQ;MAC/F;MAEA,OAAOgB,kBAAM,CAACF,eAAe,CAACZ,QAAQ,EAAED,KAAK,CAACc,UAAU,EAAEf,MAAM,CAAQ;IAC1E;IAEA;IACA,IAAIE,QAAQ,CAACQ,MAAM,KAAK,GAAG,EAAE;MAC3B,OAAO,IAAS;IAClB;IAEA,IAAIT,KAAK,CAACM,OAAO,CAACU,gBAAgB,EAAE;MAClC,OAAOf,QAAwB;IACjC;IAEA,MAAMgB,WAAW,GAAGhB,QAAQ,CAACU,OAAO,CAACO,GAAG,CAAC,cAAc,CAAC;IACxD,MAAMC,SAAS,GAAGF,WAAW,aAAXA,WAAW,8CAAXA,WAAW,CAAEG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,wDAA1B,oBAA4BC,IAAI,EAAE;IACpD,MAAMC,MAAM,GAAG,UAAS,aAATH,SAAS,uBAATA,SAAS,CAAEI,QAAQ,CAAC,kBAAkB,CAAC,MAAIJ,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEK,QAAQ,CAAC,OAAO,CAAC;IACtF,IAAIF,MAAM,EAAE;MACV,MAAMG,IAAI,GAAG,MAAMxB,QAAQ,CAACwB,IAAI,EAAE;MAClC,OAAOC,YAAY,CAACD,IAAS,EAAExB,QAAQ,CAAC;IAC1C;IAEA,MAAM0B,IAAI,GAAG,MAAM1B,QAAQ,CAAC0B,IAAI,EAAE;IAClC,OAAOA,IAAoB;EAC7B,CAAC,GAAG;EACJ,mBAAS,EAAC5B,MAAM,CAAC,CAACS,KAAK,YACjBN,YAAY,wBAChB,8BAAoB,EAAC;IACnBC,mBAAmB;IACnBO,GAAG,EAAET,QAAQ,CAACS,GAAG;IACjBD,MAAM,EAAER,QAAQ,CAACQ,MAAM;IACvBJ,IAAI;IACJuB,UAAU,EAAEC,IAAI,CAACC,GAAG,EAAE,GAAG1B;GAC1B,CAAC,CACH;EACD,OAAOC,IAAI;AACb;AAOA,SAAgBqB,YAAY,CAAIK,KAAQ,EAAE9B,QAAkB;EAC1D,IAAI,CAAC8B,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;IAC/D,OAAOA,KAAyB;EAClC;EAEA,OAAOG,MAAM,CAACC,cAAc,CAACJ,KAAK,EAAE,aAAa,EAAE;IACjDA,KAAK,EAAE9B,QAAQ,CAACU,OAAO,CAACO,GAAG,CAAC,cAAc,CAAC;IAC3CkB,UAAU,EAAE;GACb,CAAqB;AACxB","names":["exports","defaultParseResponse","client","props","response","requestLogID","retryOfRequestLogID","startTime","body","options","stream","debug","status","url","headers","__streamClass","fromSSEResponse","controller","streaming_1","__binaryResponse","contentType","get","mediaType","split","trim","isJSON","includes","endsWith","json","addRequestID","text","durationMs","Date","now","value","Array","isArray","Object","defineProperty","enumerable"],"sourceRoot":"","sources":["../src/internal/parse.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}