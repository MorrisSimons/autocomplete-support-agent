{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/home/morrissimons/Desktop/lysa-support-agent/custom_text_input/component/frontend/node_modules/@babel/runtime/helpers/objectSpread2\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.QueryCommand = void 0;\nconst errors_1 = require(\"../../errors\");\nconst validateObjectProperties_1 = require(\"../../utils/validateObjectProperties\");\nconst QueryOptionsProperties = ['id', 'vector', 'sparseVector', 'includeValues', 'includeMetadata', 'filter', 'topK'];\nclass QueryCommand {\n  constructor(apiProvider, namespace) {\n    this.validator = options => {\n      if (options) {\n        (0, validateObjectProperties_1.ValidateObjectProperties)(options, QueryOptionsProperties);\n      }\n      if (!options) {\n        throw new errors_1.PineconeArgumentError('You must enter a query configuration object to query the index.');\n      }\n      if (options && !options.topK) {\n        throw new errors_1.PineconeArgumentError('You must enter an integer for the `topK` search results to be returned.');\n      }\n      if (options && options.topK && options.topK < 1) {\n        throw new errors_1.PineconeArgumentError('`topK` property must be greater than 0.');\n      }\n      if (options && options.filter) {\n        const keys = Object.keys(options.filter);\n        if (keys.length === 0) {\n          throw new errors_1.PineconeArgumentError('You must enter a `filter` object with at least one key-value pair.');\n        }\n      }\n      if ('id' in options) {\n        if (!options.id) {\n          throw new errors_1.PineconeArgumentError('You must enter non-empty string for `id` to query by record ID.');\n        }\n      }\n      if ('vector' in options) {\n        if (options.vector.length === 0) {\n          throw new errors_1.PineconeArgumentError('You must enter an array of `RecordValues` in order to query by vector values.');\n        }\n      }\n      if ('sparseVector' in options) {\n        var _options$sparseVector, _options$sparseVector2;\n        if (((_options$sparseVector = options.sparseVector) === null || _options$sparseVector === void 0 ? void 0 : _options$sparseVector.indices.length) === 0 || ((_options$sparseVector2 = options.sparseVector) === null || _options$sparseVector2 === void 0 ? void 0 : _options$sparseVector2.values.length) === 0) {\n          throw new errors_1.PineconeArgumentError('You must enter a `RecordSparseValues` object with `indices` and `values` properties in order to query by' + ' sparse vector values.');\n        }\n      }\n    };\n    this.apiProvider = apiProvider;\n    this.namespace = namespace;\n  }\n  async run(query) {\n    this.validator(query);\n    const api = await this.apiProvider.provide();\n    const results = await api.queryVectors({\n      queryRequest: _objectSpread(_objectSpread({}, query), {}, {\n        namespace: this.namespace\n      })\n    });\n    const matches = results.matches ? results.matches : [];\n    return _objectSpread({\n      matches: matches,\n      namespace: this.namespace\n    }, results.usage && {\n      usage: results.usage\n    });\n  }\n}\nexports.QueryCommand = QueryCommand;","map":{"version":3,"mappings":";;;;;;;AAGA;AACA;AAsEA,MAAMA,sBAAsB,GAAuB,CACjD,IAAI,EACJ,QAAQ,EACR,cAAc,EACd,eAAe,EACf,iBAAiB,EACjB,QAAQ,EACR,MAAM,CACP;AAiCD,MAAaC,YAAY;EAIvBC,YAAYC,WAAW,EAAEC,SAAS;IAKlC,cAAS,GAAIC,OAAqB,IAAI;MACpC,IAAIA,OAAO,EAAE;QACX,uDAAwB,EAACA,OAAO,EAAEL,sBAAsB,CAAC;;MAE3D,IAAI,CAACK,OAAO,EAAE;QACZ,MAAM,IAAIC,8BAAqB,CAC7B,iEAAiE,CAClE;;MAEH,IAAID,OAAO,IAAI,CAACA,OAAO,CAACE,IAAI,EAAE;QAC5B,MAAM,IAAID,8BAAqB,CAC7B,yEAAyE,CAC1E;;MAEH,IAAID,OAAO,IAAIA,OAAO,CAACE,IAAI,IAAIF,OAAO,CAACE,IAAI,GAAG,CAAC,EAAE;QAC/C,MAAM,IAAID,8BAAqB,CAC7B,yCAAyC,CAC1C;;MAEH,IAAID,OAAO,IAAIA,OAAO,CAACG,MAAM,EAAE;QAC7B,MAAMC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACJ,OAAO,CAACG,MAAM,CAAC;QACxC,IAAIC,IAAI,CAACE,MAAM,KAAK,CAAC,EAAE;UACrB,MAAM,IAAIL,8BAAqB,CAC7B,oEAAoE,CACrE;;;MAGL,IAAI,IAAI,IAAID,OAAO,EAAE;QACnB,IAAI,CAACA,OAAO,CAACO,EAAE,EAAE;UACf,MAAM,IAAIN,8BAAqB,CAC7B,iEAAiE,CAClE;;;MAGL,IAAI,QAAQ,IAAID,OAAO,EAAE;QACvB,IAAIA,OAAO,CAACQ,MAAM,CAACF,MAAM,KAAK,CAAC,EAAE;UAC/B,MAAM,IAAIL,8BAAqB,CAC7B,+EAA+E,CAChF;;;MAGL,IAAI,cAAc,IAAID,OAAO,EAAE;QAAA;QAC7B,IACE,iCAAO,CAACS,YAAY,0DAApB,sBAAsBC,OAAO,CAACJ,MAAM,MAAK,CAAC,IAC1C,kCAAO,CAACG,YAAY,2DAApB,uBAAsBE,MAAM,CAACL,MAAM,MAAK,CAAC,EACzC;UACA,MAAM,IAAIL,8BAAqB,CAC7B,0GAA0G,GACxG,wBAAwB,CAC3B;;;IAGP,CAAC;IAxDC,IAAI,CAACH,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,SAAS,GAAGA,SAAS;EAC5B;EAwDA,MAAMa,GAAG,CAACC,KAAmB;IAC3B,IAAI,CAACC,SAAS,CAACD,KAAK,CAAC;IACrB,MAAME,GAAG,GAAG,MAAM,IAAI,CAACjB,WAAW,CAACkB,OAAO,EAAE;IAC5C,MAAMC,OAAO,GAAG,MAAMF,GAAG,CAACG,YAAY,CAAC;MACrCC,YAAY,kCAAON,KAAK;QAAEd,SAAS,EAAE,IAAI,CAACA;MAAS;KACpD,CAAC;IACF,MAAMqB,OAAO,GAAGH,OAAO,CAACG,OAAO,GAAGH,OAAO,CAACG,OAAO,GAAG,EAAE;IAEtD;MACEA,OAAO,EAAEA,OAAyC;MAClDrB,SAAS,EAAE,IAAI,CAACA;IAAS,GACrBkB,OAAO,CAACI,KAAK,IAAI;MAAEA,KAAK,EAAEJ,OAAO,CAACI;IAAK,CAAE;EAEjD;;AA5EFC","names":["QueryOptionsProperties","QueryCommand","constructor","apiProvider","namespace","options","errors_1","topK","filter","keys","Object","length","id","vector","sparseVector","indices","values","run","query","validator","api","provide","results","queryVectors","queryRequest","matches","usage","exports"],"sourceRoot":"","sources":["../../../src/data/vectors/query.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}