{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.middleware = void 0;\nconst db_control_1 = require(\"../pinecone-generated-ts-fetch/db_control\");\nconst errors_1 = require(\"../errors\");\nconst debugMiddleware = [];\nconst chalk = (str, color) => {\n  const colors = {\n    blue: '\\x1b[34m',\n    red: '\\x1b[31m',\n    green: '\\x1b[32m',\n    yellow: '\\x1b[33m'\n  };\n  return colors[color] + str + '\\x1b[39m';\n};\n/**\n * Enable the `PINECONE_DEBUG` environment variable to print the request and\n * response bodies for each request.\n *\n * Api-Key headers will be redacted.\n */\nif (typeof process !== 'undefined' && process && process.env && process.env.PINECONE_DEBUG) {\n  const debugLogMiddleware = {\n    pre: async context => {\n      console.debug(chalk(\">>> Request: \".concat(context.init.method, \" \").concat(context.url), 'blue'));\n      const headers = JSON.parse(JSON.stringify(context.init.headers));\n      headers['Api-Key'] = '***REDACTED***';\n      console.debug(chalk(\">>> Headers: \".concat(JSON.stringify(headers)), 'blue'));\n      if (context.init.body) {\n        console.debug(chalk(\">>> Body: \".concat(context.init.body), 'blue'));\n      }\n      console.debug('');\n    },\n    post: async context => {\n      console.debug(chalk(\"<<< Status: \".concat(context.response.status), 'green'));\n      console.debug(chalk(\"<<< Body: \".concat(await context.response.text()), 'green'));\n      console.debug('');\n    }\n  };\n  debugMiddleware.push(debugLogMiddleware);\n}\n/**\n * Enable the `PINECONE_DEBUG_CURL` environment variable to print the equivalent\n * curl commands for each request. These commands will include the API key and\n * other sensitive information, so be careful when using this option.\n */\nif (typeof process !== 'undefined' && process && process.env && process.env.PINECONE_DEBUG_CURL) {\n  const debugCurlMiddleware = {\n    post: async context => {\n      let headers = \"-H \\\"Api-Key: \".concat((context.init.headers || {})['Api-Key'], \"\\\"\");\n      if (context.init.headers && context.init.headers['Content-Type']) {\n        headers += \" -H \\\"Content-Type: \".concat(context.init.headers['Content-Type'], \"\\\"\");\n      }\n      const cmd = \"curl -X \".concat(context.init.method, \" \").concat(context.url, \" \").concat(headers, \" \").concat(context.init.body ? \"-d '\".concat(context.init.body, \"'\") : '');\n      console.debug(chalk(cmd, 'red'));\n      console.debug('');\n    }\n  };\n  debugMiddleware.push(debugCurlMiddleware);\n}\nexports.middleware = [...debugMiddleware, {\n  onError: async context => {\n    const err = await (0, errors_1.handleApiError)(context.error, undefined, context.url);\n    throw err;\n  },\n  post: async context => {\n    const {\n      response\n    } = context;\n    if (response.status >= 200 && response.status < 300) {\n      return response;\n    } else {\n      const err = await (0, errors_1.handleApiError)(new db_control_1.ResponseError(response, 'Response returned an error'), undefined, context.url);\n      throw err;\n    }\n  }\n}];","map":{"version":3,"mappings":"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","names":["debugMiddleware","chalk","str","color","colors","blue","red","green","yellow","process","env","PINECONE_DEBUG","debugLogMiddleware","pre","context","console","debug","init","method","url","headers","JSON","parse","stringify","body","post","response","status","text","push","PINECONE_DEBUG_CURL","debugCurlMiddleware","cmd","exports","onError","err","error","undefined","db_control_1"],"sourceRoot":"","sources":["../../src/utils/middleware.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}