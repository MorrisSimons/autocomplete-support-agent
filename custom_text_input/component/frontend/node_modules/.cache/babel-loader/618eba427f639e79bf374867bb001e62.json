{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Index = void 0;\nconst upsert_1 = require(\"./vectors/upsert\");\nconst fetch_1 = require(\"./vectors/fetch\");\nconst update_1 = require(\"./vectors/update\");\nconst query_1 = require(\"./vectors/query\");\nconst deleteOne_1 = require(\"./vectors/deleteOne\");\nconst deleteMany_1 = require(\"./vectors/deleteMany\");\nconst deleteAll_1 = require(\"./vectors/deleteAll\");\nconst describeIndexStats_1 = require(\"./vectors/describeIndexStats\");\nconst vectorOperationsProvider_1 = require(\"./vectors/vectorOperationsProvider\");\nconst list_1 = require(\"./vectors/list\");\nconst upsertRecords_1 = require(\"./vectors/upsertRecords\");\nconst searchRecords_1 = require(\"./vectors/searchRecords\");\nconst startImport_1 = require(\"./bulk/startImport\");\nconst listImports_1 = require(\"./bulk/listImports\");\nconst describeImport_1 = require(\"./bulk/describeImport\");\nconst cancelImport_1 = require(\"./bulk/cancelImport\");\nconst bulkOperationsProvider_1 = require(\"./bulk/bulkOperationsProvider\");\nconst namespacesOperationsProvider_1 = require(\"./namespaces/namespacesOperationsProvider\");\nconst listNamespaces_1 = require(\"./namespaces/listNamespaces\");\nconst describeNamespace_1 = require(\"./namespaces/describeNamespace\");\nconst deleteNamespace_1 = require(\"./namespaces/deleteNamespace\");\n/**\n * The `Index` class is used to perform data operations (upsert, query, etc)\n * against Pinecone indexes. Typically, it will be instantiated via a `Pinecone`\n * client instance that has already built the required configuration from a\n * combination of sources.\n *\n * ```typescript\n * import { Pinecone } from '@pinecone-database/pinecone';\n * const pc = new Pinecone()\n *\n * const index = pc.index('index-name')\n * ```\n *\n * ### Targeting an index, with user-defined Metadata types\n *\n * If you are storing metadata alongside your vector values inside your Pinecone records, you can pass a type parameter to `index()` in order to get proper TypeScript typechecking when upserting and querying data.\n *\n * ```typescript\n * import { Pinecone } from '@pinecone-database/pinecone';\n * const pc = new Pinecone();\n *\n * type MovieMetadata = {\n *   title: string,\n *   runtime: numbers,\n *   genre: 'comedy' | 'horror' | 'drama' | 'action'\n * }\n *\n * // Specify a custom metadata type while targeting the index\n * const index = pc.index<MovieMetadata>('test-index');\n *\n * // Now you get type errors if upserting malformed metadata\n * await index.upsert([{\n *   id: '1234',\n *   values: [\n *     .... // embedding values\n *   ],\n *   metadata: {\n *     genre: 'Gone with the Wind',\n *     runtime: 238,\n *     genre: 'drama',\n *\n *     // @ts-expect-error because category property not in MovieMetadata\n *     category: 'classic'\n *   }\n * }])\n *\n * const results = await index.query({\n *    vector: [\n *     ... // query embedding\n *    ],\n *    filter: { genre: { '$eq': 'drama' }}\n * })\n * const movie = results.matches[0];\n *\n * if (movie.metadata) {\n *   // Since we passed the MovieMetadata type parameter above,\n *   // we can interact with metadata fields without having to\n *   // do any typecasting.\n *   const { title, runtime, genre } = movie.metadata;\n *   console.log(`The best match in drama was ${title}`)\n * }\n * ```\n *\n * @typeParam T - The type of metadata associated with each record.\n */\nclass Index {\n  /**\n   * Instantiation of Index is handled by {@link Pinecone}\n   *\n   * @example\n   * ```js\n   * import { Pinecone } from '@pinecone-database/pinecone';\n   * const pc = new Pinecone();\n   *\n   * const index = pc.index('my-index');\n   * ```\n   *\n   * @constructor\n   * @param indexName - The name of the index that will receive operations from this {@link Index} instance.\n   * @param config - The configuration from the Pinecone client.\n   * @param namespace - The namespace for the index.\n   * @param indexHostUrl - An optional override for the host address used for data operations.\n   * @param additionalHeaders - An optional object of additional header to send with each request.\n   */\n  constructor(indexName, config) {\n    let namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '__default__';\n    let indexHostUrl = arguments.length > 3 ? arguments[3] : undefined;\n    let additionalHeaders = arguments.length > 4 ? arguments[4] : undefined;\n    this.config = config;\n    this.target = {\n      index: indexName,\n      namespace: namespace,\n      indexHostUrl: indexHostUrl\n    };\n    // vector & record operations\n    const dataOperationsProvider = new vectorOperationsProvider_1.VectorOperationsProvider(config, indexName, indexHostUrl, additionalHeaders);\n    this._deleteAll = (0, deleteAll_1.deleteAll)(dataOperationsProvider, namespace);\n    this._deleteMany = (0, deleteMany_1.deleteMany)(dataOperationsProvider, namespace);\n    this._deleteOne = (0, deleteOne_1.deleteOne)(dataOperationsProvider, namespace);\n    this._describeIndexStats = (0, describeIndexStats_1.describeIndexStats)(dataOperationsProvider);\n    this._listPaginated = (0, list_1.listPaginated)(dataOperationsProvider, namespace);\n    this._fetchCommand = new fetch_1.FetchCommand(dataOperationsProvider, namespace);\n    this._queryCommand = new query_1.QueryCommand(dataOperationsProvider, namespace);\n    this._updateCommand = new update_1.UpdateCommand(dataOperationsProvider, namespace);\n    this._upsertCommand = new upsert_1.UpsertCommand(dataOperationsProvider, namespace);\n    this._upsertRecordsCommand = new upsertRecords_1.UpsertRecordsCommand(dataOperationsProvider, namespace, config);\n    this._searchRecordsCommand = new searchRecords_1.SearchRecordsCommand(dataOperationsProvider, namespace);\n    // bulk operations\n    const bulkApiProvider = new bulkOperationsProvider_1.BulkOperationsProvider(config, indexName, indexHostUrl, additionalHeaders);\n    this._startImportCommand = new startImport_1.StartImportCommand(bulkApiProvider, namespace);\n    this._listImportsCommand = new listImports_1.ListImportsCommand(bulkApiProvider, namespace);\n    this._describeImportCommand = new describeImport_1.DescribeImportCommand(bulkApiProvider, namespace);\n    this._cancelImportCommand = new cancelImport_1.CancelImportCommand(bulkApiProvider, namespace);\n    // namespace operations\n    const namespaceApiProvider = new namespacesOperationsProvider_1.NamespaceOperationsProvider(config, indexName, indexHostUrl, additionalHeaders);\n    this._listNamespacesCommand = (0, listNamespaces_1.listNamespaces)(namespaceApiProvider);\n    this._describeNamespaceCommand = (0, describeNamespace_1.describeNamespace)(namespaceApiProvider);\n    this._deleteNamespaceCommand = (0, deleteNamespace_1.deleteNamespace)(namespaceApiProvider);\n  }\n  /**\n   * Delete all records from the targeted namespace. To delete all records from across all namespaces,\n   * delete the index using {@link Pinecone.deleteIndex} and create a new one using {@link Pinecone.createIndex}.\n   *\n   * @example\n   * ```js\n   * import { Pinecone } from '@pinecone-database/pinecone';\n   * const pc = new Pinecone();\n   * const index = pc.index('my-index');\n   *\n   * await index.describeIndexStats();\n   * // {\n   * //  namespaces: {\n   * //    '': { recordCount: 10 },\n   * //   foo: { recordCount: 1 }\n   * //   },\n   * //   dimension: 8,\n   * //   indexFullness: 0,\n   * //   totalRecordCount: 11\n   * // }\n   *\n   * await index.deleteAll();\n   *\n   * // Records from the default namespace '' are now deleted. Records in other namespaces are not modified.\n   *\n   * await index.describeIndexStats();\n   * // {\n   * //  namespaces: {\n   * //   foo: { recordCount: 1 }\n   * //   },\n   * //   dimension: 8,\n   * //   indexFullness: 0,\n   * //   totalRecordCount: 1\n   * // }\n   * ```\n   * @throws {@link Errors.PineconeConnectionError} when network problems or an outage of Pinecone's APIs prevent the request from being completed.\n   * @returns A promise that resolves when the delete is completed.\n   */\n  deleteAll() {\n    return this._deleteAll();\n  }\n  /**\n   * Delete records from the index by either an array of ids, or a filter object.\n   * See [Filtering with metadata](https://docs.pinecone.io/docs/metadata-filtering#deleting-vectors-by-metadata-filter)\n   * for more on deleting records with filters.\n   *\n   * @example\n   * ```js\n   * import { Pinecone } from '@pinecone-database/pinecone';\n   * const pc = new Pinecone();\n   * const index = pc.index('my-index');\n   *\n   * await index.deleteMany(['record-1', 'record-2']);\n   *\n   * // or\n   * await index.deleteMany({ genre: 'classical' });\n   * ```\n   * @param options - An array of record id values or a filter object.\n   * @throws {@link Errors.PineconeArgumentError} when arguments passed to the method fail a runtime validation.\n   * @throws {@link Errors.PineconeConnectionError} when network problems or an outage of Pinecone's APIs prevent the request from being completed.\n   * @returns A promise that resolves when the delete is completed.\n   */\n  deleteMany(options) {\n    return this._deleteMany(options);\n  }\n  /**\n   * Delete a record from the index by id.\n   *\n   * @example\n   * ```js\n   * import { Pinecone } from '@pinecone-database/pinecone';\n   * const pc = new Pinecone();\n   * const index = pc.index('my-index');\n   *\n   * await index.deleteOne('record-1');\n   * ```\n   * @param id - The id of the record to delete.\n   * @throws {@link Errors.PineconeArgumentError} when arguments passed to the method fail a runtime validation.\n   * @throws {@link Errors.PineconeConnectionError} when network problems or an outage of Pinecone's APIs prevent the request from being completed.\n   * @returns A promise that resolves when the delete is completed.\n   */\n  deleteOne(id) {\n    return this._deleteOne(id);\n  }\n  /**\n   * Describes the index's statistics such as total number of records, records per namespace, and the index's dimension size.\n   *\n   * @example\n   * ```js\n   * import { Pinecone } from '@pinecone-database/pinecone';\n   * const pc = new Pinecone();\n   * const index = pc.index('my-index');\n   *\n   * await index.describeIndexStats();\n   * // {\n   * //  namespaces: {\n   * //    '': { recordCount: 10 }\n   * //    foo: { recordCount: 2000 },\n   * //    bar: { recordCount: 2000 }\n   * //   },\n   * //   dimension: 1536,\n   * //   indexFullness: 0,\n   * //   totalRecordCount: 4010\n   * // }\n   * ```\n   * @throws {@link Errors.PineconeConnectionError} when network problems or an outage of Pinecone's APIs prevent the request from being completed.\n   * @returns A promise that resolves with the {@link IndexStatsDescription} value when the operation is completed.\n   */\n  describeIndexStats() {\n    return this._describeIndexStats();\n  }\n  /**\n   * The `listPaginated` operation finds vectors based on an id prefix within a single namespace.\n   * It returns matching ids in a paginated form, with a pagination token to fetch the next page of results.\n   * This id list can then be passed to fetch or delete options to perform operations on the matching records.\n   * See [Get record IDs](https://docs.pinecone.io/docs/get-record-ids) for guidance and examples.\n   *\n   * @example\n   * ```js\n   * import { Pinecone } from '@pinecone-database/pinecone';\n   * const pc = new Pinecone();\n   *\n   * const index = pc.index('my-index').namespace('my-namespace');\n   *\n   * const results = await index.listPaginated({ prefix: 'doc1#' });\n   * console.log(results);\n   * // {\n   * //   vectors: [\n   * //     { id: 'doc1#01' }, { id: 'doc1#02' }, { id: 'doc1#03' },\n   * //     { id: 'doc1#04' }, { id: 'doc1#05' },  { id: 'doc1#06' },\n   * //     { id: 'doc1#07' }, { id: 'doc1#08' }, { id: 'doc1#09' },\n   * //     ...\n   * //   ],\n   * //   pagination: {\n   * //     next: 'eyJza2lwX3Bhc3QiOiJwcmVUZXN0LS04MCIsInByZWZpeCI6InByZVRlc3QifQ=='\n   * //   },\n   * //   namespace: 'my-namespace',\n   * //   usage: { readUnits: 1 }\n   * // }\n   *\n   * // Fetch the next page of results\n   * await index.listPaginated({ prefix: 'doc1#', paginationToken: results.pagination.next});\n   * ```\n   *\n   * > ⚠️ **Note:**\n   * >\n   * > `listPaginated` is supported only for serverless indexes.\n   *\n   * @param options - The {@link ListOptions} for the operation.\n   * @returns - A promise that resolves with the {@link ListResponse} when the operation is completed.\n   * @throws {@link Errors.PineconeConnectionError} when invalid environment, project id, or index name is configured.\n   * @throws {@link Errors.PineconeArgumentError} when invalid arguments are passed.\n   */\n  listPaginated(options) {\n    return this._listPaginated(options);\n  }\n  /**\n   * Returns an {@link Index} targeting the specified namespace. By default, all operations take place inside the default namespace `''`.\n   *\n   * @example\n   * ```js\n   * import { Pinecone } from '@pinecone-database/pinecone';\n   * const pc = new Pinecone();\n   *\n   * // Create an Index client instance scoped to operate on a\n   * // single namespace\n   * const ns = pc.index('my-index').namespace('my-namespace');\n   *\n   * // Now operations against this intance only affect records in\n   * // the targeted namespace\n   * ns.upsert([\n   *   // ... records to upsert in namespace 'my-namespace'\n   * ])\n   *\n   * ns.query({\n   *   // ... query records in namespace 'my-namespace'\n   * })\n   * ```\n   * This `namespace()` method will inherit custom metadata types if you are chaining the call off an {@link Index} client instance that is typed with a user-specified metadata type. See {@link Pinecone.index} for more info.\n   *\n   * @param namespace - The namespace to target within the index. All operations performed with the returned client instance will be scoped only to the targeted namespace.\n   * @returns An {@link Index} object that can be used to perform data operations scoped to the specified namespace.\n   */\n  namespace(namespace) {\n    return new Index(this.target.index, this.config, namespace, this.target.indexHostUrl);\n  }\n  /**\n   * Upsert records to the index.\n   *\n   * @example\n   * ```js\n   * import { Pinecone } from '@pinecone-database/pinecone';\n   * const pc = new Pinecone();\n   * const index = pc.index('my-index');\n   *\n   * await index.upsert([{\n   *  id: 'record-1',\n   *  values: [0.176, 0.345, 0.263],\n   * },{\n   *  id: 'record-2',\n   *  values: [0.176, 0.345, 0.263],\n   * }])\n   * ```\n   *\n   * @param data - An array of {@link PineconeRecord} objects to upsert.\n   * @throws {@link Errors.PineconeArgumentError} when arguments passed to the method fail a runtime validation.\n   * @throws {@link Errors.PineconeConnectionError} when network problems or an outage of Pinecone's APIs prevent the request from being completed.\n   * @returns A promise that resolves when the upsert is completed.\n   */\n  async upsert(data) {\n    return await this._upsertCommand.run(data, this.config.maxRetries);\n  }\n  /**\n   * Fetch records from the index.\n   *\n   * @example\n   * ```js\n   * import { Pinecone } from '@pinecone-database/pinecone';\n   * const pc = new Pinecone();\n   * const index = pc.index('my-index');\n   *\n   * await index.fetch(['record-1', 'record-2']);\n   * ```\n   * @param options - The {@link FetchOptions} for the operation.\n   * @throws {@link Errors.PineconeArgumentError} when arguments passed to the method fail a runtime validation.\n   * @throws {@link Errors.PineconeConnectionError} when network problems or an outage of Pinecone's APIs prevent the request from being completed.\n   * @returns A promise that resolves with the {@link FetchResponse} when the fetch is completed.\n   */\n  async fetch(options) {\n    return await this._fetchCommand.run(options);\n  }\n  /**\n   * Query records from the index. Query is used to find the `topK` records in the index whose vector values are most\n   * similar to the vector values of the query according to the distance metric you have configured for your index.\n   * See [Query data](https://docs.pinecone.io/docs/query-data) for more on querying.\n   *\n   * @example\n   * ```js\n   * import { Pinecone } from '@pinecone-database/pinecone';\n   * const pc = new Pinecone();\n   * const index = pc.index('my-index');\n   *\n   * await index.query({ topK: 3, id: 'record-1'});\n   *\n   * // or\n   * await index.query({ topK: 3, vector: [0.176, 0.345, 0.263] });\n   * ```\n   *\n   * @param options - The {@link QueryOptions} for the operation.\n   * @throws {@link Errors.PineconeArgumentError} when arguments passed to the method fail a runtime validation.\n   * @throws {@link Errors.PineconeConnectionError} when network problems or an outage of Pinecone's APIs prevent the request from being completed.\n   * @returns A promise that resolves with the {@link QueryResponse} when the query is completed.\n   */\n  async query(options) {\n    return await this._queryCommand.run(options);\n  }\n  /**\n   * Update a record in the index by id.\n   *\n   * @example\n   * ```js\n   * import { Pinecone } from '@pinecone-database/pinecone';\n   * const pc = new Pinecone();\n   * const index = pc.index('imdb-movies');\n   *\n   * await index.update({\n   *   id: '18593',\n   *   metadata: { genre: 'romance' },\n   * });\n   * ```\n   *\n   * @param options - The {@link UpdateOptions} for the operation.\n   * @throws {@link Errors.PineconeArgumentError} when arguments passed to the method fail a runtime validation.\n   * @throws {@link Errors.PineconeConnectionError} when network problems or an outage of Pinecone's APIs prevent the request from being completed.\n   * @returns A promise that resolves when the update is completed.\n   */\n  async update(options) {\n    return await this._updateCommand.run(options, this.config.maxRetries);\n  }\n  /**\n   * Upsert integrated records into a specific namespace within an index.\n   *\n   * @example\n   * ```js\n   * import { Pinecone } from '@pinecone-database/pinecone';\n   * const pc = new Pinecone();\n   * const namespace = pc.index('integrated-index').namespace('my-namespace');\n   *\n   * await namespace.upsertRecords([\n   *   {\n   *     id: 'rec1',\n   *     chunk_text:\n   *       \"Apple's first product, the Apple I, was released in 1976 and was hand-built by co-founder Steve Wozniak.\",\n   *     category: 'product',\n   *   },\n   *   {\n   *     id: 'rec2',\n   *     chunk_text:\n   *       'Apples are a great source of dietary fiber, which supports digestion and helps maintain a healthy gut.',\n   *     category: 'nutrition',\n   *   },\n   *   {\n   *     id: 'rec3',\n   *     chunk_text:\n   *       'Apples originated in Central Asia and have been cultivated for thousands of years, with over 7,500 varieties available today.',\n   *     category: 'cultivation',\n   *   },\n   *   {\n   *     id: 'rec4',\n   *     chunk_text:\n   *       'In 2001, Apple released the iPod, which transformed the music industry by making portable music widely accessible.',\n   *     category: 'product',\n   *   },\n   *   {\n   *     id: 'rec5',\n   *     chunk_text:\n   *       'Apple went public in 1980, making history with one of the largest IPOs at that time.',\n   *     category: 'milestone',\n   *   },\n   *   {\n   *     id: 'rec6',\n   *     chunk_text:\n   *       'Rich in vitamin C and other antioxidants, apples contribute to immune health and may reduce the risk of chronic diseases.',\n   *     category: 'nutrition',\n   *   },\n   *   {\n   *     id: 'rec7',\n   *     chunk_text:\n   *       \"Known for its design-forward products, Apple's branding and market strategy have greatly influenced the technology sector and popularized minimalist design worldwide.\",\n   *     category: 'influence',\n   *   },\n   *   {\n   *     id: 'rec8',\n   *     chunk_text:\n   *       'The high fiber content in apples can also help regulate blood sugar levels, making them a favorable snack for people with diabetes.',\n   *     category: 'nutrition',\n   *   },\n   * ]);\n   * ```\n   *\n   * @param data - An array of {@link IntegratedRecord} objects to upsert.\n   * @throws {@link Errors.PineconeArgumentError} when arguments passed to the method fail a runtime validation.\n   * @throws {@link Errors.PineconeConnectionError} when network problems or an outage of Pinecone's APIs prevent the request from being completed.\n   * @returns a promise that resolves when the operation is complete.\n   */\n  async upsertRecords(data) {\n    return await this._upsertRecordsCommand.run(data, this.config.maxRetries);\n  }\n  /**\n   * Search a specific namespace for records within an index.\n   *\n   * @example\n   * ```js\n   * import { Pinecone } from '@pinecone-database/pinecone';\n   * const pc = new Pinecone();\n   * const namespace = pc.index('integrated-index').namespace('my-namespace');\n   *\n   * const response = await namespace.searchRecords({\n   *   query: {\n   *     inputs: { text: 'disease prevention' }, topK: 4 },\n   *     rerank: {\n   *       model: 'bge-reranker-v2-m3',\n   *       topN: 2,\n   *       rankFields: ['chunk_text'],\n   *     },\n   *   fields: ['category', 'chunk_text'],\n   * });\n   * console.log(response);\n   * // {\n   * //   \"result\": {\n   * //     \"hits\": [\n   * //       {\n   * //         \"id\": \"rec6\",\n   * //         \"score\": 0.1318424493074417,\n   * //         \"fields\": {\n   * //           \"category\": \"nutrition\",\n   * //           \"chunk_text\": \"Rich in vitamin C and other antioxidants, apples contribute to immune health and may reduce the risk of chronic diseases.\"\n   * //         }\n   * //       },\n   * //       {\n   * //         \"id\": \"rec2\",\n   * //         \"score\": 0.004867417272180319,\n   * //         \"fields\": {\n   * //           \"category\": \"nutrition\",\n   * //           \"chunk_text\": \"Apples are a great source of dietary fiber, which supports digestion and helps maintain a healthy gut.\"\n   * //         }\n   * //       }\n   * //     ]\n   * //   },\n   * //   \"usage\": {\n   * //     \"readUnits\": 1,\n   * //     \"embedTotalTokens\": 8,\n   * //     \"rerankUnits\": 1\n   * //   }\n   * // }\n   * ```\n   *\n   * @param options - The {@link SearchRecordsOptions} for the operation.\n   * @throws {@link Errors.PineconeArgumentError} when arguments passed to the method fail a runtime validation.\n   * @throws {@link Errors.PineconeConnectionError} when network problems or an outage of Pinecone's APIs prevent the request from being completed.\n   * @returns a promise that resolves to {@link SearchRecordsResponse} when the operation is complete.\n   */\n  async searchRecords(options) {\n    return await this._searchRecordsCommand.run(options);\n  }\n  /**\n   * Start an asynchronous import of vectors from object storage into a Pinecone Serverless index.\n   *\n   * @example\n   * ```js\n   * import { Pinecone } from '@pinecone-database/pinecone';\n   * const pc = new Pinecone();\n   * const index = pc.index('my-serverless-index');\n   * console.log(await index.startImport('s3://my-bucket/my-data'));\n   *\n   * // {\"id\":\"1\"}\n   * ```\n   *\n   * @param uri - (Required) The URI prefix under which the data to import is available. All data within this prefix\n   * will be listed then imported into the target index. Currently only `s3://` URIs are supported.\n   * @param integration - (Optional) The name of the storage integration that should be used to access the data.\n   * Defaults to None.\n   * @param errorMode - (Optional) Defaults to \"Continue\". If set to \"Continue\", the import operation will continue\n   * even if some records fail to import. To inspect failures in \"Continue\" mode, send a request to {@link listImports}. Pass\n   * \"Abort\" to stop the import operation if any records fail to import.\n   */\n  async startImport(uri, errorMode, integration) {\n    return await this._startImportCommand.run(uri, errorMode, integration);\n  }\n  /**\n   * List all recent and ongoing import operations.\n   *\n   * @example\n   * ```js\n   * import { Pinecone } from '@pinecone-database/pinecone';\n   * const pc = new Pinecone();\n   * const index = pc.index('my-serverless-index');\n   * console.log(await index.listImports());\n   *\n   * // {\n   * //  data: [\n   * //    {\n   * //      id: '1',\n   * //      uri: 's3://dev-bulk-import-datasets-pub/10-records-dim-10',\n   * //      status: 'Completed',\n   * //      createdAt: 2024-09-17T16:59:57.973Z,\n   * //      finishedAt: 2024-09-17T17:00:12.809Z,\n   * //      percentComplete: 100,\n   * //      recordsImported: 20,\n   * //      error: undefined\n   * //    }\n   * //  ],\n   * //  pagination: undefined  // Example is only 1 item, so no pag. token given.\n   * // }\n   * ```\n   *\n   * @param limit - (Optional) Max number of import operations to return per page.\n   * @param paginationToken - (Optional) Pagination token to continue a previous listing operation.\n   */\n  async listImports(limit, paginationToken) {\n    return await this._listImportsCommand.run(limit, paginationToken);\n  }\n  /**\n   * Return details of a specific import operation.\n   *\n   * @example\n   * ```js\n   * import { Pinecone } from '@pinecone-database/pinecone';\n   * const pc = new Pinecone();\n   * const index = pc.index('my-serverless-index');\n   * console.log(await index.describeImport('import-id'));\n   *\n   * // {\n   * //  id: '1',\n   * //  uri: 's3://dev-bulk-import-datasets-pub/10-records-dim-10',\n   * //  status: 'Completed',\n   * //  createdAt: 2024-09-17T16:59:57.973Z,\n   * //  finishedAt: 2024-09-17T17:00:12.809Z,\n   * //  percentComplete: 100,\n   * //  recordsImported: 20,\n   * //  error: undefined\n   * // }\n   * ```\n   *\n   * @param id - The id of the import operation to describe.\n   */\n  async describeImport(id) {\n    return await this._describeImportCommand.run(id);\n  }\n  /**\n   * Cancel a specific import operation.\n   *\n   * @example\n   * ```js\n   * import { Pinecone } from '@pinecone-database/pinecone';\n   * const pc = new Pinecone();\n   * const index = pc.index('my-serverless-index');\n   * console.log(await index.cancelImport('import-id'));\n   *\n   * // {}\n   * ```\n   *\n   * @param id - The id of the import operation to cancel.\n   */\n  async cancelImport(id) {\n    return await this._cancelImportCommand.run(id);\n  }\n  /**\n   * Returns a list of namespaces within the index.\n   *\n   * @example\n   * ```js\n   * import { Pinecone } from '@pinecone-database/pinecone';\n   * const pc = new Pinecone();\n   * const index = pc.index('my-serverless-index');\n   * console.log(await index.listNamespaces(10));\n   *\n   * // {\n   * //   namespaces: [\n   * //     { name: 'ns-1', recordCount: '1' },\n   * //     { name: 'ns-2', recordCount: '1' }\n   * //   ],\n   * //   pagination: undefined\n   * // }\n   * ```\n   *\n   * @param limit - (Optional) Max number of import operations to return per page.\n   * @param paginationToken - (Optional) Pagination token to continue a previous listing operation.\n   */\n  async listNamespaces(limit, paginationToken) {\n    return await this._listNamespacesCommand(limit, paginationToken);\n  }\n  /**\n   * Returns the details of a specific namespace.\n   *\n   * @example\n   * ```js\n   * import { Pinecone } from '@pinecone-database/pinecone';\n   * const pc = new Pinecone();\n   * const index = pc.index('my-serverless-index');\n   * console.log(await index.describeNamespace('ns-1'));\n   *\n   * // { name: 'ns-1', recordCount: '1' }\n   * ```\n   *\n   * @param namespace - The namespace to describe.\n   */\n  async describeNamespace(namespace) {\n    return await this._describeNamespaceCommand(namespace);\n  }\n  /**\n   * Deletes a specific namespace from the index, including all records within it.\n   *\n   * @example\n   * ```js\n   * import { Pinecone } from '@pinecone-database/pinecone';\n   * const pc = new Pinecone();\n   * const index = pc.index('my-serverless-index');\n   * await index.deleteNamespace('ns-1');\n   * ```\n   *\n   * @param namespace - The namespace to delete.\n   */\n  async deleteNamespace(namespace) {\n    return await this._deleteNamespaceCommand(namespace);\n  }\n}\nexports.Index = Index;","map":{"version":3,"mappings":"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","names":["Index","constructor","indexName","config","namespace","indexHostUrl","additionalHeaders","target","index","dataOperationsProvider","vectorOperationsProvider_1","_deleteAll","_deleteMany","_deleteOne","_describeIndexStats","_listPaginated","_fetchCommand","fetch_1","_queryCommand","query_1","_updateCommand","update_1","_upsertCommand","upsert_1","_upsertRecordsCommand","upsertRecords_1","_searchRecordsCommand","searchRecords_1","bulkApiProvider","bulkOperationsProvider_1","_startImportCommand","startImport_1","_listImportsCommand","listImports_1","_describeImportCommand","describeImport_1","_cancelImportCommand","cancelImport_1","namespaceApiProvider","namespacesOperationsProvider_1","_listNamespacesCommand","_describeNamespaceCommand","_deleteNamespaceCommand","deleteAll","deleteMany","options","deleteOne","id","describeIndexStats","listPaginated","upsert","data","run","maxRetries","fetch","query","update","upsertRecords","searchRecords","startImport","uri","errorMode","integration","listImports","limit","paginationToken","describeImport","cancelImport","listNamespaces","describeNamespace","deleteNamespace","exports"],"sourceRoot":"","sources":["../../src/data/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}