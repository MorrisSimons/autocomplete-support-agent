{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"/home/morrissimons/Desktop/lysa-support-agent/custom_text_input/component/frontend/node_modules/@babel/runtime/helpers/objectWithoutProperties\");\nvar _objectSpread = require(\"/home/morrissimons/Desktop/lysa-support-agent/custom_text_input/component/frontend/node_modules/@babel/runtime/helpers/objectSpread2\");\nconst _excluded = [\"tool_choice\", \"stream\"];\nvar _AbstractChatCompletionRunner_instances, _AbstractChatCompletionRunner_getFinalContent, _AbstractChatCompletionRunner_getFinalMessage, _AbstractChatCompletionRunner_getFinalFunctionToolCall, _AbstractChatCompletionRunner_getFinalFunctionToolCallResult, _AbstractChatCompletionRunner_calculateTotalUsage, _AbstractChatCompletionRunner_validateParams, _AbstractChatCompletionRunner_stringifyFunctionCallResult;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbstractChatCompletionRunner = void 0;\nconst tslib_1 = require(\"../internal/tslib.js\");\nconst error_1 = require(\"../error.js\");\nconst parser_1 = require(\"../lib/parser.js\");\nconst chatCompletionUtils_1 = require(\"./chatCompletionUtils.js\");\nconst EventStream_1 = require(\"./EventStream.js\");\nconst RunnableFunction_1 = require(\"./RunnableFunction.js\");\nconst DEFAULT_MAX_CHAT_COMPLETIONS = 10;\nclass AbstractChatCompletionRunner extends EventStream_1.EventStream {\n  constructor() {\n    super(...arguments);\n    _AbstractChatCompletionRunner_instances.add(this);\n    this._chatCompletions = [];\n    this.messages = [];\n  }\n  _addChatCompletion(chatCompletion) {\n    var _chatCompletion$choic;\n    this._chatCompletions.push(chatCompletion);\n    this._emit('chatCompletion', chatCompletion);\n    const message = (_chatCompletion$choic = chatCompletion.choices[0]) === null || _chatCompletion$choic === void 0 ? void 0 : _chatCompletion$choic.message;\n    if (message) this._addMessage(message);\n    return chatCompletion;\n  }\n  _addMessage(message) {\n    let emit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (!('content' in message)) message.content = null;\n    this.messages.push(message);\n    if (emit) {\n      this._emit('message', message);\n      if ((0, chatCompletionUtils_1.isToolMessage)(message) && message.content) {\n        // Note, this assumes that {role: 'tool', content: â€¦} is always the result of a call of tool of type=function.\n        this._emit('functionToolCallResult', message.content);\n      } else if ((0, chatCompletionUtils_1.isAssistantMessage)(message) && message.tool_calls) {\n        for (const tool_call of message.tool_calls) {\n          if (tool_call.type === 'function') {\n            this._emit('functionToolCall', tool_call.function);\n          }\n        }\n      }\n    }\n  }\n  /**\n   * @returns a promise that resolves with the final ChatCompletion, or rejects\n   * if an error occurred or the stream ended prematurely without producing a ChatCompletion.\n   */\n  async finalChatCompletion() {\n    await this.done();\n    const completion = this._chatCompletions[this._chatCompletions.length - 1];\n    if (!completion) throw new error_1.OpenAIError('stream ended without producing a ChatCompletion');\n    return completion;\n  }\n  /**\n   * @returns a promise that resolves with the content of the final ChatCompletionMessage, or rejects\n   * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n   */\n  async finalContent() {\n    await this.done();\n    return tslib_1.__classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalContent).call(this);\n  }\n  /**\n   * @returns a promise that resolves with the the final assistant ChatCompletionMessage response,\n   * or rejects if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n   */\n  async finalMessage() {\n    await this.done();\n    return tslib_1.__classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this);\n  }\n  /**\n   * @returns a promise that resolves with the content of the final FunctionCall, or rejects\n   * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n   */\n  async finalFunctionToolCall() {\n    await this.done();\n    return tslib_1.__classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionToolCall).call(this);\n  }\n  async finalFunctionToolCallResult() {\n    await this.done();\n    return tslib_1.__classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionToolCallResult).call(this);\n  }\n  async totalUsage() {\n    await this.done();\n    return tslib_1.__classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_calculateTotalUsage).call(this);\n  }\n  allChatCompletions() {\n    return [...this._chatCompletions];\n  }\n  _emitFinal() {\n    const completion = this._chatCompletions[this._chatCompletions.length - 1];\n    if (completion) this._emit('finalChatCompletion', completion);\n    const finalMessage = tslib_1.__classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this);\n    if (finalMessage) this._emit('finalMessage', finalMessage);\n    const finalContent = tslib_1.__classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalContent).call(this);\n    if (finalContent) this._emit('finalContent', finalContent);\n    const finalFunctionCall = tslib_1.__classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionToolCall).call(this);\n    if (finalFunctionCall) this._emit('finalFunctionToolCall', finalFunctionCall);\n    const finalFunctionCallResult = tslib_1.__classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionToolCallResult).call(this);\n    if (finalFunctionCallResult != null) this._emit('finalFunctionToolCallResult', finalFunctionCallResult);\n    if (this._chatCompletions.some(c => c.usage)) {\n      this._emit('totalUsage', tslib_1.__classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_calculateTotalUsage).call(this));\n    }\n  }\n  async _createChatCompletion(client, params, options) {\n    const signal = options === null || options === void 0 ? void 0 : options.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    tslib_1.__classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_validateParams).call(this, params);\n    const chatCompletion = await client.chat.completions.create(_objectSpread(_objectSpread({}, params), {}, {\n      stream: false\n    }), _objectSpread(_objectSpread({}, options), {}, {\n      signal: this.controller.signal\n    }));\n    this._connected();\n    return this._addChatCompletion((0, parser_1.parseChatCompletion)(chatCompletion, params));\n  }\n  async _runChatCompletion(client, params, options) {\n    for (const message of params.messages) {\n      this._addMessage(message, false);\n    }\n    return await this._createChatCompletion(client, params, options);\n  }\n  async _runTools(client, params, options) {\n    var _tool_choice$function;\n    const role = 'tool';\n    const {\n        tool_choice = 'auto',\n        stream\n      } = params,\n      restParams = _objectWithoutProperties(params, _excluded);\n    const singleFunctionToCall = typeof tool_choice !== 'string' && tool_choice.type === 'function' && (tool_choice === null || tool_choice === void 0 ? void 0 : (_tool_choice$function = tool_choice.function) === null || _tool_choice$function === void 0 ? void 0 : _tool_choice$function.name);\n    const {\n      maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS\n    } = options || {};\n    // TODO(someday): clean this logic up\n    const inputTools = params.tools.map(tool => {\n      if ((0, parser_1.isAutoParsableTool)(tool)) {\n        if (!tool.$callback) {\n          throw new error_1.OpenAIError('Tool given to `.runTools()` that does not have an associated function');\n        }\n        return {\n          type: 'function',\n          function: {\n            function: tool.$callback,\n            name: tool.function.name,\n            description: tool.function.description || '',\n            parameters: tool.function.parameters,\n            parse: tool.$parseRaw,\n            strict: true\n          }\n        };\n      }\n      return tool;\n    });\n    const functionsByName = {};\n    for (const f of inputTools) {\n      if (f.type === 'function') {\n        functionsByName[f.function.name || f.function.function.name] = f.function;\n      }\n    }\n    const tools = 'tools' in params ? inputTools.map(t => t.type === 'function' ? {\n      type: 'function',\n      function: {\n        name: t.function.name || t.function.function.name,\n        parameters: t.function.parameters,\n        description: t.function.description,\n        strict: t.function.strict\n      }\n    } : t) : undefined;\n    for (const message of params.messages) {\n      this._addMessage(message, false);\n    }\n    for (let i = 0; i < maxChatCompletions; ++i) {\n      var _chatCompletion$choic2, _message$tool_calls;\n      const chatCompletion = await this._createChatCompletion(client, _objectSpread(_objectSpread({}, restParams), {}, {\n        tool_choice,\n        tools,\n        messages: [...this.messages]\n      }), options);\n      const message = (_chatCompletion$choic2 = chatCompletion.choices[0]) === null || _chatCompletion$choic2 === void 0 ? void 0 : _chatCompletion$choic2.message;\n      if (!message) {\n        throw new error_1.OpenAIError(\"missing message in ChatCompletion response\");\n      }\n      if (!((_message$tool_calls = message.tool_calls) === null || _message$tool_calls === void 0 ? void 0 : _message$tool_calls.length)) {\n        return;\n      }\n      for (const tool_call of message.tool_calls) {\n        if (tool_call.type !== 'function') continue;\n        const tool_call_id = tool_call.id;\n        const {\n          name,\n          arguments: args\n        } = tool_call.function;\n        const fn = functionsByName[name];\n        if (!fn) {\n          const content = \"Invalid tool_call: \".concat(JSON.stringify(name), \". Available options are: \").concat(Object.keys(functionsByName).map(name => JSON.stringify(name)).join(', '), \". Please try again\");\n          this._addMessage({\n            role,\n            tool_call_id,\n            content\n          });\n          continue;\n        } else if (singleFunctionToCall && singleFunctionToCall !== name) {\n          const content = \"Invalid tool_call: \".concat(JSON.stringify(name), \". \").concat(JSON.stringify(singleFunctionToCall), \" requested. Please try again\");\n          this._addMessage({\n            role,\n            tool_call_id,\n            content\n          });\n          continue;\n        }\n        let parsed;\n        try {\n          parsed = (0, RunnableFunction_1.isRunnableFunctionWithParse)(fn) ? await fn.parse(args) : args;\n        } catch (error) {\n          const content = error instanceof Error ? error.message : String(error);\n          this._addMessage({\n            role,\n            tool_call_id,\n            content\n          });\n          continue;\n        }\n        // @ts-expect-error it can't rule out `never` type.\n        const rawContent = await fn.function(parsed, this);\n        const content = tslib_1.__classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_stringifyFunctionCallResult).call(this, rawContent);\n        this._addMessage({\n          role,\n          tool_call_id,\n          content\n        });\n        if (singleFunctionToCall) {\n          return;\n        }\n      }\n    }\n    return;\n  }\n}\nexports.AbstractChatCompletionRunner = AbstractChatCompletionRunner;\n_AbstractChatCompletionRunner_instances = new WeakSet(), _AbstractChatCompletionRunner_getFinalContent = function _AbstractChatCompletionRunner_getFinalContent() {\n  var _tslib_1$__classPriva;\n  return (_tslib_1$__classPriva = tslib_1.__classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this).content) !== null && _tslib_1$__classPriva !== void 0 ? _tslib_1$__classPriva : null;\n}, _AbstractChatCompletionRunner_getFinalMessage = function _AbstractChatCompletionRunner_getFinalMessage() {\n  let i = this.messages.length;\n  while (i-- > 0) {\n    const message = this.messages[i];\n    if ((0, chatCompletionUtils_1.isAssistantMessage)(message)) {\n      var _message$content, _message$refusal;\n      // TODO: support audio here\n      const ret = _objectSpread(_objectSpread({}, message), {}, {\n        content: (_message$content = message.content) !== null && _message$content !== void 0 ? _message$content : null,\n        refusal: (_message$refusal = message.refusal) !== null && _message$refusal !== void 0 ? _message$refusal : null\n      });\n      return ret;\n    }\n  }\n  throw new error_1.OpenAIError('stream ended without producing a ChatCompletionMessage with role=assistant');\n}, _AbstractChatCompletionRunner_getFinalFunctionToolCall = function _AbstractChatCompletionRunner_getFinalFunctionToolCall() {\n  for (let i = this.messages.length - 1; i >= 0; i--) {\n    var _message$tool_calls2;\n    const message = this.messages[i];\n    if ((0, chatCompletionUtils_1.isAssistantMessage)(message) && (message === null || message === void 0 ? void 0 : (_message$tool_calls2 = message.tool_calls) === null || _message$tool_calls2 === void 0 ? void 0 : _message$tool_calls2.length)) {\n      var _message$tool_calls$f;\n      return (_message$tool_calls$f = message.tool_calls.filter(x => x.type === 'function').at(-1)) === null || _message$tool_calls$f === void 0 ? void 0 : _message$tool_calls$f.function;\n    }\n  }\n  return;\n}, _AbstractChatCompletionRunner_getFinalFunctionToolCallResult = function _AbstractChatCompletionRunner_getFinalFunctionToolCallResult() {\n  for (let i = this.messages.length - 1; i >= 0; i--) {\n    const message = this.messages[i];\n    if ((0, chatCompletionUtils_1.isToolMessage)(message) && message.content != null && typeof message.content === 'string' && this.messages.some(x => {\n      var _x$tool_calls;\n      return x.role === 'assistant' && ((_x$tool_calls = x.tool_calls) === null || _x$tool_calls === void 0 ? void 0 : _x$tool_calls.some(y => y.type === 'function' && y.id === message.tool_call_id));\n    })) {\n      return message.content;\n    }\n  }\n  return;\n}, _AbstractChatCompletionRunner_calculateTotalUsage = function _AbstractChatCompletionRunner_calculateTotalUsage() {\n  const total = {\n    completion_tokens: 0,\n    prompt_tokens: 0,\n    total_tokens: 0\n  };\n  for (const {\n    usage\n  } of this._chatCompletions) {\n    if (usage) {\n      total.completion_tokens += usage.completion_tokens;\n      total.prompt_tokens += usage.prompt_tokens;\n      total.total_tokens += usage.total_tokens;\n    }\n  }\n  return total;\n}, _AbstractChatCompletionRunner_validateParams = function _AbstractChatCompletionRunner_validateParams(params) {\n  if (params.n != null && params.n > 1) {\n    throw new error_1.OpenAIError('ChatCompletion convenience helpers only support n=1 at this time. To use n>1, please use chat.completions.create() directly.');\n  }\n}, _AbstractChatCompletionRunner_stringifyFunctionCallResult = function _AbstractChatCompletionRunner_stringifyFunctionCallResult(rawContent) {\n  return typeof rawContent === 'string' ? rawContent : rawContent === undefined ? 'undefined' : JSON.stringify(rawContent);\n};","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;AAGA;AAaA;AACA;AACA;AAOA,MAAMA,4BAA4B,GAAG,EAAE;AAMvC,MAAaC,4BAGX,SAAQC,yBAAuB;EAHjCC;;;IAIY,qBAAgB,GAAoC,EAAE;IAChE,aAAQ,GAAiC,EAAE;EAkW7C;EAhWYC,kBAAkB,CAE1BC,cAA6C;IAAA;IAE7C,IAAI,CAACC,gBAAgB,CAACC,IAAI,CAACF,cAAc,CAAC;IAC1C,IAAI,CAACG,KAAK,CAAC,gBAAgB,EAAEH,cAAc,CAAC;IAC5C,MAAMI,OAAO,4BAAGJ,cAAc,CAACK,OAAO,CAAC,CAAC,CAAC,0DAAzB,sBAA2BD,OAAO;IAClD,IAAIA,OAAO,EAAE,IAAI,CAACE,WAAW,CAACF,OAAqC,CAAC;IACpE,OAAOJ,cAAc;EACvB;EAEUM,WAAW,CAEnBF,OAAmC,EACxB;IAAA,IAAXG,IAAI,uEAAG,IAAI;IAEX,IAAI,EAAE,SAAS,IAAIH,OAAO,CAAC,EAAEA,OAAO,CAACI,OAAO,GAAG,IAAI;IAEnD,IAAI,CAACC,QAAQ,CAACP,IAAI,CAACE,OAAO,CAAC;IAE3B,IAAIG,IAAI,EAAE;MACR,IAAI,CAACJ,KAAK,CAAC,SAAS,EAAEC,OAAO,CAAC;MAC9B,IAAI,uCAAa,EAACA,OAAO,CAAC,IAAIA,OAAO,CAACI,OAAO,EAAE;QAC7C;QACA,IAAI,CAACL,KAAK,CAAC,wBAAwB,EAAEC,OAAO,CAACI,OAAiB,CAAC;MACjE,CAAC,MAAM,IAAI,4CAAkB,EAACJ,OAAO,CAAC,IAAIA,OAAO,CAACM,UAAU,EAAE;QAC5D,KAAK,MAAMC,SAAS,IAAIP,OAAO,CAACM,UAAU,EAAE;UAC1C,IAAIC,SAAS,CAACC,IAAI,KAAK,UAAU,EAAE;YACjC,IAAI,CAACT,KAAK,CAAC,kBAAkB,EAAEQ,SAAS,CAACE,QAAQ,CAAC;UACpD;QACF;MACF;IACF;EACF;EAEA;;;;EAIA,MAAMC,mBAAmB;IACvB,MAAM,IAAI,CAACC,IAAI,EAAE;IACjB,MAAMC,UAAU,GAAG,IAAI,CAACf,gBAAgB,CAAC,IAAI,CAACA,gBAAgB,CAACgB,MAAM,GAAG,CAAC,CAAC;IAC1E,IAAI,CAACD,UAAU,EAAE,MAAM,IAAIE,mBAAW,CAAC,iDAAiD,CAAC;IACzF,OAAOF,UAAU;EACnB;EAMA;;;;EAIA,MAAMG,YAAY;IAChB,MAAM,IAAI,CAACJ,IAAI,EAAE;IACjB,OAAOK,mCAAI,8FAAiB,MAArB,IAAI,CAAmB;EAChC;EAmBA;;;;EAIA,MAAMC,YAAY;IAChB,MAAM,IAAI,CAACN,IAAI,EAAE;IACjB,OAAOK,mCAAI,8FAAiB,MAArB,IAAI,CAAmB;EAChC;EAaA;;;;EAIA,MAAME,qBAAqB;IACzB,MAAM,IAAI,CAACP,IAAI,EAAE;IACjB,OAAOK,mCAAI,uGAA0B,MAA9B,IAAI,CAA4B;EACzC;EAsBA,MAAMG,2BAA2B;IAC/B,MAAM,IAAI,CAACR,IAAI,EAAE;IACjB,OAAOK,mCAAI,6GAAgC,MAApC,IAAI,CAAkC;EAC/C;EAkBA,MAAMI,UAAU;IACd,MAAM,IAAI,CAACT,IAAI,EAAE;IACjB,OAAOK,mCAAI,kGAAqB,MAAzB,IAAI,CAAuB;EACpC;EAEAK,kBAAkB;IAChB,OAAO,CAAC,GAAG,IAAI,CAACxB,gBAAgB,CAAC;EACnC;EAEmByB,UAAU;IAG3B,MAAMV,UAAU,GAAG,IAAI,CAACf,gBAAgB,CAAC,IAAI,CAACA,gBAAgB,CAACgB,MAAM,GAAG,CAAC,CAAC;IAC1E,IAAID,UAAU,EAAE,IAAI,CAACb,KAAK,CAAC,qBAAqB,EAAEa,UAAU,CAAC;IAC7D,MAAMK,YAAY,GAAGD,mCAAI,8FAAiB,MAArB,IAAI,CAAmB;IAC5C,IAAIC,YAAY,EAAE,IAAI,CAAClB,KAAK,CAAC,cAAc,EAAEkB,YAAY,CAAC;IAC1D,MAAMF,YAAY,GAAGC,mCAAI,8FAAiB,MAArB,IAAI,CAAmB;IAC5C,IAAID,YAAY,EAAE,IAAI,CAAChB,KAAK,CAAC,cAAc,EAAEgB,YAAY,CAAC;IAE1D,MAAMQ,iBAAiB,GAAGP,mCAAI,uGAA0B,MAA9B,IAAI,CAA4B;IAC1D,IAAIO,iBAAiB,EAAE,IAAI,CAACxB,KAAK,CAAC,uBAAuB,EAAEwB,iBAAiB,CAAC;IAE7E,MAAMC,uBAAuB,GAAGR,mCAAI,6GAAgC,MAApC,IAAI,CAAkC;IACtE,IAAIQ,uBAAuB,IAAI,IAAI,EAAE,IAAI,CAACzB,KAAK,CAAC,6BAA6B,EAAEyB,uBAAuB,CAAC;IAEvG,IAAI,IAAI,CAAC3B,gBAAgB,CAAC4B,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,KAAK,CAAC,EAAE;MAC9C,IAAI,CAAC5B,KAAK,CAAC,YAAY,EAAEiB,mCAAI,kGAAqB,MAAzB,IAAI,CAAuB,CAAC;IACvD;EACF;EAUU,MAAMY,qBAAqB,CACnCC,MAAc,EACdC,MAAkC,EAClCC,OAAwB;IAExB,MAAMC,MAAM,GAAGD,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEC,MAAM;IAC9B,IAAIA,MAAM,EAAE;MACV,IAAIA,MAAM,CAACC,OAAO,EAAE,IAAI,CAACC,UAAU,CAACC,KAAK,EAAE;MAC3CH,MAAM,CAACI,gBAAgB,CAAC,OAAO,EAAE,MAAM,IAAI,CAACF,UAAU,CAACC,KAAK,EAAE,CAAC;IACjE;IACAnB,mCAAI,6FAAgB,MAApB,IAAI,EAAiBc,MAAM,CAAC;IAE5B,MAAMlC,cAAc,GAAG,MAAMiC,MAAM,CAACQ,IAAI,CAACC,WAAW,CAACC,MAAM,iCACpDT,MAAM;MAAEU,MAAM,EAAE;IAAK,oCACrBT,OAAO;MAAEC,MAAM,EAAE,IAAI,CAACE,UAAU,CAACF;IAAM,GAC7C;IACD,IAAI,CAACS,UAAU,EAAE;IACjB,OAAO,IAAI,CAAC9C,kBAAkB,CAAC,gCAAmB,EAACC,cAAc,EAAEkC,MAAM,CAAC,CAAC;EAC7E;EAEU,MAAMY,kBAAkB,CAChCb,MAAc,EACdC,MAAkC,EAClCC,OAAwB;IAExB,KAAK,MAAM/B,OAAO,IAAI8B,MAAM,CAACzB,QAAQ,EAAE;MACrC,IAAI,CAACH,WAAW,CAACF,OAAO,EAAE,KAAK,CAAC;IAClC;IACA,OAAO,MAAM,IAAI,CAAC4B,qBAAqB,CAACC,MAAM,EAAEC,MAAM,EAAEC,OAAO,CAAC;EAClE;EAEU,MAAMY,SAAS,CACvBd,MAAc,EACdC,MAE0D,EAC1DC,OAAuB;IAAA;IAEvB,MAAMa,IAAI,GAAG,MAAe;IAC5B,MAAM;QAAEC,WAAW,GAAG,MAAM;QAAEL;MAAqB,CAAE,GAAGV,MAAM;MAArBgB,UAAU,4BAAKhB,MAAM;IAC9D,MAAMiB,oBAAoB,GACxB,OAAOF,WAAW,KAAK,QAAQ,IAAIA,WAAW,CAACrC,IAAI,KAAK,UAAU,KAAIqC,WAAW,aAAXA,WAAW,gDAAXA,WAAW,CAAEpC,QAAQ,0DAArB,sBAAuBuC,IAAI;IACnG,MAAM;MAAEC,kBAAkB,GAAG1D;IAA4B,CAAE,GAAGwC,OAAO,IAAI,EAAE;IAE3E;IACA,MAAMmB,UAAU,GAAGpB,MAAM,CAACqB,KAAK,CAACC,GAAG,CAAEC,IAAI,IAA+B;MACtE,IAAI,+BAAkB,EAACA,IAAI,CAAC,EAAE;QAC5B,IAAI,CAACA,IAAI,CAACC,SAAS,EAAE;UACnB,MAAM,IAAIxC,mBAAW,CAAC,uEAAuE,CAAC;QAChG;QAEA,OAAO;UACLN,IAAI,EAAE,UAAU;UAChBC,QAAQ,EAAE;YACRA,QAAQ,EAAE4C,IAAI,CAACC,SAAS;YACxBN,IAAI,EAAEK,IAAI,CAAC5C,QAAQ,CAACuC,IAAI;YACxBO,WAAW,EAAEF,IAAI,CAAC5C,QAAQ,CAAC8C,WAAW,IAAI,EAAE;YAC5CC,UAAU,EAAEH,IAAI,CAAC5C,QAAQ,CAAC+C,UAAiB;YAC3CC,KAAK,EAAEJ,IAAI,CAACK,SAAS;YACrBC,MAAM,EAAE;;SAEX;MACH;MAEA,OAAON,IAAwC;IACjD,CAAC,CAAC;IAEF,MAAMO,eAAe,GAA0C,EAAE;IACjE,KAAK,MAAMC,CAAC,IAAIX,UAAU,EAAE;MAC1B,IAAIW,CAAC,CAACrD,IAAI,KAAK,UAAU,EAAE;QACzBoD,eAAe,CAACC,CAAC,CAACpD,QAAQ,CAACuC,IAAI,IAAIa,CAAC,CAACpD,QAAQ,CAACA,QAAQ,CAACuC,IAAI,CAAC,GAAGa,CAAC,CAACpD,QAAQ;MAC3E;IACF;IAEA,MAAM0C,KAAK,GACT,OAAO,IAAIrB,MAAM,GACfoB,UAAU,CAACE,GAAG,CAAEU,CAAC,IACfA,CAAC,CAACtD,IAAI,KAAK,UAAU,GACnB;MACEA,IAAI,EAAE,UAAU;MAChBC,QAAQ,EAAE;QACRuC,IAAI,EAAEc,CAAC,CAACrD,QAAQ,CAACuC,IAAI,IAAIc,CAAC,CAACrD,QAAQ,CAACA,QAAQ,CAACuC,IAAI;QACjDQ,UAAU,EAAEM,CAAC,CAACrD,QAAQ,CAAC+C,UAAqC;QAC5DD,WAAW,EAAEO,CAAC,CAACrD,QAAQ,CAAC8C,WAAW;QACnCI,MAAM,EAAEG,CAAC,CAACrD,QAAQ,CAACkD;;KAEtB,GACAG,CAAmC,CACvC,GACAC,SAAiB;IAEtB,KAAK,MAAM/D,OAAO,IAAI8B,MAAM,CAACzB,QAAQ,EAAE;MACrC,IAAI,CAACH,WAAW,CAACF,OAAO,EAAE,KAAK,CAAC;IAClC;IAEA,KAAK,IAAIgE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGf,kBAAkB,EAAE,EAAEe,CAAC,EAAE;MAAA;MAC3C,MAAMpE,cAAc,GAAmB,MAAM,IAAI,CAACgC,qBAAqB,CACrEC,MAAM,kCAEDiB,UAAU;QACbD,WAAW;QACXM,KAAK;QACL9C,QAAQ,EAAE,CAAC,GAAG,IAAI,CAACA,QAAQ;MAAC,IAE9B0B,OAAO,CACR;MACD,MAAM/B,OAAO,6BAAGJ,cAAc,CAACK,OAAO,CAAC,CAAC,CAAC,2DAAzB,uBAA2BD,OAAO;MAClD,IAAI,CAACA,OAAO,EAAE;QACZ,MAAM,IAAIc,mBAAW,8CAA8C;MACrE;MACA,IAAI,yBAACd,OAAO,CAACM,UAAU,wDAAlB,oBAAoBO,MAAM,GAAE;QAC/B;MACF;MAEA,KAAK,MAAMN,SAAS,IAAIP,OAAO,CAACM,UAAU,EAAE;QAC1C,IAAIC,SAAS,CAACC,IAAI,KAAK,UAAU,EAAE;QACnC,MAAMyD,YAAY,GAAG1D,SAAS,CAAC2D,EAAE;QACjC,MAAM;UAAElB,IAAI;UAAEmB,SAAS,EAAEC;QAAI,CAAE,GAAG7D,SAAS,CAACE,QAAQ;QACpD,MAAM4D,EAAE,GAAGT,eAAe,CAACZ,IAAI,CAAC;QAEhC,IAAI,CAACqB,EAAE,EAAE;UACP,MAAMjE,OAAO,gCAAyBkE,IAAI,CAACC,SAAS,CAACvB,IAAI,CAAC,sCAA4BwB,MAAM,CAACC,IAAI,CAC/Fb,eAAe,CAChB,CACER,GAAG,CAAEJ,IAAI,IAAKsB,IAAI,CAACC,SAAS,CAACvB,IAAI,CAAC,CAAC,CACnC0B,IAAI,CAAC,IAAI,CAAC,uBAAoB;UAEjC,IAAI,CAACxE,WAAW,CAAC;YAAE0C,IAAI;YAAEqB,YAAY;YAAE7D;UAAO,CAAE,CAAC;UACjD;QACF,CAAC,MAAM,IAAI2C,oBAAoB,IAAIA,oBAAoB,KAAKC,IAAI,EAAE;UAChE,MAAM5C,OAAO,gCAAyBkE,IAAI,CAACC,SAAS,CAACvB,IAAI,CAAC,eAAKsB,IAAI,CAACC,SAAS,CAC3ExB,oBAAoB,CACrB,iCAA8B;UAE/B,IAAI,CAAC7C,WAAW,CAAC;YAAE0C,IAAI;YAAEqB,YAAY;YAAE7D;UAAO,CAAE,CAAC;UACjD;QACF;QAEA,IAAIuE,MAAM;QACV,IAAI;UACFA,MAAM,GAAG,kDAA2B,EAACN,EAAE,CAAC,GAAG,MAAMA,EAAE,CAACZ,KAAK,CAACW,IAAI,CAAC,GAAGA,IAAI;QACxE,CAAC,CAAC,OAAOQ,KAAK,EAAE;UACd,MAAMxE,OAAO,GAAGwE,KAAK,YAAYC,KAAK,GAAGD,KAAK,CAAC5E,OAAO,GAAG8E,MAAM,CAACF,KAAK,CAAC;UACtE,IAAI,CAAC1E,WAAW,CAAC;YAAE0C,IAAI;YAAEqB,YAAY;YAAE7D;UAAO,CAAE,CAAC;UACjD;QACF;QAEA;QACA,MAAM2E,UAAU,GAAG,MAAMV,EAAE,CAAC5D,QAAQ,CAACkE,MAAM,EAAE,IAAI,CAAC;QAClD,MAAMvE,OAAO,GAAGY,mCAAI,0GAA6B,MAAjC,IAAI,EAA8B+D,UAAU,CAAC;QAC7D,IAAI,CAAC7E,WAAW,CAAC;UAAE0C,IAAI;UAAEqB,YAAY;UAAE7D;QAAO,CAAE,CAAC;QAEjD,IAAI2C,oBAAoB,EAAE;UACxB;QACF;MACF;IACF;IAEA;EACF;;AA9VFiC;;;EAsDI,gCAAOhE,mCAAI,8FAAiB,MAArB,IAAI,CAAmB,CAACZ,OAAO,yEAAI,IAAI;AAChD,CAAC;EAYC,IAAI4D,CAAC,GAAG,IAAI,CAAC3D,QAAQ,CAACQ,MAAM;EAC5B,OAAOmD,CAAC,EAAE,GAAG,CAAC,EAAE;IACd,MAAMhE,OAAO,GAAG,IAAI,CAACK,QAAQ,CAAC2D,CAAC,CAAC;IAChC,IAAI,4CAAkB,EAAChE,OAAO,CAAC,EAAE;MAAA;MAC/B;MACA,MAAMiF,GAAG,mCACJjF,OAAO;QACVI,OAAO,sBAAGJ,OAAiC,CAACI,OAAO,+DAAI,IAAI;QAC3D8E,OAAO,sBAAGlF,OAAiC,CAACkF,OAAO,+DAAI;MAAI,EAC5D;MACD,OAAOD,GAAG;IACZ;EACF;EACA,MAAM,IAAInE,mBAAW,CAAC,4EAA4E,CAAC;AACrG,CAAC;EAYC,KAAK,IAAIkD,CAAC,GAAG,IAAI,CAAC3D,QAAQ,CAACQ,MAAM,GAAG,CAAC,EAAEmD,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IAAA;IAClD,MAAMhE,OAAO,GAAG,IAAI,CAACK,QAAQ,CAAC2D,CAAC,CAAC;IAChC,IAAI,4CAAkB,EAAChE,OAAO,CAAC,KAAIA,OAAO,aAAPA,OAAO,+CAAPA,OAAO,CAAEM,UAAU,yDAAnB,qBAAqBO,MAAM,GAAE;MAAA;MAC9D,gCAAOb,OAAO,CAACM,UAAU,CAAC6E,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAAC5E,IAAI,KAAK,UAAU,CAAC,CAAC6E,EAAE,CAAC,CAAC,CAAC,CAAC,0DAA9D,sBAAgE5E,QAAQ;IACjF;EACF;EAEA;AACF,CAAC;EAYC,KAAK,IAAIuD,CAAC,GAAG,IAAI,CAAC3D,QAAQ,CAACQ,MAAM,GAAG,CAAC,EAAEmD,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IAClD,MAAMhE,OAAO,GAAG,IAAI,CAACK,QAAQ,CAAC2D,CAAC,CAAC;IAChC,IACE,uCAAa,EAAChE,OAAO,CAAC,IACtBA,OAAO,CAACI,OAAO,IAAI,IAAI,IACvB,OAAOJ,OAAO,CAACI,OAAO,KAAK,QAAQ,IACnC,IAAI,CAACC,QAAQ,CAACoB,IAAI,CACf2D,CAAC;MAAA;MAAA,OACAA,CAAC,CAACxC,IAAI,KAAK,WAAW,sBACtBwC,CAAC,CAAC9E,UAAU,kDAAZ,cAAcmB,IAAI,CAAE6D,CAAC,IAAKA,CAAC,CAAC9E,IAAI,KAAK,UAAU,IAAI8E,CAAC,CAACpB,EAAE,KAAKlE,OAAO,CAACiE,YAAY,CAAC;IAAA,EACpF,EACD;MACA,OAAOjE,OAAO,CAACI,OAAO;IACxB;EACF;EAEA;AACF,CAAC;EAQC,MAAMmF,KAAK,GAAoB;IAC7BC,iBAAiB,EAAE,CAAC;IACpBC,aAAa,EAAE,CAAC;IAChBC,YAAY,EAAE;GACf;EACD,KAAK,MAAM;IAAE/D;EAAK,CAAE,IAAI,IAAI,CAAC9B,gBAAgB,EAAE;IAC7C,IAAI8B,KAAK,EAAE;MACT4D,KAAK,CAACC,iBAAiB,IAAI7D,KAAK,CAAC6D,iBAAiB;MAClDD,KAAK,CAACE,aAAa,IAAI9D,KAAK,CAAC8D,aAAa;MAC1CF,KAAK,CAACG,YAAY,IAAI/D,KAAK,CAAC+D,YAAY;IAC1C;EACF;EACA,OAAOH,KAAK;AACd,CAAC,uGAgCezD,MAAkC;EAChD,IAAIA,MAAM,CAAC6D,CAAC,IAAI,IAAI,IAAI7D,MAAM,CAAC6D,CAAC,GAAG,CAAC,EAAE;IACpC,MAAM,IAAI7E,mBAAW,CACnB,8HAA8H,CAC/H;EACH;AACF,CAAC,iIAmK4BiE,UAAmB;EAC9C,OACE,OAAOA,UAAU,KAAK,QAAQ,GAAGA,UAAU,GACzCA,UAAU,KAAKhB,SAAS,GAAG,WAAW,GACtCO,IAAI,CAACC,SAAS,CAACQ,UAAU,CAAC;AAEhC,CAAC","names":["DEFAULT_MAX_CHAT_COMPLETIONS","AbstractChatCompletionRunner","EventStream_1","constructor","_addChatCompletion","chatCompletion","_chatCompletions","push","_emit","message","choices","_addMessage","emit","content","messages","tool_calls","tool_call","type","function","finalChatCompletion","done","completion","length","error_1","finalContent","tslib_1","finalMessage","finalFunctionToolCall","finalFunctionToolCallResult","totalUsage","allChatCompletions","_emitFinal","finalFunctionCall","finalFunctionCallResult","some","c","usage","_createChatCompletion","client","params","options","signal","aborted","controller","abort","addEventListener","chat","completions","create","stream","_connected","_runChatCompletion","_runTools","role","tool_choice","restParams","singleFunctionToCall","name","maxChatCompletions","inputTools","tools","map","tool","$callback","description","parameters","parse","$parseRaw","strict","functionsByName","f","t","undefined","i","tool_call_id","id","arguments","args","fn","JSON","stringify","Object","keys","join","parsed","error","Error","String","rawContent","exports","ret","refusal","filter","x","at","y","total","completion_tokens","prompt_tokens","total_tokens","n"],"sourceRoot":"","sources":["../src/lib/AbstractChatCompletionRunner.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}