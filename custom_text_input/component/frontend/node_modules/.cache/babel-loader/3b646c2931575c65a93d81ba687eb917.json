{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.chatCompletionStream = void 0;\nconst assistant_data_1 = require(\"../../pinecone-generated-ts-fetch/assistant_data\");\nconst utils_1 = require(\"../../utils\");\nconst errors_1 = require(\"../../errors\");\nconst node_stream_1 = require(\"node:stream\");\nconst chat_1 = require(\"./chat\");\nconst chatCompletionStream = (assistantName, apiProvider, config) => {\n  return async options => {\n    const fetch = (0, utils_1.getFetch)(config);\n    (0, chat_1.validateChatOptions)(options);\n    const hostUrl = await apiProvider.provideHostUrl();\n    const chatUrl = \"\".concat(hostUrl, \"/chat/\").concat(assistantName, \"/chat/completions\");\n    const requestHeaders = {\n      'Api-Key': config.apiKey,\n      'User-Agent': (0, utils_1.buildUserAgent)(config),\n      'X-Pinecone-Api-Version': assistant_data_1.X_PINECONE_API_VERSION\n    };\n    const response = await fetch(chatUrl, {\n      method: 'POST',\n      headers: requestHeaders,\n      body: JSON.stringify({\n        messages: (0, chat_1.messagesValidation)(options),\n        stream: true,\n        model: (0, chat_1.modelValidation)(options),\n        filter: options.filter\n      })\n    });\n    if (response.ok && response.body) {\n      const nodeReadable = node_stream_1.Readable.fromWeb(response.body);\n      return new utils_1.ChatStream(nodeReadable);\n    } else {\n      const err = await (0, errors_1.handleApiError)(new assistant_data_1.ResponseError(response, 'Response returned an error'), undefined, chatUrl);\n      throw err;\n    }\n  };\n};\nexports.chatCompletionStream = chatCompletionStream;","map":{"version":3,"mappings":";;;;;;AAAA;AAKA;AAMA;AAEA;AACA;AAMO,MAAMA,oBAAoB,GAAG,CAClCC,aAAqB,EACrBC,WAAuC,EACvCC,MAA6B,KAC3B;EACF,OAAO,MACLC,OAA8B,IACyB;IACvD,MAAMC,KAAK,GAAG,oBAAQ,EAACF,MAAM,CAAC;IAC9B,8BAAmB,EAACC,OAAO,CAAC;IAE5B,MAAME,OAAO,GAAG,MAAMJ,WAAW,CAACK,cAAc,EAAE;IAClD,MAAMC,OAAO,aAAMF,OAAO,mBAASL,aAAa,sBAAmB;IAEnE,MAAMQ,cAAc,GAAG;MACrB,SAAS,EAAEN,MAAM,CAACO,MAAM;MACxB,YAAY,EAAE,0BAAc,EAACP,MAAM,CAAC;MACpC,wBAAwB,EAAEQ;KAC3B;IAED,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACG,OAAO,EAAE;MACpCK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAEL,cAAc;MACvBM,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,QAAQ,EAAE,6BAAkB,EAACd,OAAO,CAAC;QACrCe,MAAM,EAAE,IAAI;QACZC,KAAK,EAAE,0BAAe,EAAChB,OAAO,CAAC;QAC/BiB,MAAM,EAAEjB,OAAO,CAACiB;OACjB;KACF,CAAC;IAEF,IAAIT,QAAQ,CAACU,EAAE,IAAIV,QAAQ,CAACG,IAAI,EAAE;MAChC,MAAMQ,YAAY,GAAGC,sBAAQ,CAACC,OAAO,CAACb,QAAQ,CAACG,IAAsB,CAAC;MACtE,OAAO,IAAIW,kBAAU,CAAiCH,YAAY,CAAC;KACpE,MAAM;MACL,MAAMI,GAAG,GAAG,MAAM,2BAAc,EAC9B,IAAIhB,8BAAa,CAACC,QAAQ,EAAE,4BAA4B,CAAC,EACzDgB,SAAS,EACTpB,OAAO,CACR;MACD,MAAMmB,GAAG;;EAEb,CAAC;AACH,CAAC;AA3CYE,4BAAoB","names":["chatCompletionStream","assistantName","apiProvider","config","options","fetch","hostUrl","provideHostUrl","chatUrl","requestHeaders","apiKey","assistant_data_1","response","method","headers","body","JSON","stringify","messages","stream","model","filter","ok","nodeReadable","node_stream_1","fromWeb","utils_1","err","undefined","exports"],"sourceRoot":"","sources":["../../../src/assistant/data/chatCompletionStream.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}