{"ast":null,"code":"\"use strict\";\n\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nvar _objectSpread = require(\"/home/morrissimons/Desktop/lysa-support-agent/custom_text_input/component/frontend/node_modules/@babel/runtime/helpers/objectSpread2\");\nvar _taggedTemplateLiteral = require(\"/home/morrissimons/Desktop/lysa-support-agent/custom_text_input/component/frontend/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\nvar _objectWithoutProperties = require(\"/home/morrissimons/Desktop/lysa-support-agent/custom_text_input/component/frontend/node_modules/@babel/runtime/helpers/objectWithoutProperties\");\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6;\nconst _excluded = [\"include\"],\n  _excluded2 = [\"thread_id\"],\n  _excluded3 = [\"thread_id\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Runs = void 0;\nconst tslib_1 = require(\"../../../../internal/tslib.js\");\nconst resource_1 = require(\"../../../../core/resource.js\");\nconst StepsAPI = tslib_1.__importStar(require(\"./steps.js\"));\nconst steps_1 = require(\"./steps.js\");\nconst pagination_1 = require(\"../../../../core/pagination.js\");\nconst headers_1 = require(\"../../../../internal/headers.js\");\nconst AssistantStream_1 = require(\"../../../../lib/AssistantStream.js\");\nconst sleep_1 = require(\"../../../../internal/utils/sleep.js\");\nconst path_1 = require(\"../../../../internal/utils/path.js\");\n/**\n * @deprecated The Assistants API is deprecated in favor of the Responses API\n */\nclass Runs extends resource_1.APIResource {\n  constructor() {\n    super(...arguments);\n    this.steps = new StepsAPI.Steps(this._client);\n  }\n  create(threadID, params, options) {\n    var _params$stream;\n    const {\n        include\n      } = params,\n      body = _objectWithoutProperties(params, _excluded);\n    return this._client.post((0, path_1.path)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"/threads/\", \"/runs\"])), threadID), _objectSpread(_objectSpread({\n      query: {\n        include\n      },\n      body\n    }, options), {}, {\n      headers: (0, headers_1.buildHeaders)([{\n        'OpenAI-Beta': 'assistants=v2'\n      }, options === null || options === void 0 ? void 0 : options.headers]),\n      stream: (_params$stream = params.stream) !== null && _params$stream !== void 0 ? _params$stream : false\n    }));\n  }\n  /**\n   * Retrieves a run.\n   *\n   * @deprecated The Assistants API is deprecated in favor of the Responses API\n   */\n  retrieve(runID, params, options) {\n    const {\n      thread_id\n    } = params;\n    return this._client.get((0, path_1.path)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"/threads/\", \"/runs/\", \"\"])), thread_id, runID), _objectSpread(_objectSpread({}, options), {}, {\n      headers: (0, headers_1.buildHeaders)([{\n        'OpenAI-Beta': 'assistants=v2'\n      }, options === null || options === void 0 ? void 0 : options.headers])\n    }));\n  }\n  /**\n   * Modifies a run.\n   *\n   * @deprecated The Assistants API is deprecated in favor of the Responses API\n   */\n  update(runID, params, options) {\n    const {\n        thread_id\n      } = params,\n      body = _objectWithoutProperties(params, _excluded2);\n    return this._client.post((0, path_1.path)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"/threads/\", \"/runs/\", \"\"])), thread_id, runID), _objectSpread(_objectSpread({\n      body\n    }, options), {}, {\n      headers: (0, headers_1.buildHeaders)([{\n        'OpenAI-Beta': 'assistants=v2'\n      }, options === null || options === void 0 ? void 0 : options.headers])\n    }));\n  }\n  /**\n   * Returns a list of runs belonging to a thread.\n   *\n   * @deprecated The Assistants API is deprecated in favor of the Responses API\n   */\n  list(threadID) {\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let options = arguments.length > 2 ? arguments[2] : undefined;\n    return this._client.getAPIList((0, path_1.path)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"/threads/\", \"/runs\"])), threadID), pagination_1.CursorPage, _objectSpread(_objectSpread({\n      query\n    }, options), {}, {\n      headers: (0, headers_1.buildHeaders)([{\n        'OpenAI-Beta': 'assistants=v2'\n      }, options === null || options === void 0 ? void 0 : options.headers])\n    }));\n  }\n  /**\n   * Cancels a run that is `in_progress`.\n   *\n   * @deprecated The Assistants API is deprecated in favor of the Responses API\n   */\n  cancel(runID, params, options) {\n    const {\n      thread_id\n    } = params;\n    return this._client.post((0, path_1.path)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"/threads/\", \"/runs/\", \"/cancel\"])), thread_id, runID), _objectSpread(_objectSpread({}, options), {}, {\n      headers: (0, headers_1.buildHeaders)([{\n        'OpenAI-Beta': 'assistants=v2'\n      }, options === null || options === void 0 ? void 0 : options.headers])\n    }));\n  }\n  /**\n   * A helper to create a run an poll for a terminal state. More information on Run\n   * lifecycles can be found here:\n   * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n   */\n  async createAndPoll(threadId, body, options) {\n    const run = await this.create(threadId, body, options);\n    return await this.poll(run.id, {\n      thread_id: threadId\n    }, options);\n  }\n  /**\n   * Create a Run stream\n   *\n   * @deprecated use `stream` instead\n   */\n  createAndStream(threadId, body, options) {\n    return AssistantStream_1.AssistantStream.createAssistantStream(threadId, this._client.beta.threads.runs, body, options);\n  }\n  /**\n   * A helper to poll a run status until it reaches a terminal state. More\n   * information on Run lifecycles can be found here:\n   * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n   */\n  async poll(runId, params, options) {\n    var _options$pollInterval, _options$pollInterval2;\n    const headers = (0, headers_1.buildHeaders)([options === null || options === void 0 ? void 0 : options.headers, {\n      'X-Stainless-Poll-Helper': 'true',\n      'X-Stainless-Custom-Poll-Interval': (_options$pollInterval = options === null || options === void 0 ? void 0 : (_options$pollInterval2 = options.pollIntervalMs) === null || _options$pollInterval2 === void 0 ? void 0 : _options$pollInterval2.toString()) !== null && _options$pollInterval !== void 0 ? _options$pollInterval : undefined\n    }]);\n    while (true) {\n      const {\n        data: run,\n        response\n      } = await this.retrieve(runId, params, _objectSpread(_objectSpread({}, options), {}, {\n        headers: _objectSpread(_objectSpread({}, options === null || options === void 0 ? void 0 : options.headers), headers)\n      })).withResponse();\n      switch (run.status) {\n        //If we are in any sort of intermediate state we poll\n        case 'queued':\n        case 'in_progress':\n        case 'cancelling':\n          let sleepInterval = 5000;\n          if (options === null || options === void 0 ? void 0 : options.pollIntervalMs) {\n            sleepInterval = options.pollIntervalMs;\n          } else {\n            const headerInterval = response.headers.get('openai-poll-after-ms');\n            if (headerInterval) {\n              const headerIntervalMs = parseInt(headerInterval);\n              if (!isNaN(headerIntervalMs)) {\n                sleepInterval = headerIntervalMs;\n              }\n            }\n          }\n          await (0, sleep_1.sleep)(sleepInterval);\n          break;\n        //We return the run in any terminal state.\n        case 'requires_action':\n        case 'incomplete':\n        case 'cancelled':\n        case 'completed':\n        case 'failed':\n        case 'expired':\n          return run;\n      }\n    }\n  }\n  /**\n   * Create a Run stream\n   */\n  stream(threadId, body, options) {\n    return AssistantStream_1.AssistantStream.createAssistantStream(threadId, this._client.beta.threads.runs, body, options);\n  }\n  submitToolOutputs(runID, params, options) {\n    var _params$stream2;\n    const {\n        thread_id\n      } = params,\n      body = _objectWithoutProperties(params, _excluded3);\n    return this._client.post((0, path_1.path)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([\"/threads/\", \"/runs/\", \"/submit_tool_outputs\"])), thread_id, runID), _objectSpread(_objectSpread({\n      body\n    }, options), {}, {\n      headers: (0, headers_1.buildHeaders)([{\n        'OpenAI-Beta': 'assistants=v2'\n      }, options === null || options === void 0 ? void 0 : options.headers]),\n      stream: (_params$stream2 = params.stream) !== null && _params$stream2 !== void 0 ? _params$stream2 : false\n    }));\n  }\n  /**\n   * A helper to submit a tool output to a run and poll for a terminal run state.\n   * More information on Run lifecycles can be found here:\n   * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n   */\n  async submitToolOutputsAndPoll(runId, params, options) {\n    const run = await this.submitToolOutputs(runId, params, options);\n    return await this.poll(run.id, params, options);\n  }\n  /**\n   * Submit the tool outputs from a previous run and stream the run to a terminal\n   * state. More information on Run lifecycles can be found here:\n   * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n   */\n  submitToolOutputsStream(runId, params, options) {\n    return AssistantStream_1.AssistantStream.createToolAssistantStream(runId, this._client.beta.threads.runs, params, options);\n  }\n}\nexports.Runs = Runs;\nRuns.Steps = steps_1.Steps;","map":{"version":3,"mappings":"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","names":["Runs","resource_1","constructor","StepsAPI","Steps","_client","create","threadID","params","options","include","body","post","query","headers","stream","retrieve","runID","thread_id","get","update","list","getAPIList","pagination_1","cancel","createAndPoll","threadId","run","poll","id","createAndStream","AssistantStream_1","createAssistantStream","beta","threads","runs","runId","pollIntervalMs","toString","undefined","data","response","withResponse","status","sleepInterval","headerInterval","headerIntervalMs","parseInt","isNaN","submitToolOutputs","submitToolOutputsAndPoll","submitToolOutputsStream","createToolAssistantStream","exports","steps_1"],"sourceRoot":"","sources":["../../../../src/resources/beta/threads/runs/runs.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}