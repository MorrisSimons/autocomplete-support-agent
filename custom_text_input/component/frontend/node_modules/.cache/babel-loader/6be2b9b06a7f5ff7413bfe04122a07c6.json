{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/home/morrissimons/Desktop/lysa-support-agent/custom_text_input/component/frontend/node_modules/@babel/runtime/helpers/objectSpread2\");\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function (s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function () { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function (value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function (value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\nvar _AssistantStream_instances, _a, _AssistantStream_events, _AssistantStream_runStepSnapshots, _AssistantStream_messageSnapshots, _AssistantStream_messageSnapshot, _AssistantStream_finalRun, _AssistantStream_currentContentIndex, _AssistantStream_currentContent, _AssistantStream_currentToolCallIndex, _AssistantStream_currentToolCall, _AssistantStream_currentEvent, _AssistantStream_currentRunSnapshot, _AssistantStream_currentRunStepSnapshot, _AssistantStream_addEvent, _AssistantStream_endRequest, _AssistantStream_handleMessage, _AssistantStream_handleRunStep, _AssistantStream_handleEvent, _AssistantStream_accumulateRunStep, _AssistantStream_accumulateMessage, _AssistantStream_accumulateContent, _AssistantStream_handleRun;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AssistantStream = void 0;\nconst tslib_1 = require(\"../internal/tslib.js\");\nconst streaming_1 = require(\"../streaming.js\");\nconst error_1 = require(\"../error.js\");\nconst EventStream_1 = require(\"./EventStream.js\");\nconst utils_1 = require(\"../internal/utils.js\");\nclass AssistantStream extends EventStream_1.EventStream {\n  constructor() {\n    super(...arguments);\n    _AssistantStream_instances.add(this);\n    //Track all events in a single list for reference\n    _AssistantStream_events.set(this, []);\n    //Used to accumulate deltas\n    //We are accumulating many types so the value here is not strict\n    _AssistantStream_runStepSnapshots.set(this, {});\n    _AssistantStream_messageSnapshots.set(this, {});\n    _AssistantStream_messageSnapshot.set(this, void 0);\n    _AssistantStream_finalRun.set(this, void 0);\n    _AssistantStream_currentContentIndex.set(this, void 0);\n    _AssistantStream_currentContent.set(this, void 0);\n    _AssistantStream_currentToolCallIndex.set(this, void 0);\n    _AssistantStream_currentToolCall.set(this, void 0);\n    //For current snapshot methods\n    _AssistantStream_currentEvent.set(this, void 0);\n    _AssistantStream_currentRunSnapshot.set(this, void 0);\n    _AssistantStream_currentRunStepSnapshot.set(this, void 0);\n  }\n  [(_AssistantStream_events = new WeakMap(), _AssistantStream_runStepSnapshots = new WeakMap(), _AssistantStream_messageSnapshots = new WeakMap(), _AssistantStream_messageSnapshot = new WeakMap(), _AssistantStream_finalRun = new WeakMap(), _AssistantStream_currentContentIndex = new WeakMap(), _AssistantStream_currentContent = new WeakMap(), _AssistantStream_currentToolCallIndex = new WeakMap(), _AssistantStream_currentToolCall = new WeakMap(), _AssistantStream_currentEvent = new WeakMap(), _AssistantStream_currentRunSnapshot = new WeakMap(), _AssistantStream_currentRunStepSnapshot = new WeakMap(), _AssistantStream_instances = new WeakSet(), Symbol.asyncIterator)]() {\n    const pushQueue = [];\n    const readQueue = [];\n    let done = false;\n    //Catch all for passing along all events\n    this.on('event', event => {\n      const reader = readQueue.shift();\n      if (reader) {\n        reader.resolve(event);\n      } else {\n        pushQueue.push(event);\n      }\n    });\n    this.on('end', () => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.resolve(undefined);\n      }\n      readQueue.length = 0;\n    });\n    this.on('abort', err => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.reject(err);\n      }\n      readQueue.length = 0;\n    });\n    this.on('error', err => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.reject(err);\n      }\n      readQueue.length = 0;\n    });\n    return {\n      next: async () => {\n        if (!pushQueue.length) {\n          if (done) {\n            return {\n              value: undefined,\n              done: true\n            };\n          }\n          return new Promise((resolve, reject) => readQueue.push({\n            resolve,\n            reject\n          })).then(chunk => chunk ? {\n            value: chunk,\n            done: false\n          } : {\n            value: undefined,\n            done: true\n          });\n        }\n        const chunk = pushQueue.shift();\n        return {\n          value: chunk,\n          done: false\n        };\n      },\n      return: async () => {\n        this.abort();\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n    };\n  }\n  static fromReadableStream(stream) {\n    const runner = new _a();\n    runner._run(() => runner._fromReadableStream(stream));\n    return runner;\n  }\n  async _fromReadableStream(readableStream, options) {\n    var _stream$controller$si;\n    const signal = options === null || options === void 0 ? void 0 : options.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    this._connected();\n    const stream = streaming_1.Stream.fromReadableStream(readableStream, this.controller);\n    var _iteratorAbruptCompletion = false;\n    var _didIteratorError = false;\n    var _iteratorError;\n    try {\n      for (var _iterator = _asyncIterator(stream), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n        const event = _step.value;\n        tslib_1.__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_addEvent).call(this, event);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (_iteratorAbruptCompletion && _iterator.return != null) {\n          await _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n    if ((_stream$controller$si = stream.controller.signal) === null || _stream$controller$si === void 0 ? void 0 : _stream$controller$si.aborted) {\n      throw new error_1.APIUserAbortError();\n    }\n    return this._addRun(tslib_1.__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_endRequest).call(this));\n  }\n  toReadableStream() {\n    const stream = new streaming_1.Stream(this[Symbol.asyncIterator].bind(this), this.controller);\n    return stream.toReadableStream();\n  }\n  static createToolAssistantStream(runId, runs, params, options) {\n    const runner = new _a();\n    runner._run(() => runner._runToolAssistantStream(runId, runs, params, _objectSpread(_objectSpread({}, options), {}, {\n      headers: _objectSpread(_objectSpread({}, options === null || options === void 0 ? void 0 : options.headers), {}, {\n        'X-Stainless-Helper-Method': 'stream'\n      })\n    })));\n    return runner;\n  }\n  async _createToolAssistantStream(run, runId, params, options) {\n    var _stream$controller$si2;\n    const signal = options === null || options === void 0 ? void 0 : options.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    const body = _objectSpread(_objectSpread({}, params), {}, {\n      stream: true\n    });\n    const stream = await run.submitToolOutputs(runId, body, _objectSpread(_objectSpread({}, options), {}, {\n      signal: this.controller.signal\n    }));\n    this._connected();\n    var _iteratorAbruptCompletion2 = false;\n    var _didIteratorError2 = false;\n    var _iteratorError2;\n    try {\n      for (var _iterator2 = _asyncIterator(stream), _step2; _iteratorAbruptCompletion2 = !(_step2 = await _iterator2.next()).done; _iteratorAbruptCompletion2 = false) {\n        const event = _step2.value;\n        tslib_1.__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_addEvent).call(this, event);\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (_iteratorAbruptCompletion2 && _iterator2.return != null) {\n          await _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n    if ((_stream$controller$si2 = stream.controller.signal) === null || _stream$controller$si2 === void 0 ? void 0 : _stream$controller$si2.aborted) {\n      throw new error_1.APIUserAbortError();\n    }\n    return this._addRun(tslib_1.__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_endRequest).call(this));\n  }\n  static createThreadAssistantStream(params, thread, options) {\n    const runner = new _a();\n    runner._run(() => runner._threadAssistantStream(params, thread, _objectSpread(_objectSpread({}, options), {}, {\n      headers: _objectSpread(_objectSpread({}, options === null || options === void 0 ? void 0 : options.headers), {}, {\n        'X-Stainless-Helper-Method': 'stream'\n      })\n    })));\n    return runner;\n  }\n  static createAssistantStream(threadId, runs, params, options) {\n    const runner = new _a();\n    runner._run(() => runner._runAssistantStream(threadId, runs, params, _objectSpread(_objectSpread({}, options), {}, {\n      headers: _objectSpread(_objectSpread({}, options === null || options === void 0 ? void 0 : options.headers), {}, {\n        'X-Stainless-Helper-Method': 'stream'\n      })\n    })));\n    return runner;\n  }\n  currentEvent() {\n    return tslib_1.__classPrivateFieldGet(this, _AssistantStream_currentEvent, \"f\");\n  }\n  currentRun() {\n    return tslib_1.__classPrivateFieldGet(this, _AssistantStream_currentRunSnapshot, \"f\");\n  }\n  currentMessageSnapshot() {\n    return tslib_1.__classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\");\n  }\n  currentRunStepSnapshot() {\n    return tslib_1.__classPrivateFieldGet(this, _AssistantStream_currentRunStepSnapshot, \"f\");\n  }\n  async finalRunSteps() {\n    await this.done();\n    return Object.values(tslib_1.__classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\"));\n  }\n  async finalMessages() {\n    await this.done();\n    return Object.values(tslib_1.__classPrivateFieldGet(this, _AssistantStream_messageSnapshots, \"f\"));\n  }\n  async finalRun() {\n    await this.done();\n    if (!tslib_1.__classPrivateFieldGet(this, _AssistantStream_finalRun, \"f\")) throw Error('Final run was not received.');\n    return tslib_1.__classPrivateFieldGet(this, _AssistantStream_finalRun, \"f\");\n  }\n  async _createThreadAssistantStream(thread, params, options) {\n    var _stream$controller$si3;\n    const signal = options === null || options === void 0 ? void 0 : options.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    const body = _objectSpread(_objectSpread({}, params), {}, {\n      stream: true\n    });\n    const stream = await thread.createAndRun(body, _objectSpread(_objectSpread({}, options), {}, {\n      signal: this.controller.signal\n    }));\n    this._connected();\n    var _iteratorAbruptCompletion3 = false;\n    var _didIteratorError3 = false;\n    var _iteratorError3;\n    try {\n      for (var _iterator3 = _asyncIterator(stream), _step3; _iteratorAbruptCompletion3 = !(_step3 = await _iterator3.next()).done; _iteratorAbruptCompletion3 = false) {\n        const event = _step3.value;\n        tslib_1.__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_addEvent).call(this, event);\n      }\n    } catch (err) {\n      _didIteratorError3 = true;\n      _iteratorError3 = err;\n    } finally {\n      try {\n        if (_iteratorAbruptCompletion3 && _iterator3.return != null) {\n          await _iterator3.return();\n        }\n      } finally {\n        if (_didIteratorError3) {\n          throw _iteratorError3;\n        }\n      }\n    }\n    if ((_stream$controller$si3 = stream.controller.signal) === null || _stream$controller$si3 === void 0 ? void 0 : _stream$controller$si3.aborted) {\n      throw new error_1.APIUserAbortError();\n    }\n    return this._addRun(tslib_1.__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_endRequest).call(this));\n  }\n  async _createAssistantStream(run, threadId, params, options) {\n    var _stream$controller$si4;\n    const signal = options === null || options === void 0 ? void 0 : options.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    const body = _objectSpread(_objectSpread({}, params), {}, {\n      stream: true\n    });\n    const stream = await run.create(threadId, body, _objectSpread(_objectSpread({}, options), {}, {\n      signal: this.controller.signal\n    }));\n    this._connected();\n    var _iteratorAbruptCompletion4 = false;\n    var _didIteratorError4 = false;\n    var _iteratorError4;\n    try {\n      for (var _iterator4 = _asyncIterator(stream), _step4; _iteratorAbruptCompletion4 = !(_step4 = await _iterator4.next()).done; _iteratorAbruptCompletion4 = false) {\n        const event = _step4.value;\n        tslib_1.__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_addEvent).call(this, event);\n      }\n    } catch (err) {\n      _didIteratorError4 = true;\n      _iteratorError4 = err;\n    } finally {\n      try {\n        if (_iteratorAbruptCompletion4 && _iterator4.return != null) {\n          await _iterator4.return();\n        }\n      } finally {\n        if (_didIteratorError4) {\n          throw _iteratorError4;\n        }\n      }\n    }\n    if ((_stream$controller$si4 = stream.controller.signal) === null || _stream$controller$si4 === void 0 ? void 0 : _stream$controller$si4.aborted) {\n      throw new error_1.APIUserAbortError();\n    }\n    return this._addRun(tslib_1.__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_endRequest).call(this));\n  }\n  static accumulateDelta(acc, delta) {\n    for (const [key, deltaValue] of Object.entries(delta)) {\n      if (!acc.hasOwnProperty(key)) {\n        acc[key] = deltaValue;\n        continue;\n      }\n      let accValue = acc[key];\n      if (accValue === null || accValue === undefined) {\n        acc[key] = deltaValue;\n        continue;\n      }\n      // We don't accumulate these special properties\n      if (key === 'index' || key === 'type') {\n        acc[key] = deltaValue;\n        continue;\n      }\n      // Type-specific accumulation logic\n      if (typeof accValue === 'string' && typeof deltaValue === 'string') {\n        accValue += deltaValue;\n      } else if (typeof accValue === 'number' && typeof deltaValue === 'number') {\n        accValue += deltaValue;\n      } else if ((0, utils_1.isObj)(accValue) && (0, utils_1.isObj)(deltaValue)) {\n        accValue = this.accumulateDelta(accValue, deltaValue);\n      } else if (Array.isArray(accValue) && Array.isArray(deltaValue)) {\n        if (accValue.every(x => typeof x === 'string' || typeof x === 'number')) {\n          accValue.push(...deltaValue); // Use spread syntax for efficient addition\n          continue;\n        }\n        for (const deltaEntry of deltaValue) {\n          if (!(0, utils_1.isObj)(deltaEntry)) {\n            throw new Error(\"Expected array delta entry to be an object but got: \".concat(deltaEntry));\n          }\n          const index = deltaEntry['index'];\n          if (index == null) {\n            console.error(deltaEntry);\n            throw new Error('Expected array delta entry to have an `index` property');\n          }\n          if (typeof index !== 'number') {\n            throw new Error(\"Expected array delta entry `index` property to be a number but got \".concat(index));\n          }\n          const accEntry = accValue[index];\n          if (accEntry == null) {\n            accValue.push(deltaEntry);\n          } else {\n            accValue[index] = this.accumulateDelta(accEntry, deltaEntry);\n          }\n        }\n        continue;\n      } else {\n        throw Error(\"Unhandled record type: \".concat(key, \", deltaValue: \").concat(deltaValue, \", accValue: \").concat(accValue));\n      }\n      acc[key] = accValue;\n    }\n    return acc;\n  }\n  _addRun(run) {\n    return run;\n  }\n  async _threadAssistantStream(params, thread, options) {\n    return await this._createThreadAssistantStream(thread, params, options);\n  }\n  async _runAssistantStream(threadId, runs, params, options) {\n    return await this._createAssistantStream(runs, threadId, params, options);\n  }\n  async _runToolAssistantStream(runId, runs, params, options) {\n    return await this._createToolAssistantStream(runs, runId, params, options);\n  }\n}\nexports.AssistantStream = AssistantStream;\n_a = AssistantStream, _AssistantStream_addEvent = function _AssistantStream_addEvent(event) {\n  if (this.ended) return;\n  tslib_1.__classPrivateFieldSet(this, _AssistantStream_currentEvent, event, \"f\");\n  tslib_1.__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_handleEvent).call(this, event);\n  switch (event.event) {\n    case 'thread.created':\n      //No action on this event.\n      break;\n    case 'thread.run.created':\n    case 'thread.run.queued':\n    case 'thread.run.in_progress':\n    case 'thread.run.requires_action':\n    case 'thread.run.completed':\n    case 'thread.run.incomplete':\n    case 'thread.run.failed':\n    case 'thread.run.cancelling':\n    case 'thread.run.cancelled':\n    case 'thread.run.expired':\n      tslib_1.__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_handleRun).call(this, event);\n      break;\n    case 'thread.run.step.created':\n    case 'thread.run.step.in_progress':\n    case 'thread.run.step.delta':\n    case 'thread.run.step.completed':\n    case 'thread.run.step.failed':\n    case 'thread.run.step.cancelled':\n    case 'thread.run.step.expired':\n      tslib_1.__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_handleRunStep).call(this, event);\n      break;\n    case 'thread.message.created':\n    case 'thread.message.in_progress':\n    case 'thread.message.delta':\n    case 'thread.message.completed':\n    case 'thread.message.incomplete':\n      tslib_1.__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_handleMessage).call(this, event);\n      break;\n    case 'error':\n      //This is included for completeness, but errors are processed in the SSE event processing so this should not occur\n      throw new Error('Encountered an error event in event processing - errors should be processed earlier');\n    default:\n      assertNever(event);\n  }\n}, _AssistantStream_endRequest = function _AssistantStream_endRequest() {\n  if (this.ended) {\n    throw new error_1.OpenAIError(\"stream has ended, this shouldn't happen\");\n  }\n  if (!tslib_1.__classPrivateFieldGet(this, _AssistantStream_finalRun, \"f\")) throw Error('Final run has not been received');\n  return tslib_1.__classPrivateFieldGet(this, _AssistantStream_finalRun, \"f\");\n}, _AssistantStream_handleMessage = function _AssistantStream_handleMessage(event) {\n  const [accumulatedMessage, newContent] = tslib_1.__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_accumulateMessage).call(this, event, tslib_1.__classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\n  tslib_1.__classPrivateFieldSet(this, _AssistantStream_messageSnapshot, accumulatedMessage, \"f\");\n  tslib_1.__classPrivateFieldGet(this, _AssistantStream_messageSnapshots, \"f\")[accumulatedMessage.id] = accumulatedMessage;\n  for (const content of newContent) {\n    const snapshotContent = accumulatedMessage.content[content.index];\n    if ((snapshotContent === null || snapshotContent === void 0 ? void 0 : snapshotContent.type) == 'text') {\n      this._emit('textCreated', snapshotContent.text);\n    }\n  }\n  switch (event.event) {\n    case 'thread.message.created':\n      this._emit('messageCreated', event.data);\n      break;\n    case 'thread.message.in_progress':\n      break;\n    case 'thread.message.delta':\n      this._emit('messageDelta', event.data.delta, accumulatedMessage);\n      if (event.data.delta.content) {\n        for (const content of event.data.delta.content) {\n          //If it is text delta, emit a text delta event\n          if (content.type == 'text' && content.text) {\n            let textDelta = content.text;\n            let snapshot = accumulatedMessage.content[content.index];\n            if (snapshot && snapshot.type == 'text') {\n              this._emit('textDelta', textDelta, snapshot.text);\n            } else {\n              throw Error('The snapshot associated with this text delta is not text or missing');\n            }\n          }\n          if (content.index != tslib_1.__classPrivateFieldGet(this, _AssistantStream_currentContentIndex, \"f\")) {\n            //See if we have in progress content\n            if (tslib_1.__classPrivateFieldGet(this, _AssistantStream_currentContent, \"f\")) {\n              switch (tslib_1.__classPrivateFieldGet(this, _AssistantStream_currentContent, \"f\").type) {\n                case 'text':\n                  this._emit('textDone', tslib_1.__classPrivateFieldGet(this, _AssistantStream_currentContent, \"f\").text, tslib_1.__classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\n                  break;\n                case 'image_file':\n                  this._emit('imageFileDone', tslib_1.__classPrivateFieldGet(this, _AssistantStream_currentContent, \"f\").image_file, tslib_1.__classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\n                  break;\n              }\n            }\n            tslib_1.__classPrivateFieldSet(this, _AssistantStream_currentContentIndex, content.index, \"f\");\n          }\n          tslib_1.__classPrivateFieldSet(this, _AssistantStream_currentContent, accumulatedMessage.content[content.index], \"f\");\n        }\n      }\n      break;\n    case 'thread.message.completed':\n    case 'thread.message.incomplete':\n      //We emit the latest content we were working on on completion (including incomplete)\n      if (tslib_1.__classPrivateFieldGet(this, _AssistantStream_currentContentIndex, \"f\") !== undefined) {\n        const currentContent = event.data.content[tslib_1.__classPrivateFieldGet(this, _AssistantStream_currentContentIndex, \"f\")];\n        if (currentContent) {\n          switch (currentContent.type) {\n            case 'image_file':\n              this._emit('imageFileDone', currentContent.image_file, tslib_1.__classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\n              break;\n            case 'text':\n              this._emit('textDone', currentContent.text, tslib_1.__classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\n              break;\n          }\n        }\n      }\n      if (tslib_1.__classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\")) {\n        this._emit('messageDone', event.data);\n      }\n      tslib_1.__classPrivateFieldSet(this, _AssistantStream_messageSnapshot, undefined, \"f\");\n  }\n}, _AssistantStream_handleRunStep = function _AssistantStream_handleRunStep(event) {\n  const accumulatedRunStep = tslib_1.__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_accumulateRunStep).call(this, event);\n  tslib_1.__classPrivateFieldSet(this, _AssistantStream_currentRunStepSnapshot, accumulatedRunStep, \"f\");\n  switch (event.event) {\n    case 'thread.run.step.created':\n      this._emit('runStepCreated', event.data);\n      break;\n    case 'thread.run.step.delta':\n      const delta = event.data.delta;\n      if (delta.step_details && delta.step_details.type == 'tool_calls' && delta.step_details.tool_calls && accumulatedRunStep.step_details.type == 'tool_calls') {\n        for (const toolCall of delta.step_details.tool_calls) {\n          if (toolCall.index == tslib_1.__classPrivateFieldGet(this, _AssistantStream_currentToolCallIndex, \"f\")) {\n            this._emit('toolCallDelta', toolCall, accumulatedRunStep.step_details.tool_calls[toolCall.index]);\n          } else {\n            if (tslib_1.__classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\")) {\n              this._emit('toolCallDone', tslib_1.__classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\"));\n            }\n            tslib_1.__classPrivateFieldSet(this, _AssistantStream_currentToolCallIndex, toolCall.index, \"f\");\n            tslib_1.__classPrivateFieldSet(this, _AssistantStream_currentToolCall, accumulatedRunStep.step_details.tool_calls[toolCall.index], \"f\");\n            if (tslib_1.__classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\")) this._emit('toolCallCreated', tslib_1.__classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\"));\n          }\n        }\n      }\n      this._emit('runStepDelta', event.data.delta, accumulatedRunStep);\n      break;\n    case 'thread.run.step.completed':\n    case 'thread.run.step.failed':\n    case 'thread.run.step.cancelled':\n    case 'thread.run.step.expired':\n      tslib_1.__classPrivateFieldSet(this, _AssistantStream_currentRunStepSnapshot, undefined, \"f\");\n      const details = event.data.step_details;\n      if (details.type == 'tool_calls') {\n        if (tslib_1.__classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\")) {\n          this._emit('toolCallDone', tslib_1.__classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\"));\n          tslib_1.__classPrivateFieldSet(this, _AssistantStream_currentToolCall, undefined, \"f\");\n        }\n      }\n      this._emit('runStepDone', event.data, accumulatedRunStep);\n      break;\n    case 'thread.run.step.in_progress':\n      break;\n  }\n}, _AssistantStream_handleEvent = function _AssistantStream_handleEvent(event) {\n  tslib_1.__classPrivateFieldGet(this, _AssistantStream_events, \"f\").push(event);\n  this._emit('event', event);\n}, _AssistantStream_accumulateRunStep = function _AssistantStream_accumulateRunStep(event) {\n  switch (event.event) {\n    case 'thread.run.step.created':\n      tslib_1.__classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id] = event.data;\n      return event.data;\n    case 'thread.run.step.delta':\n      let snapshot = tslib_1.__classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id];\n      if (!snapshot) {\n        throw Error('Received a RunStepDelta before creation of a snapshot');\n      }\n      let data = event.data;\n      if (data.delta) {\n        const accumulated = _a.accumulateDelta(snapshot, data.delta);\n        tslib_1.__classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id] = accumulated;\n      }\n      return tslib_1.__classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id];\n    case 'thread.run.step.completed':\n    case 'thread.run.step.failed':\n    case 'thread.run.step.cancelled':\n    case 'thread.run.step.expired':\n    case 'thread.run.step.in_progress':\n      tslib_1.__classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id] = event.data;\n      break;\n  }\n  if (tslib_1.__classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id]) return tslib_1.__classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id];\n  throw new Error('No snapshot available');\n}, _AssistantStream_accumulateMessage = function _AssistantStream_accumulateMessage(event, snapshot) {\n  let newContent = [];\n  switch (event.event) {\n    case 'thread.message.created':\n      //On creation the snapshot is just the initial message\n      return [event.data, newContent];\n    case 'thread.message.delta':\n      if (!snapshot) {\n        throw Error('Received a delta with no existing snapshot (there should be one from message creation)');\n      }\n      let data = event.data;\n      //If this delta does not have content, nothing to process\n      if (data.delta.content) {\n        for (const contentElement of data.delta.content) {\n          if (contentElement.index in snapshot.content) {\n            let currentContent = snapshot.content[contentElement.index];\n            snapshot.content[contentElement.index] = tslib_1.__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_accumulateContent).call(this, contentElement, currentContent);\n          } else {\n            snapshot.content[contentElement.index] = contentElement;\n            // This is a new element\n            newContent.push(contentElement);\n          }\n        }\n      }\n      return [snapshot, newContent];\n    case 'thread.message.in_progress':\n    case 'thread.message.completed':\n    case 'thread.message.incomplete':\n      //No changes on other thread events\n      if (snapshot) {\n        return [snapshot, newContent];\n      } else {\n        throw Error('Received thread message event with no existing snapshot');\n      }\n  }\n  throw Error('Tried to accumulate a non-message event');\n}, _AssistantStream_accumulateContent = function _AssistantStream_accumulateContent(contentElement, currentContent) {\n  return _a.accumulateDelta(currentContent, contentElement);\n}, _AssistantStream_handleRun = function _AssistantStream_handleRun(event) {\n  tslib_1.__classPrivateFieldSet(this, _AssistantStream_currentRunSnapshot, event.data, \"f\");\n  switch (event.event) {\n    case 'thread.run.created':\n      break;\n    case 'thread.run.queued':\n      break;\n    case 'thread.run.in_progress':\n      break;\n    case 'thread.run.requires_action':\n    case 'thread.run.cancelled':\n    case 'thread.run.failed':\n    case 'thread.run.completed':\n    case 'thread.run.expired':\n    case 'thread.run.incomplete':\n      tslib_1.__classPrivateFieldSet(this, _AssistantStream_finalRun, event.data, \"f\");\n      if (tslib_1.__classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\")) {\n        this._emit('toolCallDone', tslib_1.__classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\"));\n        tslib_1.__classPrivateFieldSet(this, _AssistantStream_currentToolCall, undefined, \"f\");\n      }\n      break;\n    case 'thread.run.cancelling':\n      break;\n  }\n};\nfunction assertNever(_x) {}","map":{"version":3,"mappings":"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","names":["AssistantStream","EventStream_1","constructor","_AssistantStream_events","_AssistantStream_runStepSnapshots","_AssistantStream_messageSnapshots","_AssistantStream_messageSnapshot","_AssistantStream_finalRun","_AssistantStream_currentContentIndex","_AssistantStream_currentContent","_AssistantStream_currentToolCallIndex","_AssistantStream_currentToolCall","_AssistantStream_currentEvent","_AssistantStream_currentRunSnapshot","_AssistantStream_currentRunStepSnapshot","Symbol","asyncIterator","pushQueue","readQueue","done","on","event","reader","shift","resolve","push","undefined","length","err","reject","next","value","Promise","then","chunk","return","abort","fromReadableStream","stream","runner","_a","_run","_fromReadableStream","readableStream","options","signal","aborted","controller","addEventListener","_connected","streaming_1","tslib_1","error_1","_addRun","toReadableStream","bind","createToolAssistantStream","runId","runs","params","_runToolAssistantStream","headers","_createToolAssistantStream","run","body","submitToolOutputs","createThreadAssistantStream","thread","_threadAssistantStream","createAssistantStream","threadId","_runAssistantStream","currentEvent","currentRun","currentMessageSnapshot","currentRunStepSnapshot","finalRunSteps","Object","values","finalMessages","finalRun","Error","_createThreadAssistantStream","createAndRun","_createAssistantStream","create","accumulateDelta","acc","delta","key","deltaValue","entries","hasOwnProperty","accValue","Array","isArray","every","x","deltaEntry","index","console","error","accEntry","exports","ended","assertNever","accumulatedMessage","newContent","id","content","snapshotContent","type","_emit","text","data","textDelta","snapshot","image_file","currentContent","accumulatedRunStep","step_details","tool_calls","toolCall","details","accumulated","contentElement","_x"],"sourceRoot":"","sources":["../src/lib/AssistantStream.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}