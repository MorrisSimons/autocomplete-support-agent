{"ast":null,"code":"\"use strict\";\n\nvar _LineDecoder_buffer, _LineDecoder_carriageReturnIndex;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LineDecoder = void 0;\nexports.findDoubleNewlineIndex = findDoubleNewlineIndex;\nconst tslib_1 = require(\"../tslib.js\");\nconst bytes_1 = require(\"../utils/bytes.js\");\n/**\n * A re-implementation of httpx's `LineDecoder` in Python that handles incrementally\n * reading lines from text.\n *\n * https://github.com/encode/httpx/blob/920333ea98118e9cf617f246905d7b202510941c/httpx/_decoders.py#L258\n */\nclass LineDecoder {\n  constructor() {\n    _LineDecoder_buffer.set(this, void 0);\n    _LineDecoder_carriageReturnIndex.set(this, void 0);\n    tslib_1.__classPrivateFieldSet(this, _LineDecoder_buffer, new Uint8Array(), \"f\");\n    tslib_1.__classPrivateFieldSet(this, _LineDecoder_carriageReturnIndex, null, \"f\");\n  }\n  decode(chunk) {\n    if (chunk == null) {\n      return [];\n    }\n    const binaryChunk = chunk instanceof ArrayBuffer ? new Uint8Array(chunk) : typeof chunk === 'string' ? (0, bytes_1.encodeUTF8)(chunk) : chunk;\n    tslib_1.__classPrivateFieldSet(this, _LineDecoder_buffer, (0, bytes_1.concatBytes)([tslib_1.__classPrivateFieldGet(this, _LineDecoder_buffer, \"f\"), binaryChunk]), \"f\");\n    const lines = [];\n    let patternIndex;\n    while ((patternIndex = findNewlineIndex(tslib_1.__classPrivateFieldGet(this, _LineDecoder_buffer, \"f\"), tslib_1.__classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, \"f\"))) != null) {\n      if (patternIndex.carriage && tslib_1.__classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, \"f\") == null) {\n        // skip until we either get a corresponding `\\n`, a new `\\r` or nothing\n        tslib_1.__classPrivateFieldSet(this, _LineDecoder_carriageReturnIndex, patternIndex.index, \"f\");\n        continue;\n      }\n      // we got double \\r or \\rtext\\n\n      if (tslib_1.__classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, \"f\") != null && (patternIndex.index !== tslib_1.__classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, \"f\") + 1 || patternIndex.carriage)) {\n        lines.push((0, bytes_1.decodeUTF8)(tslib_1.__classPrivateFieldGet(this, _LineDecoder_buffer, \"f\").subarray(0, tslib_1.__classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, \"f\") - 1)));\n        tslib_1.__classPrivateFieldSet(this, _LineDecoder_buffer, tslib_1.__classPrivateFieldGet(this, _LineDecoder_buffer, \"f\").subarray(tslib_1.__classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, \"f\")), \"f\");\n        tslib_1.__classPrivateFieldSet(this, _LineDecoder_carriageReturnIndex, null, \"f\");\n        continue;\n      }\n      const endIndex = tslib_1.__classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, \"f\") !== null ? patternIndex.preceding - 1 : patternIndex.preceding;\n      const line = (0, bytes_1.decodeUTF8)(tslib_1.__classPrivateFieldGet(this, _LineDecoder_buffer, \"f\").subarray(0, endIndex));\n      lines.push(line);\n      tslib_1.__classPrivateFieldSet(this, _LineDecoder_buffer, tslib_1.__classPrivateFieldGet(this, _LineDecoder_buffer, \"f\").subarray(patternIndex.index), \"f\");\n      tslib_1.__classPrivateFieldSet(this, _LineDecoder_carriageReturnIndex, null, \"f\");\n    }\n    return lines;\n  }\n  flush() {\n    if (!tslib_1.__classPrivateFieldGet(this, _LineDecoder_buffer, \"f\").length) {\n      return [];\n    }\n    return this.decode('\\n');\n  }\n}\nexports.LineDecoder = LineDecoder;\n_LineDecoder_buffer = new WeakMap(), _LineDecoder_carriageReturnIndex = new WeakMap();\n// prettier-ignore\nLineDecoder.NEWLINE_CHARS = new Set(['\\n', '\\r']);\nLineDecoder.NEWLINE_REGEXP = /\\r\\n|[\\n\\r]/g;\n/**\n * This function searches the buffer for the end patterns, (\\r or \\n)\n * and returns an object with the index preceding the matched newline and the\n * index after the newline char. `null` is returned if no new line is found.\n *\n * ```ts\n * findNewLineIndex('abc\\ndef') -> { preceding: 2, index: 3 }\n * ```\n */\nfunction findNewlineIndex(buffer, startIndex) {\n  const newline = 0x0a; // \\n\n  const carriage = 0x0d; // \\r\n  for (let i = startIndex !== null && startIndex !== void 0 ? startIndex : 0; i < buffer.length; i++) {\n    if (buffer[i] === newline) {\n      return {\n        preceding: i,\n        index: i + 1,\n        carriage: false\n      };\n    }\n    if (buffer[i] === carriage) {\n      return {\n        preceding: i,\n        index: i + 1,\n        carriage: true\n      };\n    }\n  }\n  return null;\n}\nfunction findDoubleNewlineIndex(buffer) {\n  // This function searches the buffer for the end patterns (\\r\\r, \\n\\n, \\r\\n\\r\\n)\n  // and returns the index right after the first occurrence of any pattern,\n  // or -1 if none of the patterns are found.\n  const newline = 0x0a; // \\n\n  const carriage = 0x0d; // \\r\n  for (let i = 0; i < buffer.length - 1; i++) {\n    if (buffer[i] === newline && buffer[i + 1] === newline) {\n      // \\n\\n\n      return i + 2;\n    }\n    if (buffer[i] === carriage && buffer[i + 1] === carriage) {\n      // \\r\\r\n      return i + 2;\n    }\n    if (buffer[i] === carriage && buffer[i + 1] === newline && i + 3 < buffer.length && buffer[i + 2] === carriage && buffer[i + 3] === newline) {\n      // \\r\\n\\r\\n\n      return i + 4;\n    }\n  }\n  return -1;\n}","map":{"version":3,"mappings":"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","names":["exports","LineDecoder","constructor","_LineDecoder_buffer","_LineDecoder_carriageReturnIndex","tslib_1","Uint8Array","decode","chunk","binaryChunk","ArrayBuffer","lines","patternIndex","findNewlineIndex","carriage","index","push","subarray","endIndex","preceding","line","flush","length","Set","buffer","startIndex","newline","i","findDoubleNewlineIndex"],"sourceRoot":"","sources":["../../src/internal/decoders/line.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}