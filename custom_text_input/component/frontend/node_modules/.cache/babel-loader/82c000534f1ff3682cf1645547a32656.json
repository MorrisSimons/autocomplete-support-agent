{"ast":null,"code":"\"use strict\";\n\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nvar _taggedTemplateLiteral = require(\"/home/morrissimons/Desktop/lysa-support-agent/custom_text_input/component/frontend/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\nvar _objectSpread = require(\"/home/morrissimons/Desktop/lysa-support-agent/custom_text_input/component/frontend/node_modules/@babel/runtime/helpers/objectSpread2\");\nvar _templateObject, _templateObject2, _templateObject3;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Responses = void 0;\nconst tslib_1 = require(\"../../internal/tslib.js\");\nconst ResponsesParser_1 = require(\"../../lib/ResponsesParser.js\");\nconst ResponseStream_1 = require(\"../../lib/responses/ResponseStream.js\");\nconst resource_1 = require(\"../../core/resource.js\");\nconst InputItemsAPI = tslib_1.__importStar(require(\"./input-items.js\"));\nconst input_items_1 = require(\"./input-items.js\");\nconst headers_1 = require(\"../../internal/headers.js\");\nconst path_1 = require(\"../../internal/utils/path.js\");\nclass Responses extends resource_1.APIResource {\n  constructor() {\n    super(...arguments);\n    this.inputItems = new InputItemsAPI.InputItems(this._client);\n  }\n  create(body, options) {\n    var _body$stream;\n    return this._client.post('/responses', _objectSpread(_objectSpread({\n      body\n    }, options), {}, {\n      stream: (_body$stream = body.stream) !== null && _body$stream !== void 0 ? _body$stream : false\n    }))._thenUnwrap(rsp => {\n      if ('object' in rsp && rsp.object === 'response') {\n        (0, ResponsesParser_1.addOutputText)(rsp);\n      }\n      return rsp;\n    });\n  }\n  retrieve(responseID) {\n    var _query$stream;\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let options = arguments.length > 2 ? arguments[2] : undefined;\n    return this._client.get((0, path_1.path)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"/responses/\", \"\"])), responseID), _objectSpread(_objectSpread({\n      query\n    }, options), {}, {\n      stream: (_query$stream = query === null || query === void 0 ? void 0 : query.stream) !== null && _query$stream !== void 0 ? _query$stream : false\n    }))._thenUnwrap(rsp => {\n      if ('object' in rsp && rsp.object === 'response') {\n        (0, ResponsesParser_1.addOutputText)(rsp);\n      }\n      return rsp;\n    });\n  }\n  /**\n   * Deletes a model response with the given ID.\n   *\n   * @example\n   * ```ts\n   * await client.responses.delete(\n   *   'resp_677efb5139a88190b512bc3fef8e535d',\n   * );\n   * ```\n   */\n  delete(responseID, options) {\n    return this._client.delete((0, path_1.path)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"/responses/\", \"\"])), responseID), _objectSpread(_objectSpread({}, options), {}, {\n      headers: (0, headers_1.buildHeaders)([{\n        Accept: '*/*'\n      }, options === null || options === void 0 ? void 0 : options.headers])\n    }));\n  }\n  parse(body, options) {\n    return this._client.responses.create(body, options)._thenUnwrap(response => (0, ResponsesParser_1.parseResponse)(response, body));\n  }\n  /**\n   * Creates a model response stream\n   */\n  stream(body, options) {\n    return ResponseStream_1.ResponseStream.createResponse(this._client, body, options);\n  }\n  /**\n   * Cancels a model response with the given ID. Only responses created with the\n   * `background` parameter set to `true` can be cancelled.\n   * [Learn more](https://platform.openai.com/docs/guides/background).\n   *\n   * @example\n   * ```ts\n   * const response = await client.responses.cancel(\n   *   'resp_677efb5139a88190b512bc3fef8e535d',\n   * );\n   * ```\n   */\n  cancel(responseID, options) {\n    return this._client.post((0, path_1.path)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"/responses/\", \"/cancel\"])), responseID), options);\n  }\n}\nexports.Responses = Responses;\nResponses.InputItems = input_items_1.InputItems;","map":{"version":3,"mappings":";;AAAA;AAAA;AAAA;AAAA;;;;;;AAEA;AAMA;AACA;AAGA;AACA;AAIA;AAEA;AAuCA,MAAaA,SAAU,SAAQC,sBAAW;EAA1CC;;IACE,eAAU,GAA6B,IAAIC,aAAa,CAACC,UAAU,CAAC,IAAI,CAACC,OAAO,CAAC;EA8InF;EAjHEC,MAAM,CACJC,IAA0B,EAC1BC,OAAwB;IAAA;IAExB,OACE,IAAI,CAACH,OAAO,CAACI,IAAI,CAAC,YAAY;MAAIF;IAAI,GAAKC,OAAO;MAAEE,MAAM,kBAAEH,IAAI,CAACG,MAAM,uDAAI;IAAK,GAGjF,CAACC,WAAW,CAAEC,GAAG,IAAI;MACpB,IAAI,QAAQ,IAAIA,GAAG,IAAIA,GAAG,CAACC,MAAM,KAAK,UAAU,EAAE;QAChD,mCAAa,EAACD,GAAe,CAAC;MAChC;MAEA,OAAOA,GAAG;IACZ,CAAC,CAAmE;EACtE;EA2BAE,QAAQ,CACNC,UAAkB,EAEM;IAAA;IAAA,IADxBC,4EAA4C,EAAE;IAAA,IAC9CR,OAAwB;IAExB,OACE,IAAI,CAACH,OAAO,CAACY,GAAG,EAAC,cAAI,sFAAcF,UAAU;MAC3CC;IAAK,GACFR,OAAO;MACVE,MAAM,mBAAEM,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEN,MAAM,yDAAI;IAAK,GAEjC,CAACC,WAAW,CAAEC,GAAG,IAAI;MACpB,IAAI,QAAQ,IAAIA,GAAG,IAAIA,GAAG,CAACC,MAAM,KAAK,UAAU,EAAE;QAChD,mCAAa,EAACD,GAAe,CAAC;MAChC;MAEA,OAAOA,GAAG;IACZ,CAAC,CAAmE;EACtE;EAEA;;;;;;;;;;EAUAM,MAAM,CAACH,UAAkB,EAAEP,OAAwB;IACjD,OAAO,IAAI,CAACH,OAAO,CAACa,MAAM,EAAC,cAAI,wFAAcH,UAAU,mCAClDP,OAAO;MACVW,OAAO,EAAE,0BAAY,EAAC,CAAC;QAAEC,MAAM,EAAE;MAAK,CAAE,EAAEZ,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEW,OAAO,CAAC;IAAC,GAC5D;EACJ;EAEAE,KAAK,CACHd,IAAY,EACZC,OAAwB;IAExB,OAAO,IAAI,CAACH,OAAO,CAACiB,SAAS,CAC1BhB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,CACrBG,WAAW,CAAEY,QAAQ,IAAK,mCAAa,EAACA,QAAoB,EAAEhB,IAAI,CAAC,CAAC;EACzE;EAEA;;;EAGAG,MAAM,CACJH,IAAY,EACZC,OAAwB;IAExB,OAAOgB,+BAAc,CAACC,cAAc,CAAU,IAAI,CAACpB,OAAO,EAAEE,IAAI,EAAEC,OAAO,CAAC;EAC5E;EAEA;;;;;;;;;;;;EAYAkB,MAAM,CAACX,UAAkB,EAAEP,OAAwB;IACjD,OAAO,IAAI,CAACH,OAAO,CAACI,IAAI,EAAC,cAAI,+FAAcM,UAAU,GAAWP,OAAO,CAAC;EAC1E;;AA9IFmB;AAwxKA3B,SAAS,CAACI,UAAU,GAAGwB,wBAAU","names":["Responses","resource_1","constructor","InputItemsAPI","InputItems","_client","create","body","options","post","stream","_thenUnwrap","rsp","object","retrieve","responseID","query","get","delete","headers","Accept","parse","responses","response","ResponseStream_1","createResponse","cancel","exports","input_items_1"],"sourceRoot":"","sources":["../../src/resources/responses/responses.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}