{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createIndexForModel = void 0;\nconst db_control_1 = require(\"../pinecone-generated-ts-fetch/db_control\");\nconst errors_1 = require(\"../errors\");\nconst createIndex_1 = require(\"./createIndex\");\nconst validateObjectProperties_1 = require(\"../utils/validateObjectProperties\");\nconst CreateIndexForModelOptionsProperties = ['name', 'cloud', 'region', 'embed', 'deletionProtection', 'tags', 'waitUntilReady', 'suppressConflicts'];\nconst CreateIndexForModelEmbedProperties = ['model', 'metric', 'fieldMap', 'readParameters', 'writeParameters'];\nconst createIndexForModel = api => {\n  return async options => {\n    if (!options) {\n      throw new errors_1.PineconeArgumentError('You must pass an object with required properties (`name`, `cloud`, `region`, and an `embed`)');\n    }\n    validateCreateIndexForModelRequest(options);\n    try {\n      const createResponse = await api.createIndexForModel({\n        createIndexForModelRequest: options\n      });\n      if (options.waitUntilReady) {\n        return await (0, createIndex_1.waitUntilIndexIsReady)(api, createResponse.name);\n      }\n      return createResponse;\n    } catch (e) {\n      if (!(options.suppressConflicts && e instanceof Error && e.name === 'PineconeConflictError')) {\n        throw e;\n      }\n    }\n  };\n};\nexports.createIndexForModel = createIndexForModel;\nconst validateCreateIndexForModelRequest = options => {\n  // validate options properties\n  if (options) {\n    (0, validateObjectProperties_1.ValidateObjectProperties)(options, CreateIndexForModelOptionsProperties);\n  }\n  if (!options.name) {\n    throw new errors_1.PineconeArgumentError('You must pass a non-empty string for `name` in order to create an index.');\n  }\n  if (!options.cloud) {\n    throw new errors_1.PineconeArgumentError('You must pass a non-empty string for `cloud` in order to create an index.');\n  }\n  if (options.cloud && !Object.values(db_control_1.ServerlessSpecCloudEnum).includes(options.cloud)) {\n    throw new errors_1.PineconeArgumentError(\"Invalid cloud value: \".concat(options.cloud, \". Valid values are: \").concat(Object.values(db_control_1.ServerlessSpecCloudEnum).join(', '), \".\"));\n  }\n  if (!options.region) {\n    throw new errors_1.PineconeArgumentError('You must pass a non-empty string for `region` in order to create an index.');\n  }\n  if (!options.embed) {\n    throw new errors_1.PineconeArgumentError('You must pass an `embed` object in order to create an index.');\n  }\n  // validate embed properties\n  if (options.embed) {\n    (0, validateObjectProperties_1.ValidateObjectProperties)(options.embed, CreateIndexForModelEmbedProperties);\n  }\n  if (options.embed.metric && !Object.values(db_control_1.IndexModelMetricEnum).includes(options.embed.metric)) {\n    {\n      throw new errors_1.PineconeArgumentError(\"Invalid metric value: \".concat(options.embed.metric, \". Valid values are: \").concat(Object.values(db_control_1.IndexModelMetricEnum).join(', '), \".\"));\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;AAAA;AASA;AACA;AACA;AA2CA,MAAMA,oCAAoC,GAAqC,CAC7E,MAAM,EACN,OAAO,EACP,QAAQ,EACR,OAAO,EACP,oBAAoB,EACpB,MAAM,EACN,gBAAgB,EAChB,mBAAmB,CACpB;AAkCD,MAAMC,kCAAkC,GAAmC,CACzE,OAAO,EACP,QAAQ,EACR,UAAU,EACV,gBAAgB,EAChB,iBAAiB,CAClB;AAEM,MAAMC,mBAAmB,GAAIC,GAAqB,IAAI;EAC3D,OAAO,MACLC,OAAmC,IACL;IAC9B,IAAI,CAACA,OAAO,EAAE;MACZ,MAAM,IAAIC,8BAAqB,CAC7B,8FAA8F,CAC/F;;IAGHC,kCAAkC,CAACF,OAAO,CAAC;IAC3C,IAAI;MACF,MAAMG,cAAc,GAAG,MAAMJ,GAAG,CAACD,mBAAmB,CAAC;QACnDM,0BAA0B,EAAEJ;OAC7B,CAAC;MACF,IAAIA,OAAO,CAACK,cAAc,EAAE;QAC1B,OAAO,MAAM,uCAAqB,EAACN,GAAG,EAAEI,cAAc,CAACG,IAAI,CAAC;;MAE9D,OAAOH,cAAc;KACtB,CAAC,OAAOI,CAAC,EAAE;MACV,IACE,EACEP,OAAO,CAACQ,iBAAiB,IACzBD,CAAC,YAAYE,KAAK,IAClBF,CAAC,CAACD,IAAI,KAAK,uBAAuB,CACnC,EACD;QACA,MAAMC,CAAC;;;EAGb,CAAC;AACH,CAAC;AA/BYG,2BAAmB;AAiChC,MAAMR,kCAAkC,GACtCF,OAAmC,IACjC;EACF;EACA,IAAIA,OAAO,EAAE;IACX,uDAAwB,EAACA,OAAO,EAAEJ,oCAAoC,CAAC;;EAGzE,IAAI,CAACI,OAAO,CAACM,IAAI,EAAE;IACjB,MAAM,IAAIL,8BAAqB,CAC7B,0EAA0E,CAC3E;;EAEH,IAAI,CAACD,OAAO,CAACW,KAAK,EAAE;IAClB,MAAM,IAAIV,8BAAqB,CAC7B,2EAA2E,CAC5E;;EAEH,IACED,OAAO,CAACW,KAAK,IACb,CAACC,MAAM,CAACC,MAAM,CAACC,oCAAuB,CAAC,CAACC,QAAQ,CAACf,OAAO,CAACW,KAAK,CAAC,EAC/D;IACA,MAAM,IAAIV,8BAAqB,gCACLD,OAAO,CAACW,KAAK,iCAAuBC,MAAM,CAACC,MAAM,CACvEC,oCAAuB,CACxB,CAACE,IAAI,CAAC,IAAI,CAAC,OACb;;EAGH,IAAI,CAAChB,OAAO,CAACiB,MAAM,EAAE;IACnB,MAAM,IAAIhB,8BAAqB,CAC7B,4EAA4E,CAC7E;;EAEH,IAAI,CAACD,OAAO,CAACkB,KAAK,EAAE;IAClB,MAAM,IAAIjB,8BAAqB,CAC7B,8DAA8D,CAC/D;;EAGH;EACA,IAAID,OAAO,CAACkB,KAAK,EAAE;IACjB,uDAAwB,EAAClB,OAAO,CAACkB,KAAK,EAAErB,kCAAkC,CAAC;;EAE7E,IACEG,OAAO,CAACkB,KAAK,CAACC,MAAM,IACpB,CAACP,MAAM,CAACC,MAAM,CAACC,iCAAoB,CAAC,CAACC,QAAQ,CAACf,OAAO,CAACkB,KAAK,CAACC,MAAM,CAAC,EACnE;IACA;MACE,MAAM,IAAIlB,8BAAqB,iCAE3BD,OAAO,CAACkB,KAAK,CAACC,MAChB,iCAAuBP,MAAM,CAACC,MAAM,CAACC,iCAAoB,CAAC,CAACE,IAAI,CAAC,IAAI,CAAC,OACtE;;;AAGP,CAAC","names":["CreateIndexForModelOptionsProperties","CreateIndexForModelEmbedProperties","createIndexForModel","api","options","errors_1","validateCreateIndexForModelRequest","createResponse","createIndexForModelRequest","waitUntilReady","name","e","suppressConflicts","Error","exports","cloud","Object","values","db_control_1","includes","join","region","embed","metric"],"sourceRoot":"","sources":["../../src/control/createIndexForModel.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}