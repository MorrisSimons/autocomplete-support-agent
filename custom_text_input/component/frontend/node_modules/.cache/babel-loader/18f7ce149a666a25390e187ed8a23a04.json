{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IndexHostSingleton = void 0;\nconst control_1 = require(\"../control\");\nconst errors_1 = require(\"../errors\");\nconst utils_1 = require(\"../utils\");\n// We use describeIndex to retrieve the data plane url (host) for a given API key\n// and index. We only ever want to call describeIndex a maximum of once per API key\n// and index, so we cache them in a singleton for reuse.\nexports.IndexHostSingleton = function () {\n  const hostUrls = {}; // map of apiKey-indexName to hostUrl\n  const _describeIndex = async (config, indexName) => {\n    const indexOperationsApi = (0, control_1.indexOperationsBuilder)(config);\n    const describeResponse = await (0, control_1.describeIndex)(indexOperationsApi)(indexName);\n    const host = describeResponse.host;\n    if (!host) {\n      // Generally, middleware will handle most errors from the call itself such as index not found, etc\n      // However, we need to explicitly handle the optionality of status.host\n      throw new errors_1.PineconeUnableToResolveHostError('The HTTP call succeeded but the host URL could not be resolved. Please make sure the index exists and is in a ready state.');\n    } else {\n      return host;\n    }\n  };\n  const _key = (config, indexName) => \"\".concat(config.apiKey, \"-\").concat(indexName);\n  const singleton = {\n    getHostUrl: async (config, indexName) => {\n      const cacheKey = _key(config, indexName);\n      if (cacheKey in hostUrls) {\n        return hostUrls[cacheKey];\n      } else {\n        const hostUrl = await _describeIndex(config, indexName);\n        singleton._set(config, indexName, hostUrl);\n        if (!hostUrls[cacheKey]) {\n          throw new errors_1.PineconeUnableToResolveHostError(\"Could not get host for index: \".concat(indexName, \". Call describeIndex('\").concat(indexName, \"') to check the current status.\"));\n        }\n        return hostUrls[cacheKey];\n      }\n    },\n    _reset: () => {\n      for (const key of Object.keys(hostUrls)) {\n        delete hostUrls[key];\n      }\n    },\n    _set: (config, indexName, hostUrl) => {\n      const normalizedHostUrl = (0, utils_1.normalizeUrl)(hostUrl);\n      // prevent adding an empty hostUrl to the cache\n      if (!normalizedHostUrl) {\n        return;\n      }\n      const cacheKey = _key(config, indexName);\n      hostUrls[cacheKey] = normalizedHostUrl;\n    },\n    _delete: (config, indexName) => {\n      const cacheKey = _key(config, indexName);\n      delete hostUrls[cacheKey];\n    }\n  };\n  return singleton;\n}();","map":{"version":3,"mappings":";;;;;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACaA,0BAAkB,GAAI;EACjC,MAAMC,QAAQ,GAAG,EAAE,CAAC,CAAC;EAErB,MAAMC,cAAc,GAAG,OACrBC,MAA6B,EAC7BC,SAAoB,KACD;IACnB,MAAMC,kBAAkB,GAAG,oCAAsB,EAACF,MAAM,CAAC;IACzD,MAAMG,gBAAgB,GAAG,MAAM,2BAAa,EAACD,kBAAkB,CAAC,CAACD,SAAS,CAAC;IAC3E,MAAMG,IAAI,GAAGD,gBAAgB,CAACC,IAAI;IAElC,IAAI,CAACA,IAAI,EAAE;MACT;MACA;MACA,MAAM,IAAIC,yCAAgC,CACxC,4HAA4H,CAC7H;KACF,MAAM;MACL,OAAOD,IAAI;;EAEf,CAAC;EAED,MAAME,IAAI,GAAG,CAACN,MAA6B,EAAEC,SAAiB,eACzDD,MAAM,CAACO,MAAM,cAAIN,SAAS,CAAE;EAEjC,MAAMO,SAAS,GAAG;IAChBC,UAAU,EAAE,OAAOT,MAA6B,EAAEC,SAAoB,KAAI;MACxE,MAAMS,QAAQ,GAAGJ,IAAI,CAACN,MAAM,EAAEC,SAAS,CAAC;MACxC,IAAIS,QAAQ,IAAIZ,QAAQ,EAAE;QACxB,OAAOA,QAAQ,CAACY,QAAQ,CAAC;OAC1B,MAAM;QACL,MAAMC,OAAO,GAAG,MAAMZ,cAAc,CAACC,MAAM,EAAEC,SAAS,CAAC;QACvDO,SAAS,CAACI,IAAI,CAACZ,MAAM,EAAEC,SAAS,EAAEU,OAAO,CAAC;QAE1C,IAAI,CAACb,QAAQ,CAACY,QAAQ,CAAC,EAAE;UACvB,MAAM,IAAIL,yCAAgC,yCACPJ,SAAS,mCAAyBA,SAAS,qCAC7E;;QAEH,OAAOH,QAAQ,CAACY,QAAQ,CAAC;;IAE7B,CAAC;IAEDG,MAAM,EAAE,MAAK;MACX,KAAK,MAAMC,GAAG,IAAIC,MAAM,CAACC,IAAI,CAAClB,QAAQ,CAAC,EAAE;QACvC,OAAOA,QAAQ,CAACgB,GAAG,CAAC;;IAExB,CAAC;IAEDF,IAAI,EAAE,CACJZ,MAA6B,EAC7BC,SAAoB,EACpBU,OAAe,KACb;MACF,MAAMM,iBAAiB,GAAG,wBAAY,EAACN,OAAO,CAAC;MAC/C;MACA,IAAI,CAACM,iBAAiB,EAAE;QACtB;;MAGF,MAAMP,QAAQ,GAAGJ,IAAI,CAACN,MAAM,EAAEC,SAAS,CAAC;MACxCH,QAAQ,CAACY,QAAQ,CAAC,GAAGO,iBAAiB;IACxC,CAAC;IAEDC,OAAO,EAAE,CAAClB,MAA6B,EAAEC,SAAoB,KAAI;MAC/D,MAAMS,QAAQ,GAAGJ,IAAI,CAACN,MAAM,EAAEC,SAAS,CAAC;MACxC,OAAOH,QAAQ,CAACY,QAAQ,CAAC;IAC3B;GACD;EAED,OAAOF,SAAS;AAClB,CAAC,EAAG","names":["exports","hostUrls","_describeIndex","config","indexName","indexOperationsApi","describeResponse","host","errors_1","_key","apiKey","singleton","getHostUrl","cacheKey","hostUrl","_set","_reset","key","Object","keys","normalizedHostUrl","_delete"],"sourceRoot":"","sources":["../../src/data/indexHostSingleton.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}