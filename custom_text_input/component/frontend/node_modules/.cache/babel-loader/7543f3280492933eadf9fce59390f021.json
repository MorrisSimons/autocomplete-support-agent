{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UpsertCommand = void 0;\nconst types_1 = require(\"./types\");\nconst errors_1 = require(\"../../errors\");\nconst validateObjectProperties_1 = require(\"../../utils/validateObjectProperties\");\nconst utils_1 = require(\"../../utils\");\nclass UpsertCommand {\n  constructor(apiProvider, namespace) {\n    this.validator = records => {\n      for (const record of records) {\n        (0, validateObjectProperties_1.ValidateObjectProperties)(record, types_1.PineconeRecordsProperties);\n      }\n      if (records.length === 0) {\n        throw new errors_1.PineconeArgumentError('Must pass in at least 1 record to upsert.');\n      }\n      records.forEach(record => {\n        if (!record.id) {\n          throw new errors_1.PineconeArgumentError('Every record must include an `id` property in order to upsert.');\n        }\n        if (!record.values && !record.sparseValues) {\n          throw new errors_1.PineconeArgumentError('Every record must include either `values` or `sparseValues` in order to upsert.');\n        }\n      });\n    };\n    this.apiProvider = apiProvider;\n    this.namespace = namespace;\n  }\n  async run(records, maxRetries) {\n    this.validator(records);\n    const api = await this.apiProvider.provide();\n    const retryWrapper = new utils_1.RetryOnServerFailure(api.upsertVectors.bind(api), maxRetries);\n    await retryWrapper.execute({\n      upsertRequest: {\n        vectors: records,\n        namespace: this.namespace\n      }\n    });\n  }\n}\nexports.UpsertCommand = UpsertCommand;","map":{"version":3,"mappings":";;;;;;AAEA;AAKA;AACA;AACA;AAEA,MAAaA,aAAa;EAIxBC,YAAYC,WAAW,EAAEC,SAAS;IAKlC,cAAS,GAAIC,OAAiC,IAAI;MAChD,KAAK,MAAMC,MAAM,IAAID,OAAO,EAAE;QAC5B,uDAAwB,EAACC,MAAM,EAAEC,iCAAyB,CAAC;;MAE7D,IAAIF,OAAO,CAACG,MAAM,KAAK,CAAC,EAAE;QACxB,MAAM,IAAIC,8BAAqB,CAC7B,2CAA2C,CAC5C;;MAEHJ,OAAO,CAACK,OAAO,CAAEJ,MAAM,IAAI;QACzB,IAAI,CAACA,MAAM,CAACK,EAAE,EAAE;UACd,MAAM,IAAIF,8BAAqB,CAC7B,gEAAgE,CACjE;;QAEH,IAAI,CAACH,MAAM,CAACM,MAAM,IAAI,CAACN,MAAM,CAACO,YAAY,EAAE;UAC1C,MAAM,IAAIJ,8BAAqB,CAC7B,iFAAiF,CAClF;;MAEL,CAAC,CAAC;IACJ,CAAC;IAzBC,IAAI,CAACN,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,SAAS,GAAGA,SAAS;EAC5B;EAyBA,MAAMU,GAAG,CACPT,OAAiC,EACjCU,UAAmB;IAEnB,IAAI,CAACC,SAAS,CAACX,OAAO,CAAC;IAEvB,MAAMY,GAAG,GAAG,MAAM,IAAI,CAACd,WAAW,CAACe,OAAO,EAAE;IAE5C,MAAMC,YAAY,GAAG,IAAIC,4BAAoB,CAC3CH,GAAG,CAACI,aAAa,CAACC,IAAI,CAACL,GAAG,CAAC,EAC3BF,UAAU,CACX;IAED,MAAMI,YAAY,CAACI,OAAO,CAAC;MACzBC,aAAa,EAAE;QACbC,OAAO,EAAEpB,OAAwB;QACjCD,SAAS,EAAE,IAAI,CAACA;;KAEnB,CAAC;EACJ;;AAnDFsB","names":["UpsertCommand","constructor","apiProvider","namespace","records","record","types_1","length","errors_1","forEach","id","values","sparseValues","run","maxRetries","validator","api","provide","retryWrapper","utils_1","upsertVectors","bind","execute","upsertRequest","vectors","exports"],"sourceRoot":"","sources":["../../../src/data/vectors/upsert.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}