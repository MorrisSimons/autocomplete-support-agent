{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/home/morrissimons/Desktop/lysa-support-agent/custom_text_input/component/frontend/node_modules/@babel/runtime/helpers/objectSpread2\");\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function (s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function () { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function (value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function (value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\nvar _ResponseStream_instances, _ResponseStream_params, _ResponseStream_currentResponseSnapshot, _ResponseStream_finalResponse, _ResponseStream_beginRequest, _ResponseStream_addEvent, _ResponseStream_endRequest, _ResponseStream_accumulateResponse;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ResponseStream = void 0;\nconst tslib_1 = require(\"../../internal/tslib.js\");\nconst error_1 = require(\"../../error.js\");\nconst EventStream_1 = require(\"../EventStream.js\");\nconst ResponsesParser_1 = require(\"../ResponsesParser.js\");\nclass ResponseStream extends EventStream_1.EventStream {\n  constructor(params) {\n    super();\n    _ResponseStream_instances.add(this);\n    _ResponseStream_params.set(this, void 0);\n    _ResponseStream_currentResponseSnapshot.set(this, void 0);\n    _ResponseStream_finalResponse.set(this, void 0);\n    tslib_1.__classPrivateFieldSet(this, _ResponseStream_params, params, \"f\");\n  }\n  static createResponse(client, params, options) {\n    const runner = new ResponseStream(params);\n    runner._run(() => runner._createOrRetrieveResponse(client, params, _objectSpread(_objectSpread({}, options), {}, {\n      headers: _objectSpread(_objectSpread({}, options === null || options === void 0 ? void 0 : options.headers), {}, {\n        'X-Stainless-Helper-Method': 'stream'\n      })\n    })));\n    return runner;\n  }\n  async _createOrRetrieveResponse(client, params, options) {\n    var _stream$controller$si;\n    const signal = options === null || options === void 0 ? void 0 : options.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    tslib_1.__classPrivateFieldGet(this, _ResponseStream_instances, \"m\", _ResponseStream_beginRequest).call(this);\n    let stream;\n    let starting_after = null;\n    if ('response_id' in params) {\n      var _params$starting_afte;\n      stream = await client.responses.retrieve(params.response_id, {\n        stream: true\n      }, _objectSpread(_objectSpread({}, options), {}, {\n        signal: this.controller.signal,\n        stream: true\n      }));\n      starting_after = (_params$starting_afte = params.starting_after) !== null && _params$starting_afte !== void 0 ? _params$starting_afte : null;\n    } else {\n      stream = await client.responses.create(_objectSpread(_objectSpread({}, params), {}, {\n        stream: true\n      }), _objectSpread(_objectSpread({}, options), {}, {\n        signal: this.controller.signal\n      }));\n    }\n    this._connected();\n    var _iteratorAbruptCompletion = false;\n    var _didIteratorError = false;\n    var _iteratorError;\n    try {\n      for (var _iterator = _asyncIterator(stream), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n        const event = _step.value;\n        tslib_1.__classPrivateFieldGet(this, _ResponseStream_instances, \"m\", _ResponseStream_addEvent).call(this, event, starting_after);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (_iteratorAbruptCompletion && _iterator.return != null) {\n          await _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n    if ((_stream$controller$si = stream.controller.signal) === null || _stream$controller$si === void 0 ? void 0 : _stream$controller$si.aborted) {\n      throw new error_1.APIUserAbortError();\n    }\n    return tslib_1.__classPrivateFieldGet(this, _ResponseStream_instances, \"m\", _ResponseStream_endRequest).call(this);\n  }\n  [(_ResponseStream_params = new WeakMap(), _ResponseStream_currentResponseSnapshot = new WeakMap(), _ResponseStream_finalResponse = new WeakMap(), _ResponseStream_instances = new WeakSet(), _ResponseStream_beginRequest = function _ResponseStream_beginRequest() {\n    if (this.ended) return;\n    tslib_1.__classPrivateFieldSet(this, _ResponseStream_currentResponseSnapshot, undefined, \"f\");\n  }, _ResponseStream_addEvent = function _ResponseStream_addEvent(event, starting_after) {\n    if (this.ended) return;\n    const maybeEmit = (name, event) => {\n      if (starting_after == null || event.sequence_number > starting_after) {\n        this._emit(name, event);\n      }\n    };\n    const response = tslib_1.__classPrivateFieldGet(this, _ResponseStream_instances, \"m\", _ResponseStream_accumulateResponse).call(this, event);\n    maybeEmit('event', event);\n    switch (event.type) {\n      case 'response.output_text.delta':\n        {\n          const output = response.output[event.output_index];\n          if (!output) {\n            throw new error_1.OpenAIError(\"missing output at index \".concat(event.output_index));\n          }\n          if (output.type === 'message') {\n            const content = output.content[event.content_index];\n            if (!content) {\n              throw new error_1.OpenAIError(\"missing content at index \".concat(event.content_index));\n            }\n            if (content.type !== 'output_text') {\n              throw new error_1.OpenAIError(\"expected content to be 'output_text', got \".concat(content.type));\n            }\n            maybeEmit('response.output_text.delta', _objectSpread(_objectSpread({}, event), {}, {\n              snapshot: content.text\n            }));\n          }\n          break;\n        }\n      case 'response.function_call_arguments.delta':\n        {\n          const output = response.output[event.output_index];\n          if (!output) {\n            throw new error_1.OpenAIError(\"missing output at index \".concat(event.output_index));\n          }\n          if (output.type === 'function_call') {\n            maybeEmit('response.function_call_arguments.delta', _objectSpread(_objectSpread({}, event), {}, {\n              snapshot: output.arguments\n            }));\n          }\n          break;\n        }\n      default:\n        maybeEmit(event.type, event);\n        break;\n    }\n  }, _ResponseStream_endRequest = function _ResponseStream_endRequest() {\n    if (this.ended) {\n      throw new error_1.OpenAIError(\"stream has ended, this shouldn't happen\");\n    }\n    const snapshot = tslib_1.__classPrivateFieldGet(this, _ResponseStream_currentResponseSnapshot, \"f\");\n    if (!snapshot) {\n      throw new error_1.OpenAIError(\"request ended without sending any events\");\n    }\n    tslib_1.__classPrivateFieldSet(this, _ResponseStream_currentResponseSnapshot, undefined, \"f\");\n    const parsedResponse = finalizeResponse(snapshot, tslib_1.__classPrivateFieldGet(this, _ResponseStream_params, \"f\"));\n    tslib_1.__classPrivateFieldSet(this, _ResponseStream_finalResponse, parsedResponse, \"f\");\n    return parsedResponse;\n  }, _ResponseStream_accumulateResponse = function _ResponseStream_accumulateResponse(event) {\n    let snapshot = tslib_1.__classPrivateFieldGet(this, _ResponseStream_currentResponseSnapshot, \"f\");\n    if (!snapshot) {\n      if (event.type !== 'response.created') {\n        throw new error_1.OpenAIError(\"When snapshot hasn't been set yet, expected 'response.created' event, got \".concat(event.type));\n      }\n      snapshot = tslib_1.__classPrivateFieldSet(this, _ResponseStream_currentResponseSnapshot, event.response, \"f\");\n      return snapshot;\n    }\n    switch (event.type) {\n      case 'response.output_item.added':\n        {\n          snapshot.output.push(event.item);\n          break;\n        }\n      case 'response.content_part.added':\n        {\n          const output = snapshot.output[event.output_index];\n          if (!output) {\n            throw new error_1.OpenAIError(\"missing output at index \".concat(event.output_index));\n          }\n          if (output.type === 'message') {\n            output.content.push(event.part);\n          }\n          break;\n        }\n      case 'response.output_text.delta':\n        {\n          const output = snapshot.output[event.output_index];\n          if (!output) {\n            throw new error_1.OpenAIError(\"missing output at index \".concat(event.output_index));\n          }\n          if (output.type === 'message') {\n            const content = output.content[event.content_index];\n            if (!content) {\n              throw new error_1.OpenAIError(\"missing content at index \".concat(event.content_index));\n            }\n            if (content.type !== 'output_text') {\n              throw new error_1.OpenAIError(\"expected content to be 'output_text', got \".concat(content.type));\n            }\n            content.text += event.delta;\n          }\n          break;\n        }\n      case 'response.function_call_arguments.delta':\n        {\n          const output = snapshot.output[event.output_index];\n          if (!output) {\n            throw new error_1.OpenAIError(\"missing output at index \".concat(event.output_index));\n          }\n          if (output.type === 'function_call') {\n            output.arguments += event.delta;\n          }\n          break;\n        }\n      case 'response.completed':\n        {\n          tslib_1.__classPrivateFieldSet(this, _ResponseStream_currentResponseSnapshot, event.response, \"f\");\n          break;\n        }\n    }\n    return snapshot;\n  }, Symbol.asyncIterator)]() {\n    const pushQueue = [];\n    const readQueue = [];\n    let done = false;\n    this.on('event', event => {\n      const reader = readQueue.shift();\n      if (reader) {\n        reader.resolve(event);\n      } else {\n        pushQueue.push(event);\n      }\n    });\n    this.on('end', () => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.resolve(undefined);\n      }\n      readQueue.length = 0;\n    });\n    this.on('abort', err => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.reject(err);\n      }\n      readQueue.length = 0;\n    });\n    this.on('error', err => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.reject(err);\n      }\n      readQueue.length = 0;\n    });\n    return {\n      next: async () => {\n        if (!pushQueue.length) {\n          if (done) {\n            return {\n              value: undefined,\n              done: true\n            };\n          }\n          return new Promise((resolve, reject) => readQueue.push({\n            resolve,\n            reject\n          })).then(event => event ? {\n            value: event,\n            done: false\n          } : {\n            value: undefined,\n            done: true\n          });\n        }\n        const event = pushQueue.shift();\n        return {\n          value: event,\n          done: false\n        };\n      },\n      return: async () => {\n        this.abort();\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n    };\n  }\n  /**\n   * @returns a promise that resolves with the final Response, or rejects\n   * if an error occurred or the stream ended prematurely without producing a REsponse.\n   */\n  async finalResponse() {\n    await this.done();\n    const response = tslib_1.__classPrivateFieldGet(this, _ResponseStream_finalResponse, \"f\");\n    if (!response) throw new error_1.OpenAIError('stream ended without producing a ChatCompletion');\n    return response;\n  }\n}\nexports.ResponseStream = ResponseStream;\nfunction finalizeResponse(snapshot, params) {\n  return (0, ResponsesParser_1.maybeParseResponse)(snapshot, params);\n}","map":{"version":3,"mappings":"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","names":["ResponseStream","EventStream_1","constructor","params","_ResponseStream_params","_ResponseStream_currentResponseSnapshot","_ResponseStream_finalResponse","tslib_1","createResponse","client","options","runner","_run","_createOrRetrieveResponse","headers","signal","aborted","controller","abort","addEventListener","stream","starting_after","responses","retrieve","response_id","create","_connected","event","error_1","ended","undefined","maybeEmit","name","sequence_number","_emit","response","type","output","output_index","content","content_index","snapshot","text","arguments","parsedResponse","finalizeResponse","push","item","part","delta","Symbol","asyncIterator","pushQueue","readQueue","done","on","reader","shift","resolve","length","err","reject","next","value","Promise","then","return","finalResponse","exports"],"sourceRoot":"","sources":["../../src/lib/responses/ResponseStream.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}