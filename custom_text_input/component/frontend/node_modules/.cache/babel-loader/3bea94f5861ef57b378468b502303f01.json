{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.uploadFile = void 0;\nconst assistant_data_1 = require(\"../../pinecone-generated-ts-fetch/assistant_data\");\nconst errors_1 = require(\"../../errors\");\nconst utils_1 = require(\"../../utils\");\nconst fs_1 = __importDefault(require(\"fs\"));\nconst path_1 = __importDefault(require(\"path\"));\nconst uploadFile = (assistantName, apiProvider, config) => {\n  return async options => {\n    const fetch = (0, utils_1.getFetch)(config);\n    validateUploadFileOptions(options);\n    const fileBuffer = fs_1.default.readFileSync(options.path);\n    const fileName = path_1.default.basename(options.path);\n    const mimeType = getMimeType(fileName);\n    const fileBlob = new Blob([fileBuffer], {\n      type: mimeType\n    });\n    const formData = new FormData();\n    formData.append('file', fileBlob, fileName);\n    const hostUrl = await apiProvider.provideHostUrl();\n    let filesUrl = \"\".concat(hostUrl, \"/files/\").concat(assistantName);\n    const requestHeaders = {\n      'Api-Key': config.apiKey,\n      'User-Agent': (0, utils_1.buildUserAgent)(config),\n      'X-Pinecone-Api-Version': assistant_data_1.X_PINECONE_API_VERSION\n    };\n    if (options.metadata) {\n      const encodedMetadata = encodeURIComponent(JSON.stringify(options.metadata));\n      filesUrl += \"?metadata=\".concat(encodedMetadata);\n    }\n    const response = await fetch(filesUrl, {\n      method: 'POST',\n      headers: requestHeaders,\n      body: formData\n    });\n    if (response.ok) {\n      const assistantFileModel = new assistant_data_1.JSONApiResponse(response, jsonValue => (0, assistant_data_1.AssistantFileModelFromJSON)(jsonValue)).value();\n      return assistantFileModel;\n    } else {\n      const err = await (0, errors_1.handleApiError)(new assistant_data_1.ResponseError(response, 'Response returned an error'), undefined, filesUrl);\n      throw err;\n    }\n  };\n};\nexports.uploadFile = uploadFile;\nconst validateUploadFileOptions = options => {\n  if (!options || !options.path) {\n    throw new errors_1.PineconeArgumentError('You must pass an object with required properties (`path`) to upload a file.');\n  }\n};\n// get mime types for accepted file types\nfunction getMimeType(filePath) {\n  const extensionToMimeType = {\n    pdf: 'application/pdf',\n    json: 'application/json',\n    txt: 'text/plain',\n    md: 'text/markdown',\n    docx: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n  };\n  // Extract file extension and ensure it's lowercase\n  const parts = filePath.split('.');\n  if (parts.length < 2) {\n    return 'application/octet-stream'; // Default for files without extensions\n  }\n\n  const ext = parts.pop();\n  const extension = ext ? ext.toLowerCase() : '';\n  // Return the MIME type or a default value for unsupported types\n  return extensionToMimeType[extension];\n}","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;AAOA;AAEA;AAEA;AACA;AAEO,MAAMA,UAAU,GAAG,CACxBC,aAAqB,EACrBC,WAAuC,EACvCC,MAA6B,KAC3B;EACF,OAAO,MAAOC,OAA0B,IAAiC;IACvE,MAAMC,KAAK,GAAG,oBAAQ,EAACF,MAAM,CAAC;IAC9BG,yBAAyB,CAACF,OAAO,CAAC;IAElC,MAAMG,UAAU,GAAGC,YAAE,CAACC,YAAY,CAACL,OAAO,CAACM,IAAI,CAAC;IAChD,MAAMC,QAAQ,GAAGC,cAAI,CAACC,QAAQ,CAACT,OAAO,CAACM,IAAI,CAAC;IAC5C,MAAMI,QAAQ,GAAGC,WAAW,CAACJ,QAAQ,CAAC;IACtC,MAAMK,QAAQ,GAAG,IAAIC,IAAI,CAAC,CAACV,UAAU,CAAC,EAAE;MAAEW,IAAI,EAAEJ;IAAQ,CAAE,CAAC;IAC3D,MAAMK,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEL,QAAQ,EAAEL,QAAQ,CAAC;IAC3C,MAAMW,OAAO,GAAG,MAAMpB,WAAW,CAACqB,cAAc,EAAE;IAClD,IAAIC,QAAQ,aAAMF,OAAO,oBAAUrB,aAAa,CAAE;IAElD,MAAMwB,cAAc,GAAG;MACrB,SAAS,EAAEtB,MAAM,CAACuB,MAAM;MACxB,YAAY,EAAE,0BAAc,EAACvB,MAAM,CAAC;MACpC,wBAAwB,EAAEwB;KAC3B;IAED,IAAIvB,OAAO,CAACwB,QAAQ,EAAE;MACpB,MAAMC,eAAe,GAAGC,kBAAkB,CACxCC,IAAI,CAACC,SAAS,CAAC5B,OAAO,CAACwB,QAAQ,CAAC,CACjC;MACDJ,QAAQ,wBAAiBK,eAAe,CAAE;;IAG5C,MAAMI,QAAQ,GAAG,MAAM5B,KAAK,CAACmB,QAAQ,EAAE;MACrCU,MAAM,EAAE,MAAM;MACdC,OAAO,EAAEV,cAAc;MACvBW,IAAI,EAAEjB;KACP,CAAC;IAEF,IAAIc,QAAQ,CAACI,EAAE,EAAE;MACf,MAAMC,kBAAkB,GAAG,IAAIX,gCAAe,CAACM,QAAQ,EAAGM,SAAS,IACjE,+CAA0B,EAACA,SAAS,CAAC,CACtC,CAACC,KAAK,EAAE;MACT,OAAOF,kBAAkB;KAC1B,MAAM;MACL,MAAMG,GAAG,GAAG,MAAM,2BAAc,EAC9B,IAAId,8BAAa,CAACM,QAAQ,EAAE,4BAA4B,CAAC,EACzDS,SAAS,EACTlB,QAAQ,CACT;MACD,MAAMiB,GAAG;;EAEb,CAAC;AACH,CAAC;AAnDYE,kBAAU;AAqDvB,MAAMrC,yBAAyB,GAAIF,OAA0B,IAAI;EAC/D,IAAI,CAACA,OAAO,IAAI,CAACA,OAAO,CAACM,IAAI,EAAE;IAC7B,MAAM,IAAIkC,8BAAqB,CAC7B,6EAA6E,CAC9E;;AAEL,CAAC;AAED;AACA,SAAS7B,WAAW,CAAC8B,QAAgB;EACnC,MAAMC,mBAAmB,GAAG;IAC1BC,GAAG,EAAE,iBAAiB;IACtBC,IAAI,EAAE,kBAAkB;IACxBC,GAAG,EAAE,YAAY;IACjBC,EAAE,EAAE,eAAe;IACnBC,IAAI,EAAE;GACP;EAED;EACA,MAAMC,KAAK,GAAGP,QAAQ,CAACQ,KAAK,CAAC,GAAG,CAAC;EACjC,IAAID,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;IACpB,OAAO,0BAA0B,CAAC,CAAC;;;EAErC,MAAMC,GAAG,GAAGH,KAAK,CAACI,GAAG,EAAE;EACvB,MAAMC,SAAS,GAAGF,GAAG,GAAGA,GAAG,CAACG,WAAW,EAAE,GAAG,EAAE;EAE9C;EACA,OAAOZ,mBAAmB,CAACW,SAAS,CAAC;AACvC","names":["uploadFile","assistantName","apiProvider","config","options","fetch","validateUploadFileOptions","fileBuffer","fs_1","readFileSync","path","fileName","path_1","basename","mimeType","getMimeType","fileBlob","Blob","type","formData","FormData","append","hostUrl","provideHostUrl","filesUrl","requestHeaders","apiKey","assistant_data_1","metadata","encodedMetadata","encodeURIComponent","JSON","stringify","response","method","headers","body","ok","assistantFileModel","jsonValue","value","err","undefined","exports","errors_1","filePath","extensionToMimeType","pdf","json","txt","md","docx","parts","split","length","ext","pop","extension","toLowerCase"],"sourceRoot":"","sources":["../../../src/assistant/data/uploadFile.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}