{"version":3,"sources":["streamlit_copilot.tsx","index.tsx"],"names":["Copilot","StreamlitComponentBase","userTextarea","suggestionTextarea","state","requestsThisMinute","currentMinute","Math","floor","Date","now","totalRequests","successfulRequests","failedRequests","render","theme","this","props","height_int","args","font_fam","font","f_height","f_focused","primaryColor","f_not_focused","secondaryBackgroundColor","style","fontSize","color","textColor","marginBottom","padding","backgroundColor","borderRadius","border","display","justifyContent","alignItems","onClick","resetCounters","cursor","title","tabIndex","height","width","isFocused","overflowY","overflowX","position","onFocus","_onFocus","onBlur","_onBlur","marginLeft","fontFamily","marginTop","whiteSpace","outline","base","value","suggestion","readOnly","ref","textarea","text","onChange","onKeyDown","_onTextAreaBlur","onScroll","forceUpdate","event","target","api_upl","setState","trim","callApi","then","key","preventDefault","prevState","syntheticEvent","textAreaIsFocused","Streamlit","setComponentValue","abortController","AbortController","async","abort","Promise","resolve","setTimeout","prompt_template","api_url","api_key","model_kwargs","prompt","replace","isGroq","includes","payload","validParams","model","max_tokens","temperature","top_p","stop","messages","role","content","stream","echo","headers","console","log","response","fetch","method","body","JSON","stringify","signal","status","ok","errorText","error","Error","responseJson","json","choices","message","name","componentDidUpdate","scrollTop","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06ba8fc5.chunk.js","sourcesContent":["import {\n  StreamlitComponentBase,\n  withStreamlitConnection,\n  Streamlit,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\ninterface State {\n  text: string\n  suggestion: string\n  isFocused: boolean\n  textAreaIsFocused: boolean\n  requestsThisMinute: number\n  currentMinute: number\n  totalRequests: number\n  successfulRequests: number\n  failedRequests: number\n}\n\nclass Copilot extends StreamlitComponentBase<State> {\n\n  private userTextarea: HTMLTextAreaElement | null = null;\n  private suggestionTextarea: HTMLTextAreaElement | null = null;\n  public state = {\n    \"text\": \"\",\n    \"suggestion\": \"\",\n    \"isFocused\": false,\n    'textAreaIsFocused': false,\n    requestsThisMinute: 0,\n    currentMinute: Math.floor(Date.now() / 60000),\n    totalRequests: 0,\n    successfulRequests: 0,\n    failedRequests: 0\n  }\n\n  public render = (): ReactNode => {\n    const { theme } = this.props\n    if (!theme) {\n      return <div>Theme is undefined, please check streamlit version.</div>\n    }\n    const height_int = this.props.args[\"height\"]\n    const font_fam = theme.font;\n\n    const f_height = height_int + 'px';\n\n    const f_focused = '1px solid ' + theme.primaryColor;\n    const f_not_focused = '1px solid ' + theme.secondaryBackgroundColor;\n\n    return (\n        <div>\n          {/* Request Counter Display */}\n          <div style={{\n            fontSize: '0.8em',\n            color: theme.textColor,\n            marginBottom: '0.5em',\n            padding: '0.5em',\n            backgroundColor: theme.backgroundColor,\n            borderRadius: '0.3em',\n            border: '1px solid ' + theme.secondaryBackgroundColor,\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center'\n          }}>\n            <div>\n              üìä <strong>API Stats:</strong> Total: {this.state.totalRequests} | \n              ‚úÖ Success: {this.state.successfulRequests} | \n              ‚ùå Failed: {this.state.failedRequests} | \n              ‚è±Ô∏è This minute: {this.state.requestsThisMinute}/{this.props.args[\"rpm_limit\"]}\n            </div>\n            <button\n              onClick={this.resetCounters}\n              style={{\n                fontSize: '0.7em',\n                padding: '0.2em 0.5em',\n                backgroundColor: theme.primaryColor,\n                color: 'white',\n                border: 'none',\n                borderRadius: '0.3em',\n                cursor: 'pointer'\n              }}\n              title=\"Reset counters\"\n            >\n              üîÑ Reset\n            </button>\n          </div>\n          \n          <div\n            tabIndex={0}\n            style={\n              {\n                height:f_height,\n                width:'auto',\n                border:this.state.isFocused ? f_focused: f_not_focused,\n                borderRadius:'0.5em',\n                overflowY:'scroll',\n                overflowX:'hidden',\n                position: 'relative',\n                backgroundColor: theme.secondaryBackgroundColor\n              }\n            }\n            onFocus={this._onFocus}\n            onBlur={this._onBlur}\n          >\n            <textarea\n              style={\n                {\n                  marginLeft:'0.5em',\n                  fontFamily:font_fam,\n                  marginTop:'0.2em',\n                  whiteSpace: 'pre-wrap',\n                  width:  'calc(100% - 1.2em)',\n                  height: '100%',\n                  border: 'none',\n                  outline: 'none',\n                  position: 'absolute',\n                  backgroundColor: 'transparent',\n                  color: theme.base === 'light' ? 'rgba(41,51,62,0.5)' : 'rgba(255,255,255,0.5)',\n                  padding: '0'\n                }\n              }\n              value={this.state.suggestion}\n              readOnly\n              ref={(textarea) => { this.suggestionTextarea = textarea; }}\n            />\n            <textarea\n              style={\n              {\n                marginLeft:'0.5em',\n                fontFamily:font_fam,\n                marginTop:'0.2em',\n                whiteSpace: 'pre-wrap',\n                width:  'calc(100% - 1.2em)',\n                height: '100%',\n                border: 'none',\n                outline: 'none',\n                position: 'absolute',\n                backgroundColor: 'transparent',\n                color:theme.textColor,\n                padding: '0'\n              }\n            }\n              value={this.state.text}\n              onChange={this.onChange}\n              onKeyDown={this.onKeyDown}\n              onBlur={this._onTextAreaBlur}\n              onScroll={this.onScroll}\n              ref={(textarea) => { this.userTextarea = textarea; }}\n            />\n          </div>\n        </div>\n    )\n  }\n\n  public componentDidUpdate(): void {\n  if (this.userTextarea && this.suggestionTextarea) {\n    this.suggestionTextarea.scrollTop = this.userTextarea.scrollTop;\n  }\n}\nprivate onScroll = (): void => {\n    this.forceUpdate();\n  }\n  private onChange = (event: React.ChangeEvent<HTMLTextAreaElement>): void => {\n  const text = event.target.value\n  const api_upl = this.props.args[\"api_url\"]\n  this.setState({ text, suggestion: \"\" }, () => {\n    if (text.trim() !== \"\") {\n      this.callApi(text, api_upl).then(suggestion => {\n         if (this.state.text.trim() !== \"\") {\n          this.setState({ suggestion: this.state.text + suggestion })\n        }\n      })\n    }\n  })\n}\n\n\n  private onKeyDown = (event: React.KeyboardEvent<HTMLTextAreaElement>): void => {\n  if (event.key === 'Enter') {\n    event.preventDefault()\n    this.setState(prevState => ({\n      text: prevState.suggestion,\n      suggestion: ''\n    }), () => {\n      // Create a synthetic event and call onChange manually\n      const syntheticEvent = {\n        target: { value: this.state.text }\n      } as React.ChangeEvent<HTMLTextAreaElement>;\n      this.onChange(syntheticEvent);\n    })\n  }\n}\n\n  private _onTextAreaBlur = (): void => {\n    this.setState({ textAreaIsFocused: false }, () => {\n      Streamlit.setComponentValue(this.state.text);\n      this.setState({ suggestion: '' });\n    });\n  }\n\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n\n  private resetCounters = (): void => {\n    this.setState({\n      totalRequests: 0,\n      successfulRequests: 0,\n      failedRequests: 0,\n      requestsThisMinute: 0\n    });\n  }\n\n  private abortController = new AbortController();\n\nprivate callApi = async (text: string, api_upl: string): Promise<string> => {\n  // Abort the previous request\n  this.abortController.abort();\n  this.abortController = new AbortController();\n\n  if (text.trim() === \"\") {\n    return \"\";\n  }\n\n  const currentMinute = Math.floor(Date.now() / 60000);\n  if (currentMinute > this.state.currentMinute) {\n    this.setState({\n      currentMinute: currentMinute,\n      requestsThisMinute: 0\n    });\n  } else if (this.state.requestsThisMinute > this.props.args[\"rpm_limit\"]) {\n    // Retry after 1 second if limit is exceeded\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(this.callApi(text, api_upl));\n      }, 1000);\n    });\n  }\n\n  const {prompt_template, api_url, api_key, height, fontFamily, border, ...model_kwargs} = this.props.args;\n  const prompt = prompt_template.replace(\"{text}\", text); // format the prompt\n  \n  // Check if this is a Groq API call (chat completions format)\n  const isGroq = api_upl.includes('groq.com') || api_upl.includes('openai/v1/chat/completions');\n  \n  let payload;\n  if (isGroq) {\n    // Use chat completions format for Groq - only include valid parameters\n    const validParams: any = {};\n    if (model_kwargs.model) validParams.model = model_kwargs.model;\n    if (model_kwargs.max_tokens) validParams.max_tokens = model_kwargs.max_tokens;\n    if (model_kwargs.temperature) validParams.temperature = model_kwargs.temperature;\n    if (model_kwargs.top_p) validParams.top_p = model_kwargs.top_p;\n    if (model_kwargs.stop) validParams.stop = model_kwargs.stop;\n    \n    payload = {\n      messages: [\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      ...validParams,\n      stream: false\n    };\n  } else {\n    // Use legacy completions format for other APIs\n    payload = {\n      prompt: prompt,\n      ...model_kwargs,\n      echo: false\n    };\n  }\n  \n  const headers: Record<string, string> = {\n    'Content-Type': 'application/json'\n  };\n  \n  // Add API key if provided\n  if (api_key) {\n    headers['Authorization'] = `Bearer ${api_key}`;\n  }\n\n  try {\n    console.log(\"üöÄ Making API call to:\", api_upl);\n    console.log(\"üì§ Request payload:\", payload);\n    console.log(\"üîë Headers:\", headers);\n    \n    // Increment total requests counter\n    this.setState(prevState => ({\n      totalRequests: prevState.totalRequests + 1\n    }));\n    \n    const response = await fetch(api_upl, {\n      method: \"POST\",\n      headers: headers,\n      body: JSON.stringify(payload),\n      signal: this.abortController.signal\n    });\n\n    console.log(\"üì° Response status:\", response.status);\n    console.log(\"üì° Response headers:\", response.headers);\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(\"‚ùå API Error Response:\", errorText);\n      \n      // Increment failed requests counter\n      this.setState(prevState => ({\n        failedRequests: prevState.failedRequests + 1\n      }));\n      \n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    this.setState(prevState => ({\n      requestsThisMinute: prevState.requestsThisMinute + 1,\n      successfulRequests: prevState.successfulRequests + 1\n    }));\n\n    const responseJson = await response.json();\n    \n    // Handle both chat completions and legacy completions formats\n    if (isGroq && responseJson.choices && responseJson.choices[0] && responseJson.choices[0].message) {\n      return responseJson.choices[0].message.content;\n    } else if (responseJson.choices && responseJson.choices[0] && responseJson.choices[0].text) {\n      return responseJson.choices[0].text;\n    } else {\n      console.error(\"Unexpected response format:\", responseJson);\n      return \"\";\n    }\n  } catch (error) {\n    if (error instanceof Error && error.name === 'AbortError') {\n      return \"\";  // Return empty string if request was aborted\n    }\n    console.error(\"Error decoding response\", error);\n    return \"\";\n  }\n}\n}\n\nexport default withStreamlitConnection(Copilot)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport ScrollableText from \"./streamlit_copilot\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ScrollableText />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}